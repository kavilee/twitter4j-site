<?xml version="1.0" encoding="iso-8859-1" standalone="no"?>
<!-- Generated by the JDiff Javadoc doclet -->
<!-- (http://www.jdiff.org) -->
<!-- on Sun Jan 24 04:42:18 JST 2010 -->

<api
  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
  xsi:noNamespaceSchemaLocation='api.xsd'
  name="../core-2.1.0-SNAPSHOT"
  jdversion="1.1.1">

<!--  Command line arguments =  -doclet jdiff.JDiff -docletpath /Users/yusukey/Downloads/jdiff-1.1.1/jdiff.jar:/Users/yusukey/Downloads/jdiff-1.1.1/xerces.jar -d /Users/yusukey/server/jboss-4.2.2.GA/server/default/deploy/twitter4j.war/oldjavadocs/2.0.10-core-2.1.0-SNAPSHOT -classpath /usr/share/ant/lib/ant-launcher.jar:/usr/share/ant/lib/ant-antlr.jar:/usr/share/ant/lib/ant-jai.jar:/usr/share/ant/lib/ant-jmf.jar:/usr/share/ant/lib/ant-junit.jar:/usr/share/ant/lib/ant-nodeps.jar:/usr/share/ant/lib/ant-swing.jar:/usr/share/ant/lib/ant-testutil.jar:/usr/share/ant/lib/ant-trax.jar:/usr/share/ant/lib/ant.jar:/usr/share/ant/lib/xercesImpl.jar:/usr/share/ant/lib/xml-apis.jar -sourcepath /Users/yusukey/server/jboss-4.2.2.GA/server/default/deploy/twitter4j.war/oldjavadocs/core-2.1.0-SNAPSHOT-source -apiname ../core-2.1.0-SNAPSHOT -baseURI http://www.w3.org -apidir /Users/yusukey/server/jboss-4.2.2.GA/server/default/deploy/twitter4j.war/oldjavadocs/2.0.10-core-2.1.0-SNAPSHOT -source 1.5 -->
<package name="twitter4j">
  <!-- start class twitter4j.AsyncTwitter -->
  <class name="AsyncTwitter" extends="twitter4j.TwitterOAuthSupportBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <implements name="twitter4j.api.SearchMethodsAsync"/>
    <implements name="twitter4j.api.TimelineMethodsAsync"/>
    <implements name="twitter4j.api.StatusMethodsAsync"/>
    <implements name="twitter4j.api.UserMethodsAsync"/>
    <implements name="twitter4j.api.ListMethodsAsync"/>
    <implements name="twitter4j.api.ListMembersMethodsAsync"/>
    <implements name="twitter4j.api.ListSubscribersMethodsAsync"/>
    <implements name="twitter4j.api.DirectMessageMethodsAsync"/>
    <implements name="twitter4j.api.FriendshipMethodsAsync"/>
    <implements name="twitter4j.api.SocialGraphMethodsAsync"/>
    <implements name="twitter4j.api.AccountMethodsAsync"/>
    <implements name="twitter4j.api.FavoriteMethodsAsync"/>
    <implements name="twitter4j.api.NotificationMethodsAsync"/>
    <implements name="twitter4j.api.BlockMethodsAsync"/>
    <implements name="twitter4j.api.SpamReportingMethodsAsync"/>
    <implements name="twitter4j.api.SavedSearchesMethodsAsync"/>
    <implements name="twitter4j.api.LocalTrendsMethodsAsync"/>
    <implements name="twitter4j.api.HelpMethodsAsync"/>
    <constructor name="AsyncTwitter" type="java.lang.String, java.lang.String, twitter4j.TwitterListener"
      static="false" final="false" visibility="public"
      deprecated="use new AsyncTwitterFactory.getBasicAuthorizedInstance() instead.">
      <doc>
      <![CDATA[Creates a basic authenticated AsyncTwitter instance.
 @param screenName screen name
 @param password password
 @param listener
 @deprecated use new AsyncTwitterFactory.getBasicAuthorizedInstance() instead.]]>
      </doc>
    </constructor>
    <method name="search"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="query" type="twitter4j.Query"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getCurrentTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getCurrentTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="excludeHashTags" type="boolean"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getDailyTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getDailyTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="date" type="java.util.Date"/>
      <param name="excludeHashTags" type="boolean"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getWeeklyTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getWeeklyTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="date" type="java.util.Date"/>
      <param name="excludeHashTags" type="boolean"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getPublicTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getHomeTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getHomeTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFriendsTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFriendsTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getUserTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="paging" type="twitter4j.Paging"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getUserTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="paging" type="twitter4j.Paging"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getUserTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getUserTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getUserTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getUserTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getMentions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getMentions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getRetweetedByMe"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getRetweetedByMe"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getRetweetedToMe"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getRetweetedToMe"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getRetweetsOfMe"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getRetweetsOfMe"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="showStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="long"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="updateStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="java.lang.String"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="updateStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="java.lang.String"/>
      <param name="location" type="twitter4j.GeoLocation"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="updateStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="java.lang.String"/>
      <param name="inReplyToStatusId" type="long"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="updateStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="java.lang.String"/>
      <param name="inReplyToStatusId" type="long"/>
      <param name="location" type="twitter4j.GeoLocation"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="destroyStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusId" type="long"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="retweetStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusId" type="long"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getRetweets"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusId" type="long"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="showUser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="showUser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="searchUsers"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="query" type="java.lang.String"/>
      <param name="page" type="int"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFriendsStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFriendsStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cursor" type="long"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFriendsStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFriendsStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFriendsStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="cursor" type="long"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFriendsStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="cursor" type="long"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFollowersStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFollowersStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cursor" type="long"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFollowersStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFollowersStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFollowersStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="cursor" type="long"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFollowersStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="cursor" type="long"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getDirectMessages"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getDirectMessages"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getSentDirectMessages"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getSentDirectMessages"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="sendDirectMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="text" type="java.lang.String"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="sendDirectMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="text" type="java.lang.String"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="destroyDirectMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="int"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="createFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="createFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="createFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="follow" type="boolean"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="createFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="follow" type="boolean"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="destroyFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="destroyFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="existsFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userA" type="java.lang.String"/>
      <param name="userB" type="java.lang.String"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="showFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceScreenName" type="java.lang.String"/>
      <param name="targetScreenName" type="java.lang.String"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="showFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceId" type="int"/>
      <param name="targetId" type="int"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFriendsIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFriendsIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cursor" type="long"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFriendsIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFriendsIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="cursor" type="long"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFriendsIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFriendsIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="cursor" type="long"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFollowersIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFollowersIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cursor" type="long"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFollowersIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFollowersIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="cursor" type="long"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFollowersIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFollowersIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="cursor" type="long"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="updateProfile"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="email" type="java.lang.String"/>
      <param name="url" type="java.lang.String"/>
      <param name="location" type="java.lang.String"/>
      <param name="description" type="java.lang.String"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getRateLimitStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="updateDeliveryDevice"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="device" type="twitter4j.Device"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="updateProfileColors"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="profileBackgroundColor" type="java.lang.String"/>
      <param name="profileTextColor" type="java.lang.String"/>
      <param name="profileLinkColor" type="java.lang.String"/>
      <param name="profileSidebarFillColor" type="java.lang.String"/>
      <param name="profileSidebarBorderColor" type="java.lang.String"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="updateProfileImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="image" type="java.io.File"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="updateProfileBackgroundImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="image" type="java.io.File"/>
      <param name="tile" type="boolean"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFavorites"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFavorites"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="page" type="int"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFavorites"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFavorites"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="page" type="int"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="createFavorite"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="long"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="destroyFavorite"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="long"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="enableNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="enableNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="disableNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="disableNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="createBlock"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="createBlockAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="destroyBlock"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="destroyBlock"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="existsBlock"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="existsBlock"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getBlockingUsers"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getBlockingUsers"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="page" type="int"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getBlockingUsersIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="reportSpam"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="reportSpam"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="test"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="shutdown"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Shuts down internal dispather thread.

 @since Twitter4J 2.0.2]]>
      </doc>
    </method>
    <method name="setOAuthConsumer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="consumerKey" type="java.lang.String"/>
      <param name="consumerSecret" type="java.lang.String"/>
    </method>
    <method name="getOAuthRequestToken" return="twitter4j.http.RequestToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
    </method>
    <method name="getOAuthRequestToken" return="twitter4j.http.RequestToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="callbackUrl" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
    </method>
    <method name="getOAuthAccessToken" return="twitter4j.http.AccessToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
    </method>
    <method name="getOAuthAccessToken" return="twitter4j.http.AccessToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="oauthVerifier" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
    </method>
    <method name="getOAuthAccessToken" return="twitter4j.http.AccessToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestToken" type="twitter4j.http.RequestToken"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
    </method>
    <method name="getOAuthAccessToken" return="twitter4j.http.AccessToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestToken" type="twitter4j.http.RequestToken"/>
      <param name="oauthVerifier" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
    </method>
    <method name="setOAuthAccessToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="accessToken" type="twitter4j.http.AccessToken"/>
    </method>
    <method name="getOAuthAccessToken" return="twitter4j.http.AccessToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="token" type="java.lang.String"/>
      <param name="tokenSecret" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
    </method>
    <method name="getOAuthAccessToken" return="twitter4j.http.AccessToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="token" type="java.lang.String"/>
      <param name="tokenSecret" type="java.lang.String"/>
      <param name="pin" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
    </method>
    <method name="setOAuthAccessToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="token" type="java.lang.String"/>
      <param name="tokenSecret" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[Twitter API with a series of asynchronous APIs.<br>
 With this class, you can call TwitterAPI asynchronously.<br>
 Note that currently this class is NOT compatible with Google App Engine as it is maintaining threads internally.
 @see twitter4j.AsyncTwitter
 @see twitter4j.TwitterListener
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.AsyncTwitter -->
  <!-- start class twitter4j.AsyncTwitterFactory -->
  <class name="AsyncTwitterFactory" extends="twitter4j.TwitterFactoryOAuthSupportBase&lt;twitter4j.AsyncTwitter&gt;"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <constructor name="AsyncTwitterFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a AsyncTwitterFactory with the root configuration, with no listener. AsyncTwitter instances will not perform callbacks when using this constructor.]]>
      </doc>
    </constructor>
    <constructor name="AsyncTwitterFactory" type="twitter4j.TwitterListener"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a AsyncTwitterFactory with the root configuration, with given listener
 @param listener listener]]>
      </doc>
    </constructor>
    <constructor name="AsyncTwitterFactory" type="java.lang.String, twitter4j.TwitterListener"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a AsyncTwitterFactory with a specified config tree, with given listener
 @param configTreePath the path
 @param listener listener]]>
      </doc>
    </constructor>
    <method name="getInstance" return="twitter4j.AsyncTwitter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="conf" type="twitter4j.conf.Configuration"/>
      <param name="auth" type="twitter4j.http.Authorization"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getOAuthSupportInstance" return="twitter4j.AsyncTwitter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="conf" type="twitter4j.conf.Configuration"/>
      <param name="auth" type="twitter4j.http.Authorization"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A factory class for AsyncTwitter.<br>
 An instance of this class is completely thread safe and can be re-used and used concurrently.<br>
 Note that currently AsyncTwitter is NOT compatible with Google App Engine as it is maintaining threads internally.

 @author Yusuke Yamamoto - yusuke at mac.com
 @since Twitter4J 2.1.0]]>
    </doc>
  </class>
  <!-- end class twitter4j.AsyncTwitterFactory -->
  <!-- start interface twitter4j.CursorSupport -->
  <interface name="CursorSupport"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="hasPrevious" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getPreviousCursor" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="hasNext" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getNextCursor" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.CursorSupport -->
  <!-- start class twitter4j.Device -->
  <class name="Device" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="SMS" type="twitter4j.Device"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="NONE" type="twitter4j.Device"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.Device -->
  <!-- start interface twitter4j.DirectMessage -->
  <interface name="DirectMessage"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="twitter4j.TwitterResponse"/>
    <implements name="java.io.Serializable"/>
    <method name="getId" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getText" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSenderId" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRecipientId" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getCreatedAt" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return created_at
 @since Twitter4J 1.1.0]]>
      </doc>
    </method>
    <method name="getSenderScreenName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRecipientScreenName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSender" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRecipient" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A data interface representing sent/received direct message.
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.DirectMessage -->
  <!-- start class twitter4j.GeoLocation -->
  <class name="GeoLocation" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <constructor name="GeoLocation" type="double, double"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a GeoLocation instance
 @param latitude the latitude
 @param longitude the longitude]]>
      </doc>
    </constructor>
    <method name="getLatitude" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[returns the latitude of the geo location
 @return the latitude]]>
      </doc>
    </method>
    <method name="getLongitude" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[returns the longitude of the geo location
 @return the longitude]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="latitude" type="double"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="longitude" type="double"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[A data class representing geo location.

 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.GeoLocation -->
  <!-- start interface twitter4j.IDs -->
  <interface name="IDs"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="twitter4j.TwitterResponse"/>
    <implements name="twitter4j.CursorSupport"/>
    <implements name="java.io.Serializable"/>
    <method name="getIDs" return="int[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hasPrevious" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPreviousCursor" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hasNext" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNextCursor" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A data interface representing array of numeric IDs.

 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.IDs -->
  <!-- start class twitter4j.PagableResponseList -->
  <class name="PagableResponseList" extends="twitter4j.ResponseList&lt;T&gt;"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="twitter4j.CursorSupport"/>
    <method name="hasPrevious" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPreviousCursor" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hasNext" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNextCursor" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[CursorSupport'ed ResponseList implementation.

 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.PagableResponseList -->
  <!-- start class twitter4j.Paging -->
  <class name="Paging" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <constructor name="Paging"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Paging" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Paging" type="long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Paging" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Paging" type="int, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Paging" type="int, int, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Paging" type="int, int, long, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getPage" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="page" type="int"/>
    </method>
    <method name="getCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setCount"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="count" type="int"/>
    </method>
    <method name="count" return="twitter4j.Paging"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="count" type="int"/>
    </method>
    <method name="getSinceId" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setSinceId"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sinceId" type="long"/>
    </method>
    <method name="sinceId" return="twitter4j.Paging"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sinceId" type="long"/>
    </method>
    <method name="getMaxId" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setMaxId"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="maxId" type="long"/>
    </method>
    <method name="maxId" return="twitter4j.Paging"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="maxId" type="long"/>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Controls pagination.<br>
 It is possible to use the same Paging instance in a multi-threaded
 context only if the instance is treated immutably.<br>
 But basically instance of this class is NOT thread safe.
 A client should instantiate Paging class per thread.<br>

 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.Paging -->
  <!-- start class twitter4j.Query -->
  <class name="Query" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Query"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Query" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getQuery" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setQuery"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="query" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the query string
 @param query the query string
 @see <a href="http://apiwiki.twitter.com/Search-API-Documentation">Twitter API / Search API Documentation</a>
 @see <a href="http://search.twitter.com/operators">Twitter API / Search Operators</a>]]>
      </doc>
    </method>
    <method name="query" return="twitter4j.Query"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="query" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the query string
 @param query the query string
 @return the instance
 @see <a href="http://apiwiki.twitter.com/Search-API-Documentation">Twitter API / Search API Documentation</a>
 @see <a href="http://search.twitter.com/operators">Twitter API / Search Operators</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="getLang" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setLang"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lang" type="java.lang.String"/>
      <doc>
      <![CDATA[restricts tweets to the given language, given by an <a href="http://en.wikipedia.org/wiki/ISO_639-1">ISO 639-1 code</a>
 @param lang an <a href="http://en.wikipedia.org/wiki/ISO_639-1">ISO 639-1 code</a>]]>
      </doc>
    </method>
    <method name="lang" return="twitter4j.Query"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lang" type="java.lang.String"/>
      <doc>
      <![CDATA[restricts tweets to the given language, given by an <a href="http://en.wikipedia.org/wiki/ISO_639-1">ISO 639-1 code</a>
 @param lang an <a href="http://en.wikipedia.org/wiki/ISO_639-1">ISO 639-1 code</a>
 @return the instance
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="getRpp" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setRpp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rpp" type="int"/>
      <doc>
      <![CDATA[sets the number of tweets to return per page, up to a max of 100
 @param rpp the number of tweets to return per page]]>
      </doc>
    </method>
    <method name="rpp" return="twitter4j.Query"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rpp" type="int"/>
      <doc>
      <![CDATA[sets the number of tweets to return per page, up to a max of 100
 @param rpp the number of tweets to return per page
 @return the instance
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="getPage" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="page" type="int"/>
      <doc>
      <![CDATA[sets the page number (starting at 1) to return, up to a max of roughly 1500 results
 @param page the page number (starting at 1) to return]]>
      </doc>
    </method>
    <method name="page" return="twitter4j.Query"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="page" type="int"/>
      <doc>
      <![CDATA[sets the page number (starting at 1) to return, up to a max of roughly 1500 results
 @param page the page number (starting at 1) to return
 @return the instance
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="getSinceId" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setSinceId"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sinceId" type="long"/>
      <doc>
      <![CDATA[returns tweets with status ids greater than the given id.
 @param sinceId returns tweets with status ids greater than the given id]]>
      </doc>
    </method>
    <method name="sinceId" return="twitter4j.Query"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sinceId" type="long"/>
      <doc>
      <![CDATA[returns tweets with status ids greater than the given id.
 @param sinceId returns tweets with status ids greater than the given id
 @return the instance
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="getGeocode" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setGeoCode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="location" type="twitter4j.GeoLocation"/>
      <param name="radius" type="double"/>
      <param name="unit" type="java.lang.String"/>
      <doc>
      <![CDATA[returns tweets by users located within a given radius of the given latitude/longitude, where the user's location is taken from their Twitter profile
 @param location geo location
 @param radius radius
 @param unit Query.MILES or Query.KILOMETERS]]>
      </doc>
    </method>
    <method name="geoCode" return="twitter4j.Query"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="location" type="twitter4j.GeoLocation"/>
      <param name="radius" type="double"/>
      <param name="unit" type="java.lang.String"/>
      <doc>
      <![CDATA[returns tweets by users located within a given radius of the given latitude/longitude, where the user's location is taken from their Twitter profile
 @param location geo location
 @param radius radius
 @param unit Query.MILES or Query.KILOMETERS
 @return the instance
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="asPostParameters" return="twitter4j.http.HttpParameter[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="MILES" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="KILOMETERS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[A data class represents search query.
 @see <a href="http://apiwiki.twitter.com/Search-API-Documentation">Twitter API / Search API Documentation</a>
 @see <a href="http://search.twitter.com/operators">Twitter API / Search Operators</a>
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.Query -->
  <!-- start interface twitter4j.QueryResult -->
  <interface name="QueryResult"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <method name="getSinceId" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMaxId" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRefreshUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getResultsPerPage" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getWarning" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getCompletedIn" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPage" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getQuery" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTweets" return="java.util.List&lt;twitter4j.Tweet&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A data interface representing search API response
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.QueryResult -->
  <!-- start interface twitter4j.RateLimitStatus -->
  <interface name="RateLimitStatus"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <method name="getRemainingHits" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the remaining number of API requests available.<br>
 This value is identical to the &quot;X-RateLimit-Remaining&quot; response header.

 @return the remaining number of API requests available]]>
      </doc>
    </method>
    <method name="getHourlyLimit" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the current limit in effect<br>
 This value is identical to the &quot;X-RateLimit-Limit&quot; response header.

 @return the current limit in effect]]>
      </doc>
    </method>
    <method name="getResetTimeInSeconds" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the seconds the current rate limiting period ends.<br>
 This should be a same as getResetTime().getTime()/1000.

 @return the seconds the current rate limiting period ends
 @since Twitter4J 2.0.9]]>
      </doc>
    </method>
    <method name="getSecondsUntilReset" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the amount of seconds until the current rate limiting period ends.<br>
 This is a value provided/calculated only by Twitter4J for handiness and not a part of the twitter API spec.

 @return the amount of seconds until next rate limiting period
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="getResetTime" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the time the current rate limiting period ends.<br>
 This value is a java.util.Date-typed variation of the &quot;X-RateLimit-Reset&quot; response header.

 @return the time the current rate limiting period ends
 @since Twitter4J 2.0.9]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A data interface representing Twitter REST API's rate limit status

 @author Yusuke Yamamoto - yusuke at mac.com
 @see <a href="http://apiwiki.twitter.com/Rate-limiting">Twitter API Wiki / Rate limiting</a>]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.RateLimitStatus -->
  <!-- start class twitter4j.RateLimitStatusEvent -->
  <class name="RateLimitStatusEvent" extends="java.util.EventObject"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getRateLimitStatus" return="twitter4j.RateLimitStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isAccountRateLimitStatus" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isIPRateLimitStatus" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A data interface representing Twitter REST API's rate limit status

 @author Yusuke Yamamoto - yusuke at mac.com
 @see <a href="http://apiwiki.twitter.com/Rate-limiting">Twitter API Wiki / Rate limiting</a>]]>
    </doc>
  </class>
  <!-- end class twitter4j.RateLimitStatusEvent -->
  <!-- start interface twitter4j.RateLimitStatusListener -->
  <interface name="RateLimitStatusListener"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="onRateLimitStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="event" type="twitter4j.RateLimitStatusEvent"/>
      <doc>
      <![CDATA[Called when the response contains rate limit status.
 @param event rate limit status event.]]>
      </doc>
    </method>
    <method name="onRateLimitReached"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="event" type="twitter4j.RateLimitStatusEvent"/>
      <doc>
      <![CDATA[Called when the account or IP address is hitting the rate limit.<br>
 onRateLimitStatus will be also called before this event.
 @param event rate limit status event.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Andrew Hedges - andrew.hedges at gmail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.RateLimitStatusListener -->
  <!-- start interface twitter4j.Relationship -->
  <interface name="Relationship"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="twitter4j.TwitterResponse"/>
    <implements name="java.io.Serializable"/>
    <method name="getSourceUserId" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the source user id

 @return the source user id]]>
      </doc>
    </method>
    <method name="getTargetUserId" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the target user id

 @return target user id]]>
      </doc>
    </method>
    <method name="isSourceBlockingTarget" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns if the source user is blocking the target user

 @return if the source is blocking the target]]>
      </doc>
    </method>
    <method name="getSourceUserScreenName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the source user screen name

 @return returns the source user screen name]]>
      </doc>
    </method>
    <method name="getTargetUserScreenName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the target user screen name

 @return the target user screen name]]>
      </doc>
    </method>
    <method name="isSourceFollowingTarget" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Checks if source user is following target user

 @return true if source user is following target user]]>
      </doc>
    </method>
    <method name="isTargetFollowingSource" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Checks if target user is following source user.<br>
 This method is equivalent to isSourceFollowedByTarget().

 @return true if target user is following source user]]>
      </doc>
    </method>
    <method name="isSourceFollowedByTarget" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Checks if source user is being followed by target user

 @return true if source user is being followed by target user]]>
      </doc>
    </method>
    <method name="isTargetFollowedBySource" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Checks if target user is being followed by source user.<br>
 This method is equivalent to isSourceFollowingTarget().

 @return true if target user is being followed by source user]]>
      </doc>
    </method>
    <method name="isSourceNotificationsEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Checks if the source user has enabled notifications for updates of the target user

 @return true if source user enabled notifications for target user]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A data interface that has detailed information about a relationship between two users
 @author Perry Sakkaris - psakkaris at gmail.com
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships-show">REST API DOCUMENTATION</a>
 @since Twitter4J 2.1.0]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.Relationship -->
  <!-- start class twitter4j.ResponseList -->
  <class name="ResponseList" extends="java.util.ArrayList&lt;T&gt;"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="twitter4j.TwitterResponse"/>
    <method name="getRateLimitStatus" return="twitter4j.RateLimitStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <doc>
    <![CDATA[List of TwitterResponse.

 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.ResponseList -->
  <!-- start interface twitter4j.SavedSearch -->
  <interface name="SavedSearch"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="twitter4j.TwitterResponse"/>
    <implements name="java.io.Serializable"/>
    <method name="getCreatedAt" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getQuery" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPosition" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getId" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A data interface representing a Saved Search

 @author Yusuke Yamamoto - yusuke at mac.com
 @since Twitter4J 2.0.8]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.SavedSearch -->
  <!-- start interface twitter4j.Status -->
  <interface name="Status"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="twitter4j.TwitterResponse"/>
    <implements name="java.io.Serializable"/>
    <method name="getCreatedAt" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the created_at

 @return created_at
 @since Twitter4J 1.1.0]]>
      </doc>
    </method>
    <method name="getId" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the id of the status

 @return the id]]>
      </doc>
    </method>
    <method name="getText" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the text of the status

 @return the text]]>
      </doc>
    </method>
    <method name="getSource" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the source

 @return the source
 @since Twitter4J 1.0.4]]>
      </doc>
    </method>
    <method name="isTruncated" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Test if the status is truncated

 @return true if truncated
 @since Twitter4J 1.0.4]]>
      </doc>
    </method>
    <method name="getInReplyToStatusId" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the in_reply_tostatus_id

 @return the in_reply_tostatus_id
 @since Twitter4J 1.0.4]]>
      </doc>
    </method>
    <method name="getInReplyToUserId" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the in_reply_user_id

 @return the in_reply_tostatus_id
 @since Twitter4J 1.0.4]]>
      </doc>
    </method>
    <method name="getInReplyToScreenName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the in_reply_to_screen_name

 @return the in_in_reply_to_screen_name
 @since Twitter4J 2.0.4]]>
      </doc>
    </method>
    <method name="getGeoLocation" return="twitter4j.GeoLocation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns The location that this tweet refers to if available.

 @return returns The location that this tweet refers to if available (can be null)
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="isFavorited" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Test if the status is favorited

 @return true if favorited
 @since Twitter4J 1.0.4]]>
      </doc>
    </method>
    <method name="getUser" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the user

 @return the user]]>
      </doc>
    </method>
    <method name="isRetweet" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getRetweetedStatus" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A data interface representing one single status of a user.

 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.Status -->
  <!-- start class twitter4j.StatusDeletionNotice -->
  <class name="StatusDeletionNotice" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <method name="getStatusId" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getUserId" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A data class representing Status deletionNotice<br>
 Clients are urged to honor deletionNotice requests and discard deleted statuses immediately. At times, status deletionNotice messages may arrive before the status. Even in this case, the late arriving status should be deleted from your backing store.
 @author Yusuke Yamamoto - yusuke at mac.com
 @since Twitter4J 2.1.0]]>
    </doc>
  </class>
  <!-- end class twitter4j.StatusDeletionNotice -->
  <!-- start interface twitter4j.StatusListener -->
  <interface name="StatusListener"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="onStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="twitter4j.Status"/>
    </method>
    <method name="onDeletionNotice"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusDeletionNotice" type="twitter4j.StatusDeletionNotice"/>
      <doc>
      <![CDATA[Called upon deletionNotice notices. Clients are urged to honor deletionNotice requests and discard deleted statuses immediately. At times, status deletionNotice messages may arrive before the status. Even in this case, the late arriving status should be deleted from your backing store.
 @since Twitter4J 2.1.0
 @param statusDeletionNotice the deletionNotice notice
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#ParsingResponses">Streaming API Documentation - Parsing Responses</a>]]>
      </doc>
    </method>
    <method name="onTrackLimitationNotice"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="numberOfLimitedStatuses" type="int"/>
      <doc>
      <![CDATA[This notice will be sent each time a limited stream becomes unlimited.<br>
 If this number is high and or rapidly increasing, it is an indication that your predicate is too broad, and you should consider a predicate with higher selectivity.
 @param numberOfLimitedStatuses an enumeration of statuses that matched the track predicate but were administratively limited.
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#TrackLimiting">Streaming API Documentation - Track Limiting</a>
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#ParsingResponses">- Parsing Responses</a>
 @see <a href="http://groups.google.co.jp/group/twitter-development-talk/browse_thread/thread/15d0504b3dd7b939">Twitter Development Talk - Track API Limit message meaning</a>]]>
      </doc>
    </method>
    <method name="onException"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ex" type="java.lang.Exception"/>
    </method>
    <doc>
    <![CDATA[@author Yusuke Yamamoto - yusuke at mac.com
 @since Twitter4J 2.0.4]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.StatusListener -->
  <!-- start class twitter4j.StatusStream -->
  <class name="StatusStream" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="next"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="twitter4j.StatusListener"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[@author Yusuke Yamamoto - yusuke at mac.com
 @since Twitter4J 2.0.4]]>
    </doc>
  </class>
  <!-- end class twitter4j.StatusStream -->
  <!-- start class twitter4j.TimeSpanUtil -->
  <class name="TimeSpanUtil" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="toTimeSpanString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="date" type="java.util.Date"/>
    </method>
    <method name="toTimeSpanString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="milliseconds" type="long"/>
    </method>
    <method name="toTimeSpanString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="deltaInSeconds" type="int"/>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com
 @since Twitter4J 2.1.0]]>
    </doc>
  </class>
  <!-- end class twitter4j.TimeSpanUtil -->
  <!-- start interface twitter4j.Trend -->
  <interface name="Trend"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getQuery" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A data interface representing Trend.

 @author Yusuke Yamamoto - yusuke at mac.com
 @since Twitter4J 2.0.2]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.Trend -->
  <!-- start interface twitter4j.Trends -->
  <interface name="Trends"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Comparable&lt;twitter4j.Trends&gt;"/>
    <implements name="java.io.Serializable"/>
    <method name="getTrends" return="twitter4j.Trend[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAsOf" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTrendAt" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A data class representing Trends.

 @author Yusuke Yamamoto - yusuke at mac.com
 @since Twitter4J 2.0.2]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.Trends -->
  <!-- start interface twitter4j.Tweet -->
  <interface name="Tweet"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <method name="getText" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[returns the text

 @return the text]]>
      </doc>
    </method>
    <method name="getToUserId" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[returns the to_user_id

 @return the to_user_id value or -1 if to_user_id is not specified by the tweet]]>
      </doc>
    </method>
    <method name="getToUser" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[returns the to_user

 @return the to_user value or null if to_user is not specified by the tweet]]>
      </doc>
    </method>
    <method name="getFromUser" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[returns the from_user

 @return the from_user]]>
      </doc>
    </method>
    <method name="getId" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[returns the status id of the tweet

 @return the status id]]>
      </doc>
    </method>
    <method name="getFromUserId" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[returns the user id of the tweet's owner.<br>
 <font color="orange">Warning:</font> The user ids in the Search API are different from those in the REST API (about the two APIs). This defect is being tracked by Issue 214. This means that the to_user_id and from_user_id field vary from the actualy user id on Twitter.com. Applications will have to perform a screen name-based lookup with the users/show method to get the correct user id if necessary.

 @return the user id of the tweet's owner
 @see <a href="http://code.google.com/p/twitter-api/issues/detail?id=214">Issue 214:	Search API "from_user_id" doesn't match up with the proper Twitter "user_id"</a>]]>
      </doc>
    </method>
    <method name="getIsoLanguageCode" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[returns the iso language code of the tweet

 @return the iso language code of the tweet or null if iso_language_code is not specified by the tweet]]>
      </doc>
    </method>
    <method name="getSource" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[returns the source of the tweet

 @return the source of the tweet]]>
      </doc>
    </method>
    <method name="getProfileImageUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[returns the profile_image_url

 @return the profile_image_url]]>
      </doc>
    </method>
    <method name="getCreatedAt" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[returns the created_at

 @return the created_at]]>
      </doc>
    </method>
    <method name="getGeoLocation" return="twitter4j.GeoLocation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns The location that this tweet refers to if available.

 @return returns The location that this tweet refers to if available (can be null)
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A data class representing a Tweet in the search response

 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.Tweet -->
  <!-- start class twitter4j.Twitter -->
  <class name="Twitter" extends="twitter4j.TwitterOAuthSupportBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <implements name="twitter4j.api.SearchMethods"/>
    <implements name="twitter4j.api.TimelineMethods"/>
    <implements name="twitter4j.api.StatusMethods"/>
    <implements name="twitter4j.api.UserMethods"/>
    <implements name="twitter4j.api.ListMethods"/>
    <implements name="twitter4j.api.ListMembersMethods"/>
    <implements name="twitter4j.api.ListSubscribersMethods"/>
    <implements name="twitter4j.api.DirectMessageMethods"/>
    <implements name="twitter4j.api.FriendshipMethods"/>
    <implements name="twitter4j.api.SocialGraphMethods"/>
    <implements name="twitter4j.api.AccountMethods"/>
    <implements name="twitter4j.api.FavoriteMethods"/>
    <implements name="twitter4j.api.NotificationMethods"/>
    <implements name="twitter4j.api.BlockMethods"/>
    <implements name="twitter4j.api.SpamReportingMethods"/>
    <implements name="twitter4j.api.SavedSearchesMethods"/>
    <implements name="twitter4j.api.LocalTrendsMethods"/>
    <implements name="twitter4j.api.HelpMethods"/>
    <constructor name="Twitter"
      static="false" final="false" visibility="public"
      deprecated="use TwitterFactory.getInstance() instead">
      <doc>
      <![CDATA[Creates an unauthenticated Twitter instance
 @deprecated use TwitterFactory.getInstance() instead]]>
      </doc>
    </constructor>
    <constructor name="Twitter" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="use TwitterFactory.getBasicAuthenticatedInstance(screenName, password) instead">
      <doc>
      <![CDATA[Creates a Twitter instance with supplied id

 @param screenName the screen name of the user
 @param password   the password of the user
 @deprecated use TwitterFactory.getBasicAuthenticatedInstance(screenName, password) instead]]>
      </doc>
    </constructor>
    <method name="getScreenName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <exception name="IllegalStateException" type="java.lang.IllegalStateException"/>
      <doc>
      <![CDATA[Returns authenticating user's screen name.<br>
 This method automatically retrieves userId using verifyCredentials if the instance is using OAuth based authentication.

 @return the authenticating screen name
 @throws TwitterException      when verifyCredentials threw an exception.
 @throws IllegalStateException if no credentials are supplied]]>
      </doc>
    </method>
    <method name="search" return="twitter4j.QueryResult"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="query" type="twitter4j.Query"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getTrends" return="twitter4j.Trends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getCurrentTrends" return="twitter4j.Trends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getCurrentTrends" return="twitter4j.Trends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="excludeHashTags" type="boolean"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getDailyTrends" return="java.util.List&lt;twitter4j.Trends&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getDailyTrends" return="java.util.List&lt;twitter4j.Trends&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="date" type="java.util.Date"/>
      <param name="excludeHashTags" type="boolean"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getWeeklyTrends" return="java.util.List&lt;twitter4j.Trends&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getWeeklyTrends" return="java.util.List&lt;twitter4j.Trends&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="date" type="java.util.Date"/>
      <param name="excludeHashTags" type="boolean"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getPublicTimeline" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getHomeTimeline" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getHomeTimeline" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFriendsTimeline" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFriendsTimeline" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getUserTimeline" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getUserTimeline" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getUserTimeline" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getUserTimeline" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user_id" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getUserTimeline" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getUserTimeline" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getMentions" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getMentions" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getRetweetedByMe" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getRetweetedByMe" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getRetweetedToMe" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getRetweetedToMe" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getRetweetsOfMe" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getRetweetsOfMe" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="showStatus" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="updateStatus" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="updateStatus" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="java.lang.String"/>
      <param name="location" type="twitter4j.GeoLocation"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="updateStatus" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="java.lang.String"/>
      <param name="inReplyToStatusId" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="updateStatus" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="java.lang.String"/>
      <param name="inReplyToStatusId" type="long"/>
      <param name="location" type="twitter4j.GeoLocation"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="destroyStatus" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusId" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="retweetStatus" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusId" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getRetweets" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusId" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="showUser" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="showUser" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="searchUsers" return="twitter4j.ResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="query" type="java.lang.String"/>
      <param name="page" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFriendsStatuses" return="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFriendsStatuses" return="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFriendsStatuses" return="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFriendsStatuses" return="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFriendsStatuses" return="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFriendsStatuses" return="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFollowersStatuses" return="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFollowersStatuses" return="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFollowersStatuses" return="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFollowersStatuses" return="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFollowersStatuses" return="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFollowersStatuses" return="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="createUserList" return="twitter4j.UserList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listName" type="java.lang.String"/>
      <param name="isPublicList" type="boolean"/>
      <param name="description" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="updateUserList" return="twitter4j.UserList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listId" type="int"/>
      <param name="newListName" type="java.lang.String"/>
      <param name="isPublicList" type="boolean"/>
      <param name="newDescription" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getUserLists" return="twitter4j.PagableResponseList&lt;twitter4j.UserList&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOwnerScreenName" type="java.lang.String"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="showUserList" return="twitter4j.UserList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOwnerScreenName" type="java.lang.String"/>
      <param name="id" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="destroyUserList" return="twitter4j.UserList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getUserListStatuses" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOwnerScreenName" type="java.lang.String"/>
      <param name="id" type="int"/>
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getUserListMemberships" return="twitter4j.PagableResponseList&lt;twitter4j.UserList&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOwnerScreenName" type="java.lang.String"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getUserListSubscriptions" return="twitter4j.PagableResponseList&lt;twitter4j.UserList&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOwnerScreenName" type="java.lang.String"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getUserListMembers" return="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOwnerScreenName" type="java.lang.String"/>
      <param name="listId" type="int"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="addUserListMember" return="twitter4j.UserList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listId" type="int"/>
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="deleteUserListMember" return="twitter4j.UserList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listId" type="int"/>
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="checkUserListMembership" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOwnerScreenName" type="java.lang.String"/>
      <param name="listId" type="int"/>
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getUserListSubscribers" return="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOwnerScreenName" type="java.lang.String"/>
      <param name="listId" type="int"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="subscribeUserList" return="twitter4j.UserList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOwnerScreenName" type="java.lang.String"/>
      <param name="listId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="unsubscribeUserList" return="twitter4j.UserList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOwnerScreenName" type="java.lang.String"/>
      <param name="listId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="checkUserListSubscription" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOwnerScreenName" type="java.lang.String"/>
      <param name="listId" type="int"/>
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getDirectMessages" return="twitter4j.ResponseList&lt;twitter4j.DirectMessage&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getDirectMessages" return="twitter4j.ResponseList&lt;twitter4j.DirectMessage&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getSentDirectMessages" return="twitter4j.ResponseList&lt;twitter4j.DirectMessage&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getSentDirectMessages" return="twitter4j.ResponseList&lt;twitter4j.DirectMessage&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="sendDirectMessage" return="twitter4j.DirectMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="text" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="sendDirectMessage" return="twitter4j.DirectMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="text" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="destroyDirectMessage" return="twitter4j.DirectMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="createFriendship" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="createFriendship" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="createFriendship" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="follow" type="boolean"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="createFriendship" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="follow" type="boolean"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="destroyFriendship" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="destroyFriendship" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="existsFriendship" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userA" type="java.lang.String"/>
      <param name="userB" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="showFriendship" return="twitter4j.Relationship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceScreenName" type="java.lang.String"/>
      <param name="targetScreenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="showFriendship" return="twitter4j.Relationship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceId" type="int"/>
      <param name="targetId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFriendsIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFriendsIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFriendsIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFriendsIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFriendsIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFriendsIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFollowersIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFollowersIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFollowersIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFollowersIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFollowersIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFollowersIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="verifyCredentials" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="updateProfile" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="email" type="java.lang.String"/>
      <param name="url" type="java.lang.String"/>
      <param name="location" type="java.lang.String"/>
      <param name="description" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getRateLimitStatus" return="twitter4j.RateLimitStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="updateDeliveryDevice" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="device" type="twitter4j.Device"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="updateProfileColors" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="profileBackgroundColor" type="java.lang.String"/>
      <param name="profileTextColor" type="java.lang.String"/>
      <param name="profileLinkColor" type="java.lang.String"/>
      <param name="profileSidebarFillColor" type="java.lang.String"/>
      <param name="profileSidebarBorderColor" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="updateProfileImage" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="image" type="java.io.File"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="updateProfileBackgroundImage" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="image" type="java.io.File"/>
      <param name="tile" type="boolean"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFavorites" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFavorites" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="page" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFavorites" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getFavorites" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="page" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="createFavorite" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="destroyFavorite" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="enableNotification" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="enableNotification" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="disableNotification" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="disableNotification" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="createBlock" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="createBlock" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="destroyBlock" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screen_name" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="destroyBlock" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="existsBlock" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="existsBlock" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getBlockingUsers" return="twitter4j.ResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getBlockingUsers" return="twitter4j.ResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="page" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getBlockingUsersIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="reportSpam" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="reportSpam" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getSavedSearches" return="java.util.List&lt;twitter4j.SavedSearch&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="showSavedSearch" return="twitter4j.SavedSearch"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="createSavedSearch" return="twitter4j.SavedSearch"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="query" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="destroySavedSearch" return="twitter4j.SavedSearch"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="test" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="setOAuthConsumer"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="consumerKey" type="java.lang.String"/>
      <param name="consumerSecret" type="java.lang.String"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getOAuthRequestToken" return="twitter4j.http.RequestToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[@throws IllegalStateException when AccessToken has already been retrieved or set]]>
      </doc>
    </method>
    <method name="getOAuthRequestToken" return="twitter4j.http.RequestToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="callbackUrl" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getOAuthAccessToken" return="twitter4j.http.AccessToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getOAuthAccessToken" return="twitter4j.http.AccessToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="oauthVerifier" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getOAuthAccessToken" return="twitter4j.http.AccessToken"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestToken" type="twitter4j.http.RequestToken"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getOAuthAccessToken" return="twitter4j.http.AccessToken"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestToken" type="twitter4j.http.RequestToken"/>
      <param name="oauthVerifier" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="setOAuthAccessToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="accessToken" type="twitter4j.http.AccessToken"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getOAuthAccessToken" return="twitter4j.http.AccessToken"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="token" type="java.lang.String"/>
      <param name="tokenSecret" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
    </method>
    <method name="getOAuthAccessToken" return="twitter4j.http.AccessToken"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="token" type="java.lang.String"/>
      <param name="tokenSecret" type="java.lang.String"/>
      <param name="pin" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="setOAuthAccessToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use Twitter getInstance(AccessToken accessToken)">
      <param name="token" type="java.lang.String"/>
      <param name="tokenSecret" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the access token

 @param token access token
 @param tokenSecret access token secret
 @since Twitter 2.0.0
 @deprecated Use Twitter getInstance(AccessToken accessToken)
 @throws IllegalStateException when AccessToken has already been retrieved or set]]>
      </doc>
    </method>
    <method name="isOAuthEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[tests if the instance is authenticated by Basic
 @return returns true if the instance is authenticated by Basic]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="screenName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[A java representation of the <a href="http://apiwiki.twitter.com/">Twitter API</a>
 <br>This class is thread safe and can be cached/re-used and used concurrently.

 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.Twitter -->
  <!-- start class twitter4j.TwitterAdapter -->
  <class name="TwitterAdapter" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="twitter4j.TwitterListener"/>
    <constructor name="TwitterAdapter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="searched"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="result" type="twitter4j.QueryResult"/>
    </method>
    <method name="gotTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="trends" type="twitter4j.Trends"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.2]]>
      </doc>
    </method>
    <method name="gotCurrentTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="trends" type="twitter4j.Trends"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.2]]>
      </doc>
    </method>
    <method name="gotDailyTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="trendsList" type="java.util.List&lt;twitter4j.Trends&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.2]]>
      </doc>
    </method>
    <method name="gotWeeklyTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="trendsList" type="java.util.List&lt;twitter4j.Trends&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.2]]>
      </doc>
    </method>
    <method name="gotPublicTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="twitter4j.ResponseList&lt;twitter4j.Status&gt;"/>
    </method>
    <method name="gotHomeTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="twitter4j.ResponseList&lt;twitter4j.Status&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="gotFriendsTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="twitter4j.ResponseList&lt;twitter4j.Status&gt;"/>
    </method>
    <method name="gotUserTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="twitter4j.ResponseList&lt;twitter4j.Status&gt;"/>
    </method>
    <method name="gotMentions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="twitter4j.ResponseList&lt;twitter4j.Status&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="gotRetweetedByMe"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="twitter4j.ResponseList&lt;twitter4j.Status&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="gotRetweetedToMe"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="twitter4j.ResponseList&lt;twitter4j.Status&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="gotRetweetsOfMe"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="twitter4j.ResponseList&lt;twitter4j.Status&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="gotShowStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="twitter4j.Status"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="updatedStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="twitter4j.Status"/>
    </method>
    <method name="destroyedStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="destroyedStatus" type="twitter4j.Status"/>
    </method>
    <method name="retweetedStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="retweetedStatus" type="twitter4j.Status"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="gotRetweets"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="retweets" type="twitter4j.ResponseList&lt;twitter4j.Status&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="gotUserDetail"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
    </method>
    <method name="searchedUser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userList" type="twitter4j.ResponseList&lt;twitter4j.User&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="gotFriendsStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="users" type="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"/>
    </method>
    <method name="gotFollowersStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="users" type="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"/>
    </method>
    <method name="createdUserList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userList" type="twitter4j.UserList"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="updatedUserList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userList" type="twitter4j.UserList"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="gotUserLists"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userLists" type="twitter4j.PagableResponseList&lt;twitter4j.UserList&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="gotShowUserList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userList" type="twitter4j.UserList"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="deletedUserList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userList" type="twitter4j.UserList"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="gotUserListStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userLists" type="twitter4j.PagableResponseList&lt;twitter4j.UserList&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="gotUserListMemberships"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userLists" type="twitter4j.PagableResponseList&lt;twitter4j.UserList&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="gotUserListSubscriptions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userLists" type="twitter4j.PagableResponseList&lt;twitter4j.UserList&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="gotUserListMembers"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="users" type="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="addedUserListMember"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userList" type="twitter4j.UserList"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="deletedUserListMember"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userList" type="twitter4j.UserList"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="checkedUserListMembership"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="users" type="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="gotUserListSubscribers"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="users" type="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="subscribedUserList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userList" type="twitter4j.UserList"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="unsubscribedUserList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userList" type="twitter4j.UserList"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="checkedUserListSubscription"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="gotDirectMessages"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="messages" type="twitter4j.ResponseList&lt;twitter4j.DirectMessage&gt;"/>
    </method>
    <method name="gotSentDirectMessages"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="messages" type="twitter4j.ResponseList&lt;twitter4j.DirectMessage&gt;"/>
    </method>
    <method name="sentDirectMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="twitter4j.DirectMessage"/>
    </method>
    <method name="destroyedDirectMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="twitter4j.DirectMessage"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="createdFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="destroyedFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="gotExistsFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="exists" type="boolean"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="gotShowFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="relationship" type="twitter4j.Relationship"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="gotFriendsIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ids" type="twitter4j.IDs"/>
    </method>
    <method name="gotFollowersIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ids" type="twitter4j.IDs"/>
    </method>
    <method name="gotRateLimitStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="twitter4j.RateLimitStatus"/>
    </method>
    <method name="updatedDeliveryDevice"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
    </method>
    <method name="updatedProfileColors"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
    </method>
    <method name="updatedProfileImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="updatedProfileBackgroundImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="updatedProfile"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.2]]>
      </doc>
    </method>
    <method name="gotFavorites"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="twitter4j.ResponseList&lt;twitter4j.Status&gt;"/>
    </method>
    <method name="createdFavorite"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="twitter4j.Status"/>
    </method>
    <method name="destroyedFavorite"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="twitter4j.Status"/>
    </method>
    <method name="enabledNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="disabledNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="createdBlock"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="destroyedBlock"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="gotExistsBlock"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="blockExists" type="boolean"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.4]]>
      </doc>
    </method>
    <method name="gotBlockingUsers"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="blockingUsers" type="twitter4j.ResponseList&lt;twitter4j.User&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.4]]>
      </doc>
    </method>
    <method name="gotBlockingUsersIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="blockingUsersIDs" type="twitter4j.IDs"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.4]]>
      </doc>
    </method>
    <method name="reportedSpam"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reportedSpammer" type="twitter4j.User"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
    </method>
    <method name="tested"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="test" type="boolean"/>
    </method>
    <method name="onException"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ex" type="twitter4j.TwitterException"/>
      <param name="method" type="twitter4j.TwitterMethod"/>
      <doc>
      <![CDATA[@param ex TwitterException
 @param method]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A handy adapter of TwitterListener.
 @see twitter4j.AsyncTwitter
 @see twitter4j.TwitterListener
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.TwitterAdapter -->
  <!-- start class twitter4j.TwitterException -->
  <class name="TwitterException" extends="java.lang.Exception"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TwitterException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="TwitterException" type="java.lang.Exception"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="TwitterException" type="java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="TwitterException" type="java.lang.String, java.lang.Exception"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="TwitterException" type="java.lang.String, java.lang.Exception, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="createRateLimitedTwitterException" return="twitter4j.TwitterException"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
      <param name="statusCode" type="int"/>
      <param name="retryAfter" type="int"/>
    </method>
    <method name="getStatusCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRetryAfter" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns int value of "Retry-After" response header.
 An application that exceeds the rate limitations of the Search API will receive HTTP 503 response codes to requests.<br>
 It is a best practice to watch for this error condition and honor the Retry-After header that instructs the application when it is safe to continue. The Retry-After header's value is the number of seconds your application should wait before submitting another query.<br>
  (for example: Retry-After: 67).<br>
 Check if getStatusCode() == 503 before calling this method to ensure that you are actually exceeding rate limitation with query apis.<br>
 Otherwise, you'll get an IllegalStateException if "Retry-After" response header was not included in the response.<br>
 @return instructs the application when it is safe to continue in seconds
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Rate-limiting">Rate limiting</a>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[An exception class that will be thrown when TwitterAPI calls are failed.<br>
 In case the Twitter server returned HTTP error code, you can get the HTTP status code using getStatusCode() method.
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.TwitterException -->
  <!-- start class twitter4j.TwitterFactory -->
  <class name="TwitterFactory" extends="twitter4j.TwitterFactoryOAuthSupportBase&lt;twitter4j.Twitter&gt;"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <constructor name="TwitterFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a TwitterFactory with the root configuration.]]>
      </doc>
    </constructor>
    <constructor name="TwitterFactory" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a TwitterFactory with a specified config tree
 @param configTreePath the path]]>
      </doc>
    </constructor>
    <method name="getInstance" return="twitter4j.Twitter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="conf" type="twitter4j.conf.Configuration"/>
      <param name="auth" type="twitter4j.http.Authorization"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="getOAuthSupportInstance" return="twitter4j.Twitter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="conf" type="twitter4j.conf.Configuration"/>
      <param name="auth" type="twitter4j.http.Authorization"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A factory class for Twitter.
 <br>An instance of this class is completely thread safe and can be re-used and used concurrently.

 @author Yusuke Yamamoto - yusuke at mac.com
 @since Twitter4J 2.1.0]]>
    </doc>
  </class>
  <!-- end class twitter4j.TwitterFactory -->
  <!-- start interface twitter4j.TwitterListener -->
  <interface name="TwitterListener"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="searched"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="queryResult" type="twitter4j.QueryResult"/>
    </method>
    <method name="gotTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="trends" type="twitter4j.Trends"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.2]]>
      </doc>
    </method>
    <method name="gotCurrentTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="trends" type="twitter4j.Trends"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.2]]>
      </doc>
    </method>
    <method name="gotDailyTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="trendsList" type="java.util.List&lt;twitter4j.Trends&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.2]]>
      </doc>
    </method>
    <method name="gotWeeklyTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="trendsList" type="java.util.List&lt;twitter4j.Trends&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.2]]>
      </doc>
    </method>
    <method name="gotPublicTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="twitter4j.ResponseList&lt;twitter4j.Status&gt;"/>
    </method>
    <method name="gotHomeTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="twitter4j.ResponseList&lt;twitter4j.Status&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="gotFriendsTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="twitter4j.ResponseList&lt;twitter4j.Status&gt;"/>
    </method>
    <method name="gotUserTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="twitter4j.ResponseList&lt;twitter4j.Status&gt;"/>
    </method>
    <method name="gotMentions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="twitter4j.ResponseList&lt;twitter4j.Status&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="gotRetweetedByMe"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="twitter4j.ResponseList&lt;twitter4j.Status&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="gotRetweetedToMe"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="twitter4j.ResponseList&lt;twitter4j.Status&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="gotRetweetsOfMe"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="twitter4j.ResponseList&lt;twitter4j.Status&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="gotShowStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="twitter4j.Status"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="updatedStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="twitter4j.Status"/>
    </method>
    <method name="destroyedStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="destroyedStatus" type="twitter4j.Status"/>
    </method>
    <method name="retweetedStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="retweetedStatus" type="twitter4j.Status"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="gotRetweets"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="retweets" type="twitter4j.ResponseList&lt;twitter4j.Status&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="gotUserDetail"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
    </method>
    <method name="searchedUser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userList" type="twitter4j.ResponseList&lt;twitter4j.User&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="gotFriendsStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="users" type="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"/>
    </method>
    <method name="gotFollowersStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="users" type="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"/>
    </method>
    <method name="createdUserList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userList" type="twitter4j.UserList"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="updatedUserList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userList" type="twitter4j.UserList"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="gotUserLists"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userLists" type="twitter4j.PagableResponseList&lt;twitter4j.UserList&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="gotShowUserList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userList" type="twitter4j.UserList"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="deletedUserList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userList" type="twitter4j.UserList"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="gotUserListStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userLists" type="twitter4j.PagableResponseList&lt;twitter4j.UserList&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="gotUserListMemberships"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userLists" type="twitter4j.PagableResponseList&lt;twitter4j.UserList&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="gotUserListSubscriptions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userLists" type="twitter4j.PagableResponseList&lt;twitter4j.UserList&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="gotUserListMembers"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="users" type="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="addedUserListMember"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userList" type="twitter4j.UserList"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="deletedUserListMember"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userList" type="twitter4j.UserList"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="checkedUserListMembership"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="users" type="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="gotUserListSubscribers"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="users" type="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="subscribedUserList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userList" type="twitter4j.UserList"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="unsubscribedUserList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userList" type="twitter4j.UserList"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="checkedUserListSubscription"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="gotDirectMessages"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="messages" type="twitter4j.ResponseList&lt;twitter4j.DirectMessage&gt;"/>
    </method>
    <method name="gotSentDirectMessages"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="messages" type="twitter4j.ResponseList&lt;twitter4j.DirectMessage&gt;"/>
    </method>
    <method name="sentDirectMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="twitter4j.DirectMessage"/>
    </method>
    <method name="destroyedDirectMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="twitter4j.DirectMessage"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="createdFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="destroyedFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="gotExistsFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="exists" type="boolean"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="gotShowFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="relationship" type="twitter4j.Relationship"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="gotFriendsIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ids" type="twitter4j.IDs"/>
    </method>
    <method name="gotFollowersIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ids" type="twitter4j.IDs"/>
    </method>
    <method name="gotRateLimitStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rateLimitStatus" type="twitter4j.RateLimitStatus"/>
    </method>
    <method name="updatedDeliveryDevice"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
    </method>
    <method name="updatedProfileColors"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
    </method>
    <method name="updatedProfileImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="updatedProfileBackgroundImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="updatedProfile"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.2]]>
      </doc>
    </method>
    <method name="gotFavorites"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="twitter4j.ResponseList&lt;twitter4j.Status&gt;"/>
    </method>
    <method name="createdFavorite"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="twitter4j.Status"/>
    </method>
    <method name="destroyedFavorite"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="twitter4j.Status"/>
    </method>
    <method name="enabledNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="disabledNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="createdBlock"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="destroyedBlock"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="gotExistsBlock"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="blockExists" type="boolean"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.4]]>
      </doc>
    </method>
    <method name="gotBlockingUsers"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="blockingUsers" type="twitter4j.ResponseList&lt;twitter4j.User&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.4]]>
      </doc>
    </method>
    <method name="gotBlockingUsersIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="blockingUsersIDs" type="twitter4j.IDs"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.4]]>
      </doc>
    </method>
    <method name="reportedSpam"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reportedSpammer" type="twitter4j.User"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
    </method>
    <method name="tested"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="test" type="boolean"/>
    </method>
    <method name="onException"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="te" type="twitter4j.TwitterException"/>
      <param name="method" type="twitter4j.TwitterMethod"/>
      <doc>
      <![CDATA[@param te     TwitterException
 @param method]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A listner for receiving asynchronous responses from Twitter Async APIs.

 @see twitter4j.AsyncTwitter
 @see twitter4j.TwitterAdapter
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.TwitterListener -->
  <!-- start class twitter4j.TwitterMethod -->
  <class name="TwitterMethod" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="SEARCH" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="TRENDS" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="CURRENT_TRENDS" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DAILY_TRENDS" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="WEEKLY_TRENDS" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PUBLIC_TIMELINE" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="HOME_TIMELINE" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FRIENDS_TIMELINE" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="USER_TIMELINE" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="MENTIONS" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="RETWEETED_BY_ME" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="RETWEETED_TO_ME" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="RETWEETS_OF_ME" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="SHOW_STATUS" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UPDATE_STATUS" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DESTROY_STATUS" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="RETWEET_STATUS" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="RETWEETS" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="SHOW_USER" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="SEARCH_USERS" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FRIENDS_STATUSES" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FOLLOWERS_STATUSES" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="CREATE_USER_LIST" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UPDATE_USER_LIST" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="USER_LISTS" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="SHOW_USER_LIST" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DELETE_USER_LIST" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="USER_LIST_STATUSES" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="USER_LIST_MEMBERSHIPS" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="USER_LIST_SUBSCRIPTIONS" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="LIST_MEMBERS" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ADD_LIST_MEMBER" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DELETE_LIST_MEMBER" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="CHECK_LIST_MEMBERSHIP" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="LIST_SUBSCRIBERS" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="SUBSCRIBE_LIST" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UNSUBSCRIBE_LIST" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="CHECK_LIST_SUBSCRIPTION" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DIRECT_MESSAGES" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="SENT_DIRECT_MESSAGES" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="SEND_DIRECT_MESSAGE" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DESTROY_DIRECT_MESSAGES" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="CREATE_FRIENDSHIP" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DESTROY_FRIENDSHIP" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EXISTS_FRIENDSHIP" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="SHOW_FRIENDSHIP" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FRIENDS_IDS" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FOLLOWERS_IDS" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="RATE_LIMIT_STATUS" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UPDATE_DELIVERY_DEVICE" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UPDATE_PROFILE_COLORS" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UPDATE_PROFILE_IMAGE" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UPDATE_PROFILE_BACKGROUND_IMAGE" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UPDATE_PROFILE" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FAVORITES" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="CREATE_FAVORITE" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DESTROY_FAVORITE" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ENABLE_NOTIFICATION" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DISABLE_NOTIFICATION" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="CREATE_BLOCK" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DESTROY_BLOCK" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EXISTS_BLOCK" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BLOCKING_USERS" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BLOCKING_USERS_IDS" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="REPORT_SPAM" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="TEST" type="twitter4j.TwitterMethod"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.TwitterMethod -->
  <!-- start interface twitter4j.TwitterResponse -->
  <interface name="TwitterResponse"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <method name="getRateLimitStatus" return="twitter4j.RateLimitStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the current rate limit status if available.

 @return current rate limit status
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Super interface of Twitter Response data interfaces which indicates that rate limit status is avaialble.

 @see twitter4j.DirectMessage
 @see twitter4j.Status
 @see twitter4j.User
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.TwitterResponse -->
  <!-- start class twitter4j.TwitterStream -->
  <class name="TwitterStream" extends="twitter4j.TwitterBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <constructor name="TwitterStream"
      static="false" final="false" visibility="public"
      deprecated="use new TwitterStreamFactory.getInstance() instead.">
      <doc>
      <![CDATA[Constructs a TwitterStream instance. UserID and password should be provided by either twitter4j.properties or system property.
 since Twitter4J 2.0.10
 @deprecated use new TwitterStreamFactory.getInstance() instead.]]>
      </doc>
    </constructor>
    <constructor name="TwitterStream" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="use new TwitterStreamFactory.getInstance() instead.">
      <doc>
      <![CDATA[Constructs a TwitterStream instance. UserID and password should be provided by either twitter4j.properties or system property.
 since Twitter4J 2.0.10
 @param screenName screen name
 @param password password
 @deprecated use new TwitterStreamFactory.getInstance() instead.]]>
      </doc>
    </constructor>
    <constructor name="TwitterStream" type="java.lang.String, java.lang.String, twitter4j.StatusListener"
      static="false" final="false" visibility="public"
      deprecated="use new TwitterStreamFactory.getInstance() instead.">
      <doc>
      <![CDATA[Constructs a TwitterStream instance. UserID and password should be provided by either twitter4j.properties or system property.
 since Twitter4J 2.0.10
 @param screenName screen name
 @param password password
 @param listener listener
 @deprecated use new TwitterStreamFactory.getInstance() instead.]]>
      </doc>
    </constructor>
    <method name="firehose"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="count" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Starts listening on all public statuses. Available only to approved parties and requires a signed agreement to access. Please do not contact us about access to the firehose. If your service warrants access to it, we'll contact you.

 @param count Indicates the number of previous statuses to stream before transitioning to the live stream.
 @throws TwitterException when Twitter service or network is unavailable
 @see twitter4j.StatusStream
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#firehose">Twitter API Wiki / Streaming API Documentation - firehose</a>
 @since Twitter4J 2.0.4]]>
      </doc>
    </method>
    <method name="getFirehoseStream" return="twitter4j.StatusStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="count" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a status stream of all public statuses. Available only to approved parties and requires a signed agreement to access. Please do not contact us about access to the firehose. If your service warrants access to it, we'll contact you.

 @param count Indicates the number of previous statuses to stream before transitioning to the live stream.
 @return StatusStream
 @throws TwitterException when Twitter service or network is unavailable
 @see twitter4j.StatusStream
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#firehose">Twitter API Wiki / Streaming API Documentation - firehose</a>
 @since Twitter4J 2.0.4]]>
      </doc>
    </method>
    <method name="retweet"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Starts listening on all retweets. The retweet stream is not a generally available resource. Few applications require this level of access. Creative use of a combination of other resources and various access levels can satisfy nearly every application use case. As of 9/11/2009, the site-wide retweet feature has not yet launched, so there are currently few, if any, retweets on this stream.

 @throws TwitterException when Twitter service or network is unavailable
 @see twitter4j.StatusStream
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#retweet">Twitter API Wiki / Streaming API Documentation - retweet</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getRetweetStream" return="twitter4j.StatusStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a stream of all retweets. The retweet stream is not a generally available resource. Few applications require this level of access. Creative use of a combination of other resources and various access levels can satisfy nearly every application use case. As of 9/11/2009, the site-wide retweet feature has not yet launched, so there are currently few, if any, retweets on this stream.

 @return StatusStream
 @throws TwitterException when Twitter service or network is unavailable
 @see twitter4j.StatusStream
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#firehose">Twitter API Wiki / Streaming API Documentation - firehose</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="sample"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Starts listening on random sample of all public statuses. The default access level provides a small proportion of the Firehose. The "Gardenhose" access level provides a proportion more suitable for data mining and research applications that desire a larger proportion to be statistically significant sample.

 @throws TwitterException when Twitter service or network is unavailable
 @see twitter4j.StatusStream
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#sample">Twitter API Wiki / Streaming API Documentation - sample</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getSampleStream" return="twitter4j.StatusStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a stream of random sample of all public statuses. The default access level provides a small proportion of the Firehose. The "Gardenhose" access level provides a proportion more suitable for data mining and research applications that desire a larger proportion to be statistically significant sample.

 @return StatusStream
 @throws TwitterException when Twitter service or network is unavailable
 @see twitter4j.StatusStream
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#Sampling">Twitter API Wiki / Streaming API Documentation - Sampling</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="filter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="count" type="int"/>
      <param name="follow" type="int[]"/>
      <param name="track" type="java.lang.String[]"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[See birddog above. Allows following up to 200 users. Publicly available.

 @param count  Indicates the number of previous statuses to stream before transitioning to the live stream.
 @param follow Specifies the users, by ID, to receive public tweets from.
 @param track  Specifies keywords to track.
 @throws TwitterException when Twitter service or network is unavailable
 @see twitter4j.StatusStream
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#filter">Twitter API Wiki / Streaming API Documentation - filter</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getFilterStream" return="twitter4j.StatusStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="count" type="int"/>
      <param name="follow" type="int[]"/>
      <param name="track" type="java.lang.String[]"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns stream of public statuses that match one or more filter predicates. At least one predicate parameter, track or follow, must be specified. Both parameters may be specified which allows most clients to use a single connection to the Streaming API.

 @param follow Specifies the users, by ID, to receive public tweets from.
 @return StatusStream
 @throws TwitterException when Twitter service or network is unavailable
 @see twitter4j.StatusStream
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#filter">Twitter API Wiki / Streaming API Documentation - filter</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="cleanup"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setStatusListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusListener" type="twitter4j.StatusListener"/>
    </method>
    <doc>
    <![CDATA[A java reporesentation of the <a href="http://apiwiki.twitter.com/Streaming-API-Documentation">Twitter Streaming API</a><br>
 Note that this class is NOT compatible with Google App Engine as GAE is not capable of handling requests longer than 30 seconds.

 @author Yusuke Yamamoto - yusuke at mac.com
 @since Twitter4J 2.0.4]]>
    </doc>
  </class>
  <!-- end class twitter4j.TwitterStream -->
  <!-- start class twitter4j.TwitterStreamFactory -->
  <class name="TwitterStreamFactory" extends="twitter4j.TwitterFactoryBase&lt;twitter4j.TwitterStream&gt;"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TwitterStreamFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </constructor>
    <constructor name="TwitterStreamFactory" type="twitter4j.StatusListener"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </constructor>
    <constructor name="TwitterStreamFactory" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </constructor>
    <constructor name="TwitterStreamFactory" type="java.lang.String, twitter4j.StatusListener"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </constructor>
    <method name="getInstance" return="twitter4j.TwitterStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="conf" type="twitter4j.conf.Configuration"/>
      <param name="auth" type="twitter4j.http.Authorization"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A factory class for TwitterFactory.<br>
 An instance of this class is completely thread safe and can be re-used and used concurrently.<br>
 Note that TwitterStream is NOT compatible with Google App Engine as GAE is not capable of handling requests longer than 30 seconds.

 @author Yusuke Yamamoto - yusuke at mac.com
 @since Twitter4J 2.1.0]]>
    </doc>
  </class>
  <!-- end class twitter4j.TwitterStreamFactory -->
  <!-- start interface twitter4j.User -->
  <interface name="User"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="twitter4j.TwitterResponse"/>
    <implements name="java.io.Serializable"/>
    <method name="getId" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the id of the user

 @return the id of the user]]>
      </doc>
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the name of the user

 @return the name of the user]]>
      </doc>
    </method>
    <method name="getScreenName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the screen name of the user

 @return the screen name of the user]]>
      </doc>
    </method>
    <method name="getLocation" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the location of the user

 @return the location of the user]]>
      </doc>
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the description of the user

 @return the description of the user]]>
      </doc>
    </method>
    <method name="getProfileImageURL" return="java.net.URL"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the profile image url of the user

 @return the profile image url of the user]]>
      </doc>
    </method>
    <method name="getURL" return="java.net.URL"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the url of the user

 @return the url of the user]]>
      </doc>
    </method>
    <method name="isProtected" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Test if the user status is protected

 @return true if the user status is protected]]>
      </doc>
    </method>
    <method name="getFollowersCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of followers

 @return the number of followers
 @since Twitter4J 1.0.4]]>
      </doc>
    </method>
    <method name="getStatusCreatedAt" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return created_at or null if the user is protected
 @since Twitter4J 1.1.0]]>
      </doc>
    </method>
    <method name="getStatusId" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return status id or -1 if the user is protected]]>
      </doc>
    </method>
    <method name="getStatusText" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return status text or null if the user is protected]]>
      </doc>
    </method>
    <method name="getStatusSource" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return source or null if the user is protected
 @since 1.1.4]]>
      </doc>
    </method>
    <method name="isStatusTruncated" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return truncated or false if the user is protected
 @since 1.1.4]]>
      </doc>
    </method>
    <method name="getStatusInReplyToStatusId" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return in_reply_to_status_id or -1 if the user is protected
 @since 1.1.4]]>
      </doc>
    </method>
    <method name="getStatusInReplyToUserId" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return in_reply_to_user_id or -1 if the user is protected
 @since 1.1.4]]>
      </doc>
    </method>
    <method name="isStatusFavorited" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return favorited or false if the user is protected
 @since 1.1.4]]>
      </doc>
    </method>
    <method name="getStatusInReplyToScreenName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return in_reply_to_screen_name or null if the user is protected
 @since 1.1.4]]>
      </doc>
    </method>
    <method name="getProfileBackgroundColor" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getProfileTextColor" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getProfileLinkColor" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getProfileSidebarFillColor" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getProfileSidebarBorderColor" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFriendsCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getCreatedAt" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFavouritesCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getUtcOffset" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTimeZone" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getProfileBackgroundImageUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isProfileBackgroundTiled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getStatusesCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isGeoEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the user is enabling geo location
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="isVerified" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return returns true if the user is a verified celebrity
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A data interface representing Basic user information element

 @author Yusuke Yamamoto - yusuke at mac.com
 @see <a href="http://apiwiki.twitter.com/REST+API+Documentation#Basicuserinformationelement">REST API Documentation - Basic user information element</a>]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.User -->
  <!-- start interface twitter4j.UserList -->
  <interface name="UserList"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="twitter4j.TwitterResponse"/>
    <implements name="java.io.Serializable"/>
    <method name="getId" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the id of the list

 @return the id of the list]]>
      </doc>
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the name of the list

 @return the name of the list]]>
      </doc>
    </method>
    <method name="getFullName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the full name of the list

 @return the full name of the list]]>
      </doc>
    </method>
    <method name="getSlug" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the slug of the list

 @return the slug of the list]]>
      </doc>
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the description of the list

 @return the description of the list]]>
      </doc>
    </method>
    <method name="getSubscriberCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the subscriber count of the list

 @return the subscriber count of the list]]>
      </doc>
    </method>
    <method name="getMemberCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the member count of the list

 @return the member count of the list]]>
      </doc>
    </method>
    <method name="getURI" return="java.net.URI"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the uri of the list

 @return the uri of the list]]>
      </doc>
    </method>
    <method name="isPublic" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[tests if the list is public

 @return if the list is public]]>
      </doc>
    </method>
    <method name="getUser" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the user of the list

 @return the user of the list]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A data interface representing Basic list information element

 @author Dan Checkoway - dcheckoway at gmail.com
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-id">REST API Documentation - Basic list information element</a>]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.UserList -->
  <!-- start class twitter4j.Version -->
  <class name="Version" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Version"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getVersion" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
    </method>
    <doc>
    <![CDATA[@author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.Version -->
</package>
<package name="twitter4j.api">
  <!-- start interface twitter4j.api.AccountMethods -->
  <interface name="AccountMethods"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="verifyCredentials" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful; returns a 401 status code and an error message if not.  Use this method to test if supplied user credentials are valid.
 <br>This method calls http://api.twitter.com/1/account/verify_credentials.json

 @return user
 @since Twitter4J 2.0.0
 @throws twitter4j.TwitterException when Twitter service or network is unavailable, or if supplied credential is wrong (TwitterException.getStatusCode() == 401)
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0verify_credentials">Twitter API Wiki / Twitter REST API Method: account verify_credentials</a>]]>
      </doc>
    </method>
    <method name="getRateLimitStatus" return="twitter4j.RateLimitStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the remaining number of API requests available to the requesting user before the API limit is reached for the current hour. Calls to rate_limit_status do not count against the rate limit.  If authentication credentials are provided, the rate limit status for the authenticating user is returned.  Otherwise, the rate limit status for the requester's IP address is returned.<br>
 <br>This method calls http://api.twitter.com/1/account/rate_limit_status.json

 @return the rate limit status
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 1.1.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0rate_limit_status">Twitter API Wiki / Twitter REST API Method: account rate_limit_status</a>]]>
      </doc>
    </method>
    <method name="updateDeliveryDevice" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="device" type="twitter4j.Device"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Sets which device Twitter delivers updates to for the authenticating user.  Sending none as the device parameter will disable IM or SMS updates.
 <br>This method calls http://api.twitter.com/1/account/update_delivery_device.json

 @param device new Delivery device. Must be one of: IM, SMS, NONE.
 @return the updated user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 1.0.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0update_delivery_device">Twitter API Wiki / Twitter REST API Method: account update_delivery_device</a>]]>
      </doc>
    </method>
    <method name="updateProfileColors" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="profileBackgroundColor" type="java.lang.String"/>
      <param name="profileTextColor" type="java.lang.String"/>
      <param name="profileLinkColor" type="java.lang.String"/>
      <param name="profileSidebarFillColor" type="java.lang.String"/>
      <param name="profileSidebarBorderColor" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Sets one or more hex values that control the color scheme of the authenticating user's profile page on twitter.com.  These values are also returned in the getUserDetail() method.
 <br>This method calls http://api.twitter.com/1/account/update_profile_colors.json
 @param profileBackgroundColor optional, can be null
 @param profileTextColor optional, can be null
 @param profileLinkColor optional, can be null
 @param profileSidebarFillColor optional, can be null
 @param profileSidebarBorderColor optional, can be null
 @return the updated user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0update_profile_colors">Twitter API Wiki / Twitter REST API Method: account update_profile_colors</a>]]>
      </doc>
    </method>
    <method name="updateProfileImage" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="image" type="java.io.File"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Updates the authenticating user's profile image.
 <br>This method calls http://api.twitter.com/1/account/update_profile_image.json
 @param image Must be a valid GIF, JPG, or PNG image of less than 700 kilobytes in size.  Images with width larger than 500 pixels will be scaled down.
 @return the updated user
 @throws TwitterException when Twitter service or network is unavailable,
  or when the specified file is not found (FileNotFoundException will be nested),
  or when the specified file object in not representing a file (IOException will be nested)
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0update_profile_image">Twitter API Wiki / Twitter REST API Method: account update_profile_image</a>]]>
      </doc>
    </method>
    <method name="updateProfileBackgroundImage" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="image" type="java.io.File"/>
      <param name="tile" type="boolean"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Updates the authenticating user's profile background image.
 <br>This method calls http://api.twitter.com/1/account/update_profile_background_image.json
 @param image Must be a valid GIF, JPG, or PNG image of less than 800 kilobytes in size.  Images with width larger than 2048 pixels will be forceably scaled down.
 @param tile If set to true the background image will be displayed tiled. The image will not be tiled otherwise.
 @return the updated user
 @throws TwitterException when Twitter service or network is unavailable,
  or when the specified file is not found (FileNotFoundException will be nested),
  or when the specified file object in not representing a file (IOException will be nested)
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0update_profile_background_image">Twitter API Wiki / Twitter REST API Method: account update_profile_background_image</a>]]>
      </doc>
    </method>
    <method name="updateProfile" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="email" type="java.lang.String"/>
      <param name="url" type="java.lang.String"/>
      <param name="location" type="java.lang.String"/>
      <param name="description" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Sets values that users are able to set under the "Account" tab of their settings page. Only the parameters specified(non-null) will be updated.
 <br>This method calls http://api.twitter.com/1/account/update_profile.json

 @param name Optional. Maximum of 20 characters.
 @param email Optional. Maximum of 40 characters. Must be a valid email address.
 @param url Optional. Maximum of 100 characters. Will be prepended with "http://" if not present.
 @param location Optional. Maximum of 30 characters. The contents are not normalized or geocoded in any way.
 @param description Optional. Maximum of 160 characters.
 @return the updated user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.2
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0update_profile">Twitter REST API Documentation &gt; Account Methods &gt; account/update_location</a>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.AccountMethods -->
  <!-- start interface twitter4j.api.AccountMethodsAsync -->
  <interface name="AccountMethodsAsync"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getRateLimitStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the remaining number of API requests available to the requesting user before the API limit is reached for the current hour. Calls to rate_limit_status do not count against the rate limit.  If authentication credentials are provided, the rate limit status for the authenticating user is returned.  Otherwise, the rate limit status for the requester's IP address is returned.
 <br>This method calls http://api.twitter.com/1/account/rate_limit_status

 @since Twitter4J 1.1.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-account%C2%A0rate_limit_status">Twitter API Wiki / Twitter REST API Method: account rate_limit_status</a>]]>
      </doc>
    </method>
    <method name="updateDeliveryDevice"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="device" type="twitter4j.Device"/>
      <doc>
      <![CDATA[Sets which device Twitter delivers updates to for the authenticating user.  Sending none as the device parameter will disable IM or SMS updates.
 <br>This method calls http://api.twitter.com/1/account/update_delivery_device

 @param device   new Delivery device. Must be one of: IM, SMS, NONE.
 @since Twitter4J 1.0.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-account%C2%A0update_delivery_device">Twitter API Wiki / Twitter REST API Method: account update_delivery_device</a>]]>
      </doc>
    </method>
    <method name="updateProfileColors"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="profileBackgroundColor" type="java.lang.String"/>
      <param name="profileTextColor" type="java.lang.String"/>
      <param name="profileLinkColor" type="java.lang.String"/>
      <param name="profileSidebarFillColor" type="java.lang.String"/>
      <param name="profileSidebarBorderColor" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets one or more hex values that control the color scheme of the authenticating user's profile page on twitter.com.  These values are also returned in the getUserDetail() method.
 <br>This method calls http://api.twitter.com/1/account/update_profile_colors
 @param profileBackgroundColor optional, can be null
 @param profileTextColor optional, can be null
 @param profileLinkColor optional, can be null
 @param profileSidebarFillColor optional, can be null
 @param profileSidebarBorderColor optional, can be null
 @since Twitter4J 2.0.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-account%C2%A0update_profile_colors">Twitter API Wiki / Twitter REST API Method: account update_profile_colors</a>]]>
      </doc>
    </method>
    <method name="updateProfileImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="image" type="java.io.File"/>
      <doc>
      <![CDATA[Updates the authenticating user's profile image.
 <br>This method calls http://api.twitter.com/1/account/update_profile_image.json
 @param image Must be a valid GIF, JPG, or PNG image of less than 700 kilobytes in size.  Images with width larger than 500 pixels will be scaled down.
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0update_profile_image">Twitter API Wiki / Twitter REST API Method: account update_profile_image</a>]]>
      </doc>
    </method>
    <method name="updateProfileBackgroundImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="image" type="java.io.File"/>
      <param name="tile" type="boolean"/>
      <doc>
      <![CDATA[Updates the authenticating user's profile background image.
 <br>This method calls http://api.twitter.com/1/account/update_profile_background_image.json
 @param image Must be a valid GIF, JPG, or PNG image of less than 800 kilobytes in size.  Images with width larger than 2048 pixels will be forceably scaled down.
 @param tile If set to true the background image will be displayed tiled. The image will not be tiled otherwise.
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0update_profile_background_image">Twitter API Wiki / Twitter REST API Method: account update_profile_background_image</a>]]>
      </doc>
    </method>
    <method name="updateProfile"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="email" type="java.lang.String"/>
      <param name="url" type="java.lang.String"/>
      <param name="location" type="java.lang.String"/>
      <param name="description" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets values that users are able to set under the "Account" tab of their settings page. Only the parameters specified(non-null) will be updated.

 @param name        Optional. Maximum of 20 characters.
 @param email       Optional. Maximum of 40 characters. Must be a valid email address.
 @param url         Optional. Maximum of 100 characters. Will be prepended with "http://" if not present.
 @param location    Optional. Maximum of 30 characters. The contents are not normalized or geocoded in any way.
 @param description Optional. Maximum of 160 characters.
 @since Twitter4J 2.0.2]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.AccountMethodsAsync -->
  <!-- start interface twitter4j.api.BlockMethods -->
  <interface name="BlockMethods"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="createBlock" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Blocks the user specified in the ID parameter as the authenticating user.  Returns the blocked user in the requested format when successful.
 <br>This method calls http://api.twitter.com/1/blocks/create/[id].json

 @param screenName the screen_name of the user to block
 @return the blocked user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks%C2%A0create">Twitter API Wiki / Twitter REST API Method: blocks create</a>]]>
      </doc>
    </method>
    <method name="createBlock" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Blocks the user specified in the ID parameter as the authenticating user.  Returns the blocked user in the requested format when successful.
 <br>This method calls http://api.twitter.com/1/blocks/create/[id].json

 @param userId the ID of the user to block
 @return the blocked user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks%C2%A0create">Twitter API Wiki / Twitter REST API Method: blocks create</a>]]>
      </doc>
    </method>
    <method name="destroyBlock" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screen_name" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Un-blocks the user specified in the ID parameter as the authenticating user.  Returns the un-blocked user in the requested format when successful.
 <br>This method calls http://api.twitter.com/1/blocks/destroy/[id].json

 @param screen_name the screen_name of the user to block
 @return the unblocked user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: blocks destroy</a>]]>
      </doc>
    </method>
    <method name="destroyBlock" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Un-blocks the user specified in the ID parameter as the authenticating user.  Returns the un-blocked user in the requested format when successful.
 <br>This method calls http://api.twitter.com/1/blocks/destroy/[id].json

 @param userId the ID of the user to block
 @return the unblocked user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: blocks destroy</a>]]>
      </doc>
    </method>
    <method name="existsBlock" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Tests if a friendship exists between two users.
 <br>This method calls http://api.twitter.com/1/blocks/exists/[id].json

 @param screenName The screen_name of the potentially blocked user.
 @return  if the authenticating user is blocking a target user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks-exists">Twitter API Wiki / Twitter REST API Method: blocks exists</a>]]>
      </doc>
    </method>
    <method name="existsBlock" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Tests if a friendship exists between two users.
 <br>This method calls http://api.twitter.com/1/blocks/exists/[id].json

 @param userId The ID of the potentially blocked user.
 @return  if the authenticating user is blocking a target user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks-exists">Twitter API Wiki / Twitter REST API Method: blocks exists</a>]]>
      </doc>
    </method>
    <method name="getBlockingUsers" return="twitter4j.ResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a list of user objects that the authenticating user is blocking.
 <br>This method calls http://api.twitter.com/1/blocks/blocking.json

 @return a list of user objects that the authenticating user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks-blocking">Twitter API Wiki / Twitter REST API Method: blocks blocking</a>]]>
      </doc>
    </method>
    <method name="getBlockingUsers" return="twitter4j.ResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="page" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a list of user objects that the authenticating user is blocking.
 <br>This method calls http://api.twitter.com/1/blocks/blocking.json

 @param page the number of page
 @return a list of user objects that the authenticating user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks-blocking">Twitter API Wiki / Twitter REST API Method: blocks blocking</a>]]>
      </doc>
    </method>
    <method name="getBlockingUsersIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric user ids the authenticating user is blocking.
 <br>This method calls http://api.twitter.com/1/blocks/blocking/ids
 @return Returns an array of numeric user ids the authenticating user is blocking.
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks-blocking-ids">Twitter API Wiki / Twitter REST API Method: blocks blocking ids</a>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.BlockMethods -->
  <!-- start interface twitter4j.api.BlockMethodsAsync -->
  <interface name="BlockMethodsAsync"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="createBlock"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <doc>
      <![CDATA[Blocks the user specified in the ID parameter as the authenticating user.  Returns the blocked user in the requested format when successful.
 <br>This method calls http://api.twitter.com/1/blocks/create%C2%A0

 @param screenName the screen_name of the user to block
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-blocks%C2%A0create">Twitter API Wiki / Twitter REST API Method: blocks%C2%A0create</a>]]>
      </doc>
    </method>
    <method name="createBlockAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <doc>
      <![CDATA[Blocks the user specified in the ID parameter as the authenticating user.  Returns the blocked user in the requested format when successful.
 <br>This method calls http://api.twitter.com/1/blocks/create%C2%A0

 @param userId the screen_name of the user to block
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-blocks%C2%A0create">Twitter API Wiki / Twitter REST API Method: blocks%C2%A0create</a>]]>
      </doc>
    </method>
    <method name="destroyBlock"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <doc>
      <![CDATA[Un-blocks the user specified in the ID parameter as the authenticating user.  Returns the un-blocked user in the requested format when successful.
 <br>This method calls http://api.twitter.com/1/blocks/create%C2%A0

 @param screenName the screen_name of the user to block
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-blocks%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: blocks%C2%A0destroy</a>]]>
      </doc>
    </method>
    <method name="destroyBlock"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <doc>
      <![CDATA[Un-blocks the user specified in the ID parameter as the authenticating user.  Returns the un-blocked user in the requested format when successful.
 <br>This method calls http://api.twitter.com/1/blocks/create%C2%A0

 @param userId the ID of the user to block
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-blocks%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: blocks%C2%A0destroy</a>]]>
      </doc>
    </method>
    <method name="existsBlock"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <doc>
      <![CDATA[Tests if a friendship exists between two users.
 <br>This method calls http://api.twitter.com/1/blocks/exists/id.xml

 @param screenName The screen_name of the potentially blocked user.
 @since Twitter4J 2.0.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks-exists">Twitter API Wiki / Twitter REST API Method: blocks exists</a>]]>
      </doc>
    </method>
    <method name="existsBlock"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <doc>
      <![CDATA[Tests if a friendship exists between two users.
 <br>This method calls http://api.twitter.com/1/blocks/exists/id.xml

 @param userId The ID of the potentially blocked user.
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks-exists">Twitter API Wiki / Twitter REST API Method: blocks exists</a>]]>
      </doc>
    </method>
    <method name="getBlockingUsers"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a list of user objects that the authenticating user is blocking.
 <br>This method calls http://api.twitter.com/1/blocks/blocking.xml

 @since Twitter4J 2.0.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks-blocking">Twitter API Wiki / Twitter REST API Method: blocks blocking</a>]]>
      </doc>
    </method>
    <method name="getBlockingUsers"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="page" type="int"/>
      <doc>
      <![CDATA[Returns a list of user objects that the authenticating user is blocking.
 <br>This method calls http://api.twitter.com/1/blocks/blocking.xml

 @param page the number of page
 @since Twitter4J 2.0.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks-blocking">Twitter API Wiki / Twitter REST API Method: blocks blocking</a>]]>
      </doc>
    </method>
    <method name="getBlockingUsersIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an array of numeric user ids the authenticating user is blocking.
 <br>This method calls http://api.twitter.com/1/blocks/blocking/ids
 @since Twitter4J 2.0.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks-blocking-ids">Twitter API Wiki / Twitter REST API Method: blocks blocking ids</a>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.BlockMethodsAsync -->
  <!-- start interface twitter4j.api.DirectMessageMethods -->
  <interface name="DirectMessageMethods"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getDirectMessages" return="twitter4j.ResponseList&lt;twitter4j.DirectMessage&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a list of the direct messages sent to the authenticating user.
 <br>This method calls http://api.twitter.com/1/direct_messages

 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages">Twitter API Wiki / Twitter REST API Method: direct_messages</a>]]>
      </doc>
    </method>
    <method name="getDirectMessages" return="twitter4j.ResponseList&lt;twitter4j.DirectMessage&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a list of the direct messages sent to the authenticating user.
 <br>This method calls http://api.twitter.com/1/direct_messages

 @param paging controls pagination. Supports since_id, max_id, count and page parameters.
 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages">Twitter API Wiki / Twitter REST API Method: direct_messages</a>]]>
      </doc>
    </method>
    <method name="getSentDirectMessages" return="twitter4j.ResponseList&lt;twitter4j.DirectMessage&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a list of the direct messages sent by the authenticating user.
 <br>This method calls http://api.twitter.com/1/direct_messages/sent

 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages%C2%A0sent">Twitter API Wiki / Twitter REST API Method: direct_messages sent</a>]]>
      </doc>
    </method>
    <method name="getSentDirectMessages" return="twitter4j.ResponseList&lt;twitter4j.DirectMessage&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a list of the direct messages sent by the authenticating user.
 <br>This method calls http://api.twitter.com/1/direct_messages/sent

 @param paging controls pagination. Supports since_id, max_id, count and page parameters.
 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages%C2%A0sent">Twitter API Wiki / Twitter REST API Method: direct_messages sent</a>]]>
      </doc>
    </method>
    <method name="sendDirectMessage" return="twitter4j.DirectMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="text" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Sends a new direct message to the specified user from the authenticating user.  Requires both the user and text parameters below.
 The text will be trimmed if the length of the text is exceeding 140 characters.
 <br>This method calls http://api.twitter.com/1/direct_messages/new

 @param screenName the screen name of the user to whom send the direct message
 @param text The text of your direct message.
 @return DirectMessage
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages%C2%A0new">Twitter API Wiki / Twitter REST API Method: direct_messages new</a>]]>
      </doc>
    </method>
    <method name="sendDirectMessage" return="twitter4j.DirectMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="text" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Sends a new direct message to the specified user from the authenticating user.  Requires both the user and text parameters below.
 The text will be trimmed if the length of the text is exceeding 140 characters.
 <br>This method calls http://api.twitter.com/1/direct_messages/new

 @param userId the screen name of the user to whom send the direct message
 @param text The text of your direct message.
 @return DirectMessage
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages%C2%A0new">Twitter API Wiki / Twitter REST API Method: direct_messages new</a>
 @since Twitter4j 2.1.0]]>
      </doc>
    </method>
    <method name="destroyDirectMessage" return="twitter4j.DirectMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Destroys the direct message specified in the required ID parameter.  The authenticating user must be the recipient of the specified direct message.
 <br>This method calls http://api.twitter.com/1/direct_messages/destroy

 @param id the ID of the direct message to destroy
 @return the deleted direct message
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: direct_messages destroy</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.DirectMessageMethods -->
  <!-- start interface twitter4j.api.DirectMessageMethodsAsync -->
  <interface name="DirectMessageMethodsAsync"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getDirectMessages"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a list of the direct messages sent to the authenticating user.
 <br>This method calls http://api.twitter.com/1/direct_messages
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages">Twitter API Wiki / Twitter REST API Method: direct_messages</a>]]>
      </doc>
    </method>
    <method name="getDirectMessages"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <doc>
      <![CDATA[Returns a list of the direct messages sent to the authenticating user.
 <br>This method calls http://api.twitter.com/1/direct_messages
 @param paging controls pagination
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages">Twitter API Wiki / Twitter REST API Method: direct_messages</a>]]>
      </doc>
    </method>
    <method name="getSentDirectMessages"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a list of the direct messages sent by the authenticating user.
 <br>This method calls http://api.twitter.com/1/direct_messages/sent
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages%C2%A0sent">Twitter API Wiki / Twitter REST API Method: direct_messages%C2%A0sent</a>]]>
      </doc>
    </method>
    <method name="getSentDirectMessages"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <doc>
      <![CDATA[Returns a list of the direct messages sent by the authenticating user.
 <br>This method calls http://api.twitter.com/1/direct_messages/sent
 @param paging controls pagination
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages%C2%A0sent">Twitter API Wiki / Twitter REST API Method: direct_messages%C2%A0sent</a>]]>
      </doc>
    </method>
    <method name="sendDirectMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="text" type="java.lang.String"/>
      <doc>
      <![CDATA[Sends a new direct message to the specified user from the authenticating user.  Requires both the user and text parameters below.
 The text will be trimed if the length of the text is exceeding 140 characters.
 <br>This method calls http://api.twitter.com/1/direct_messages/new
 @param screenName the screen name of the user to whom send the direct message
 @param text The text of your direct message.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages%C2%A0new">Twitter API Wiki / Twitter REST API Method: direct_messages%C2%A0new</a>]]>
      </doc>
    </method>
    <method name="sendDirectMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="text" type="java.lang.String"/>
      <doc>
      <![CDATA[Sends a new direct message to the specified user from the authenticating user.  Requires both the user and text parameters below.
 The text will be trimed if the length of the text is exceeding 140 characters.
 <br>This method calls http://api.twitter.com/1/direct_messages/new
 @param userId the screen name of the user to whom send the direct message
 @param text The text of your direct message.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages%C2%A0new">Twitter API Wiki / Twitter REST API Method: direct_messages%C2%A0new</a>
 @since Twitter4j 2.1.0]]>
      </doc>
    </method>
    <method name="destroyDirectMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="int"/>
      <doc>
      <![CDATA[Delete specified direct message
 <br>This method calls http://api.twitter.com/1/direct_messages/destroy
 @param id int
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: direct_messages%C2%A0destroy</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.DirectMessageMethodsAsync -->
  <!-- start interface twitter4j.api.FavoriteMethods -->
  <interface name="FavoriteMethods"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getFavorites" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format.
 <br>This method calls http://api.twitter.com/1/favorites.json

 @return List<Status>
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites">Twitter API Wiki / Twitter REST API Method: favorites</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="getFavorites" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="page" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format.
 <br>This method calls http://api.twitter.com/1/favorites.json

 @param page the number of page
 @return ResponseList<Status>
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites">Twitter API Wiki / Twitter REST API Method: favorites</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="getFavorites" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format.

 @param id the ID or screen name of the user for whom to request a list of favorite statuses
 @return ResponseList<Status>
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites">Twitter API Wiki / Twitter REST API Method: favorites</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="getFavorites" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="page" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format.
 <br>This method calls http://api.twitter.com/1/favorites/[id].json

 @param id   the ID or screen name of the user for whom to request a list of favorite statuses
 @param page the number of page
 @return ResponseList<Status>
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites">Twitter API Wiki / Twitter REST API Method: favorites</a>]]>
      </doc>
    </method>
    <method name="createFavorite" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Favorites the status specified in the ID parameter as the authenticating user.  Returns the favorite status when successful.
 <br>This method calls http://api.twitter.com/1/favorites/create/[id].json

 @param id the ID of the status to favorite
 @return Status
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites%C2%A0create">Twitter API Wiki / Twitter REST API Method: favorites create</a>]]>
      </doc>
    </method>
    <method name="destroyFavorite" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Un-favorites the status specified in the ID parameter as the authenticating user.  Returns the un-favorited status in the requested format when successful.
 <br>This method calls http://api.twitter.com/1/favorites/destroy/[id].json

 @param id the ID of the status to un-favorite
 @return Status
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: favorites destroy</a>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.FavoriteMethods -->
  <!-- start interface twitter4j.api.FavoriteMethodsAsync -->
  <interface name="FavoriteMethodsAsync"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getFavorites"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format.
 <br>This method calls http://api.twitter.com/1/favorites
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-favorites">Twitter API Wiki / Twitter REST API Method: favorites</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="getFavorites"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="page" type="int"/>
      <doc>
      <![CDATA[Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format.
 <br>This method calls http://api.twitter.com/1/favorites
 @param page number of page to retrieve favorites
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-favorites">Twitter API Wiki / Twitter REST API Method: favorites</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="getFavorites"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format.
 <br>This method calls http://api.twitter.com/1/favorites
 @param id the ID or screen name of the user for whom to request a list of favorite statuses
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-favorites">Twitter API Wiki / Twitter REST API Method: favorites</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="getFavorites"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="page" type="int"/>
      <doc>
      <![CDATA[Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format.
 <br>This method calls http://api.twitter.com/1/favorites
 @param id the ID or screen name of the user for whom to request a list of favorite statuses.
 @param page retrieves the 20 next most recent favorite statuses.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-favorites">Twitter API Wiki / Twitter REST API Method: favorites</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="createFavorite"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="long"/>
      <doc>
      <![CDATA[Favorites the status specified in the ID parameter as the authenticating user.  Returns the favorite status when successful.
 <br>This method calls http://api.twitter.com/1/favorites/create%C2%A0

 @param id       the ID or screen name of the user for whom to request a list of favorite statuses.
 @since 1.1.2
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-favorites%C2%A0create">Twitter API Wiki / Twitter REST API Method: favorites%C2%A0create</a>]]>
      </doc>
    </method>
    <method name="destroyFavorite"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="long"/>
      <doc>
      <![CDATA[Favorites the status specified in the ID parameter as the authenticating user.  Returns the favorite status when successful.
 <br>This method calls http://api.twitter.com/1/favorites/destroy

 @param id       the ID or screen name of the user for whom to request a list of un-favorite statuses.
 @since 1.1.2
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-favorites%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: favorites%C2%A0destroy</a>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.FavoriteMethodsAsync -->
  <!-- start interface twitter4j.api.FriendshipMethods -->
  <interface name="FriendshipMethods"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="createFriendship" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Befriends the user specified in the ID parameter as the authenticating user.  Returns the befriended user in the requested format when successful.  Returns a string describing the failure condition when unsuccessful.
 <br>This method calls http://api.twitter.com/1/friendships/create/[id].json

 @param screenName the screen name of the user to be befriended
 @return the befriended user
 @throws twitter4j.TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships%C2%A0create">Twitter API Wiki / Twitter REST API Method: friendships create</a>]]>
      </doc>
    </method>
    <method name="createFriendship" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Befriends the user specified in the ID parameter as the authenticating user.  Returns the befriended user in the requested format when successful.  Returns a string describing the failure condition when unsuccessful.
 <br>This method calls http://api.twitter.com/1/friendships/create/[id].json

 @param userId the ID of the user to be befriended
 @return the befriended user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships%C2%A0create">Twitter API Wiki / Twitter REST API Method: friendships create</a>]]>
      </doc>
    </method>
    <method name="createFriendship" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="follow" type="boolean"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Befriends the user specified in the ID parameter as the authenticating user.  Returns the befriended user in the requested format when successful.  Returns a string describing the failure condition when unsuccessful.
 <br>This method calls http://api.twitter.com/1/friendships/create/[id].json

 @param screenName the screen name of the user to be befriended
 @param follow Enable notifications for the target user in addition to becoming friends.
 @return the befriended user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.2
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships%C2%A0create">Twitter API Wiki / Twitter REST API Method: friendships create</a>]]>
      </doc>
    </method>
    <method name="createFriendship" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="follow" type="boolean"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Befriends the user specified in the ID parameter as the authenticating user.  Returns the befriended user in the requested format when successful.  Returns a string describing the failure condition when unsuccessful.
 <br>This method calls http://api.twitter.com/1/friendships/create/[id].json

 @param userId the ID of the user to be befriended
 @param follow Enable notifications for the target user in addition to becoming friends.
 @return the befriended user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships%C2%A0create">Twitter API Wiki / Twitter REST API Method: friendships create</a>]]>
      </doc>
    </method>
    <method name="destroyFriendship" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Discontinues friendship with the user specified in the ID parameter as the authenticating user.  Returns the un-friended user in the requested format when successful.  Returns a string describing the failure condition when unsuccessful.
 <br>This method calls http://api.twitter.com/1/friendships/destroy/[id].json

 @param screenName the screen name of the user for whom to request a list of friends
 @return User
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: friendships destroy</a>]]>
      </doc>
    </method>
    <method name="destroyFriendship" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Discontinues friendship with the user specified in the ID parameter as the authenticating user.  Returns the un-friended user in the requested format when successful.  Returns a string describing the failure condition when unsuccessful.
 <br>This method calls http://api.twitter.com/1/friendships/destroy/[id].json

 @param userId the ID of the user for whom to request a list of friends
 @return User
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: friendships destroy</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="existsFriendship" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userA" type="java.lang.String"/>
      <param name="userB" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Tests if a friendship exists between two users.
 <br>This method calls http://api.twitter.com/1/friendships/exists.json

 @param userA The ID or screen_name of the first user to test friendship for.
 @param userB The ID or screen_name of the second user to test friendship for.
 @return if a friendship exists between two users.
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships-exists">Twitter API Wiki / Twitter REST API Method: friendships exists</a>]]>
      </doc>
    </method>
    <method name="showFriendship" return="twitter4j.Relationship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceScreenName" type="java.lang.String"/>
      <param name="targetScreenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Gets the detailed relationship status between a source user and a target user
 <br>This method calls http://api.twitter.com/1/friendships/show.json
 @param sourceScreenName the screen name of the source user
 @param targetScreenName the screen name of the target user
 @return Relationship

 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships-show">Twitter API Wiki / Twitter REST API Method: friendships show</a>]]>
      </doc>
    </method>
    <method name="showFriendship" return="twitter4j.Relationship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceId" type="int"/>
      <param name="targetId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Gets the detailed relationship status between a source user and a target user
 <br>This method calls http://api.twitter.com/1/friendships/show.json

 @param sourceId the screen ID of the source user
 @param targetId the screen ID of the target user
 @return Relationship
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships-show">Twitter API Wiki / Twitter REST API Method: friendships show</a>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.FriendshipMethods -->
  <!-- start interface twitter4j.api.FriendshipMethodsAsync -->
  <interface name="FriendshipMethodsAsync"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="createFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <doc>
      <![CDATA[Befriends the user specified in the ID parameter as the authenticating user.  Returns the befriended user in the requested format when successful.
 <br>This method calls http://api.twitter.com/1/friendships/create

 @param screenName the screen name of the user to be befriended
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friendships%C2%A0create">Twitter API Wiki / Twitter REST API Method: friendships%C2%A0create</a>]]>
      </doc>
    </method>
    <method name="createFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <doc>
      <![CDATA[Befriends the user specified in the ID parameter as the authenticating user.  Returns the befriended user in the requested format when successful.
 <br>This method calls http://api.twitter.com/1/friendships/create

 @param userId the ID of the user to be befriended
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friendships%C2%A0create">Twitter API Wiki / Twitter REST API Method: friendships%C2%A0create</a>]]>
      </doc>
    </method>
    <method name="createFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="follow" type="boolean"/>
      <doc>
      <![CDATA[Befriends the user specified in the ID parameter as the authenticating user.  Returns the befriended user in the requested format when successful.
 <br>This method calls http://api.twitter.com/1/friendships/create

 @param screenName the screen name of the user to be befriended
 @param follow Enable notifications for the target user in addition to becoming friends.
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friendships%C2%A0create">Twitter API Wiki / Twitter REST API Method: friendships%C2%A0create</a>]]>
      </doc>
    </method>
    <method name="createFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="follow" type="boolean"/>
      <doc>
      <![CDATA[Befriends the user specified in the ID parameter as the authenticating user.  Returns the befriended user in the requested format when successful.
 <br>This method calls http://api.twitter.com/1/friendships/create

 @param userId the ID of the user to be befriended
 @param follow Enable notifications for the target user in addition to becoming friends.
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friendships%C2%A0create">Twitter API Wiki / Twitter REST API Method: friendships%C2%A0create</a>]]>
      </doc>
    </method>
    <method name="destroyFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <doc>
      <![CDATA[Discontinues friendship with the specified in the ID parameter as the authenticating user.  Returns the un-friended user in the requested format when successful.
 <br>This method calls http://api.twitter.com/1/friendships/destroy

 @param screenName the screen name of the user to be befriended
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friendships%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: friendships%C2%A0destroy</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="destroyFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <doc>
      <![CDATA[Discontinues friendship with the specified in the ID parameter as the authenticating user.  Returns the un-friended user in the requested format when successful.
 <br>This method calls http://api.twitter.com/1/friendships/destroy

 @param userId the screen name of the user to be befriended
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friendships%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: friendships%C2%A0destroy</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="existsFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userA" type="java.lang.String"/>
      <param name="userB" type="java.lang.String"/>
      <doc>
      <![CDATA[Tests if a friendship exists between two users.
 <br>This method calls http://api.twitter.com/1/friendships/exists

 @param userA The ID or screen_name of the first user to test friendship for.
 @param userB The ID or screen_name of the second user to test friendship for.
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friendships-exists">Twitter API Wiki / Twitter REST API Method: friendships exists</a>]]>
      </doc>
    </method>
    <method name="showFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceScreenName" type="java.lang.String"/>
      <param name="targetScreenName" type="java.lang.String"/>
      <doc>
      <![CDATA[Gets the detailed relationship status between a source user and a target user
 <br>This method calls http://api.twitter.com/1/friendships/show.json

 @param sourceScreenName the screen name of the source user
 @param targetScreenName the screen name of the target user
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships-show">Twitter API Wiki / Twitter REST API Method: friendships show</a>]]>
      </doc>
    </method>
    <method name="showFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceId" type="int"/>
      <param name="targetId" type="int"/>
      <doc>
      <![CDATA[Gets the detailed relationship status between a source user and a target user
 <br>This method calls http://api.twitter.com/1/friendships/show.json

 @param sourceId the screen ID of the source user
 @param targetId the screen ID of the target user
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships-show">Twitter API Wiki / Twitter REST API Method: friendships show</a>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.FriendshipMethodsAsync -->
  <!-- start interface twitter4j.api.HelpMethods -->
  <interface name="HelpMethods"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="test" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the string "ok" in the requested format with a 200 OK HTTP status code.

 @return true if the API is working
 @throws twitter4j.TwitterException when Twitter service or network is unavailable
 @since Twitter4J 1.0.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-help%C2%A0test">Twitter API Wiki / Twitter REST API Method: help test</a>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.HelpMethods -->
  <!-- start interface twitter4j.api.HelpMethodsAsync -->
  <interface name="HelpMethodsAsync"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="test"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the string "ok" in the requested format with a 200 OK HTTP status code.
 <br>This method calls http://api.twitter.com/1/help/test

 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-help%C2%A0test">Twitter API Wiki / Twitter REST API Method: help%C2%A0test</a>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.HelpMethodsAsync -->
  <!-- start interface twitter4j.api.ListMembersMethods -->
  <interface name="ListMembersMethods"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getUserListMembers" return="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOwnerScreenName" type="java.lang.String"/>
      <param name="listId" type="int"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the members of the specified list.
 <br>This method calls http://api.twitter.com/1/[user]/[list_id]/members.json
 @param listOwnerScreenName The screen name of the list owner
 @param listId The id of the list
 @param cursor Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
 @return the members of the specified list.
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-members">Twitter REST API Method: GET /:user/:list_id/members</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="addUserListMember" return="twitter4j.UserList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listId" type="int"/>
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Adds a member to a list. The authenticated user must own the list to be able to add members to it. Lists are limited to having 500 members.
 <br>This method calls http://api.twitter.com/1/[listOwner]/[listId]/members.json
 @param listId The id of the list.
 @param userId The id of the user to add as a member of the list.
 @return the updated list
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-POST-list-members">Twitter REST API Method: POST /:user/:id/members</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="deleteUserListMember" return="twitter4j.UserList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listId" type="int"/>
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Removes the specified member from the list. The authenticated user must be the list's owner to remove members from the list.
 <br>This method calls http://api.twitter.com/1/[listOwner]/[listId]/members.json
 @param listId The id of the list.
 @param userId The screen name of the member you wish to remove from the list.
 @return the updated list
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-DELETE-list-members">Twitter REST API Method: DELETE /:user/:list_id/members</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="checkUserListMembership" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOwnerScreenName" type="java.lang.String"/>
      <param name="listId" type="int"/>
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Check if a user is a member of the specified list.<br>
 <br>This method calls http://api.twitter.com/1/[listOwner]/[listId]/members/id.json
 @param listOwnerScreenName The screen name of the list owner
 @param listId The id of the list.
 @param userId The id of the user who you want to know is a member or not of the specified list.
 @return the updated list
 @throws TwitterException when Twitter service or network is unavailable
 , or the user is not a member of the specified list(TwitterException.getStatusCode() returns 404 in that case.)
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-members-id">Twitter REST API Method:  GET /:user/:list_id/members/:id</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.ListMembersMethods -->
  <!-- start interface twitter4j.api.ListMembersMethodsAsync -->
  <interface name="ListMembersMethodsAsync"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <doc>
    <![CDATA[Not yet implemented.]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.ListMembersMethodsAsync -->
  <!-- start interface twitter4j.api.ListMethods -->
  <interface name="ListMethods"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="createUserList" return="twitter4j.UserList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listName" type="java.lang.String"/>
      <param name="isPublicList" type="boolean"/>
      <param name="description" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Creates a new list for the authenticated user.
 <br>This method calls http://api.twitter.com/1/user/lists.json
 @param listName The name of the list you are creating. Required.
 @param isPublicList set true if you wish to make a public list
 @param description The description of the list you are creating. Optional.
 @return the list that was created
 @throws twitter4j.TwitterException when Twitter service or network is unavailable, or the authenticated user already has 20 lists(TwitterException.getStatusCode() == 403).
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-POST-lists">Twitter REST API Method: POST lists</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="updateUserList" return="twitter4j.UserList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listId" type="int"/>
      <param name="newListName" type="java.lang.String"/>
      <param name="isPublicList" type="boolean"/>
      <param name="newDescription" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Updates the specified list.
 <br>This method calls http://api.twitter.com/1/user/lists/id.json
 @param listId The id of the list to update.
 @param newListName What you'd like to change the list's name to.
 @param isPublicList Whether your list is public or private. Optional. Values can be public or private. Lists are public by default if no mode is specified.
 @param newDescription What you'd like to change the list description to.
 @return the updated list
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-POST-lists-id">Twitter REST API Method: POST lists id</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="getUserLists" return="twitter4j.PagableResponseList&lt;twitter4j.UserList&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOwnerScreenName" type="java.lang.String"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[List the lists of the specified user. Private lists will be included if the authenticated users is the same as the user whose lists are being returned.
 <br>This method calls http://api.twitter.com/1/user/lists.json
 @param listOwnerScreenName The screen name of the list owner
 @param cursor Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
 @return the list of lists
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-lists">Twitter REST API Method: GET lists</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="showUserList" return="twitter4j.UserList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOwnerScreenName" type="java.lang.String"/>
      <param name="id" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Show the specified list. Private lists will only be shown if the authenticated user owns the specified list.
 <br>This method calls http://api.twitter.com/1/user/lists/id.json
 @param listOwnerScreenName The screen name of the list owner
 @param id The id of the list to show
 @return the specified list
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-id">Twitter REST API Method: GET list id</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="destroyUserList" return="twitter4j.UserList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Deletes the specified list. Must be owned by the authenticated user.
 <br>This method calls http://api.twitter.com/1/[user]/lists/[id].json
 @param listId The id of the list to delete
 @return the deleted list
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-DELETE-list-id">Twitter REST API Method: DELETE /:user/lists/:id</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="getUserListStatuses" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOwnerScreenName" type="java.lang.String"/>
      <param name="id" type="int"/>
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Show tweet timeline for members of the specified list.
 <br>http://api.twitter.com/1/user/lists/list_id/statuses.json
 @param listOwnerScreenName The screen name of the list owner
 @param id The id of the list to delete
 @param paging controls pagination. Supports since_id, max_id, count and page parameters.
 @return list of statuses for members of the specified list
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-statuses">Twitter REST API Method: GET list statuses</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="getUserListMemberships" return="twitter4j.PagableResponseList&lt;twitter4j.UserList&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOwnerScreenName" type="java.lang.String"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[List the lists the specified user has been added to.
 <br>This method calls http://api.twitter.com/1/user/lists/memberships.json
 @param listOwnerScreenName The screen name of the list owner
 @param cursor Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
 @return the list of lists
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-memberships">Twitter REST API Method: GET /:user/lists/memberships</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="getUserListSubscriptions" return="twitter4j.PagableResponseList&lt;twitter4j.UserList&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOwnerScreenName" type="java.lang.String"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[List the lists the specified user follows.
 <br>This method calls http://api.twitter.com/1/[user]/lists/subscriptions.json
 @param listOwnerScreenName The screen name of the list owner
 @param cursor Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
 @return the list of lists
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-subscriptions">Twitter REST API Method: GET list subscriptions</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.ListMethods -->
  <!-- start interface twitter4j.api.ListMethodsAsync -->
  <interface name="ListMethodsAsync"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <doc>
    <![CDATA[Not yet implemented.]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.ListMethodsAsync -->
  <!-- start interface twitter4j.api.ListSubscribersMethods -->
  <interface name="ListSubscribersMethods"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getUserListSubscribers" return="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOwnerScreenName" type="java.lang.String"/>
      <param name="listId" type="int"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the subscribers of the specified list.
 <br>This method calls http://api.twitter.com/1/[user]/[list_id]/subscribers.json
 @param listOwnerScreenName The screen name of the list owner
 @param listId The id of the list
 @param cursor Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
 @return the members of the specified list.
 @throws twitter4j.TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-subscribers">Twitter REST API Method: GET /:user/:list_id/members</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="subscribeUserList" return="twitter4j.UserList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOwnerScreenName" type="java.lang.String"/>
      <param name="listId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Make the authenticated user follow the specified list.
 <br>This method calls http://api.twitter.com/1/[listOwner]/[listId]/subscribers.json
 @param listOwnerScreenName The screen name of the list owner
 @param listId The id of the list.
 @return the updated list
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-POST-list-subscribers">Twitter REST API Method: POST /:user/:id/members</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="unsubscribeUserList" return="twitter4j.UserList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOwnerScreenName" type="java.lang.String"/>
      <param name="listId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Unsubscribes the authenticated user form the specified list.
 <br>This method calls http://api.twitter.com/1/[listOwner]/[listId]/subscribers.json
 @param listOwnerScreenName The screen name of the list owner
 @param listId The id of the list.
 @return the updated list
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-DELETE-list-subscribers">Twitter REST API Method: DELETE /:user/:list_id/members</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="checkUserListSubscription" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOwnerScreenName" type="java.lang.String"/>
      <param name="listId" type="int"/>
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Check if the specified user is a subscriber of the specified list.
 <br>This method calls http://api.twitter.com/1/[listOwner]/[listId]/subscribers/[userId].json
 @param listOwnerScreenName The screen name of the list owner
 @param listId The id of the list.
 @param userId The id of the user who you want to know is a member or not of the specified list.
 @return the updated list
 @throws TwitterException when Twitter service or network is unavailable
 , or the user is not a member of the specified list(TwitterException.getStatusCode() returns 404 in that case.)
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-subscribers-id">Twitter REST API Method: GET /:user/:list_id/subscribers/:id</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.ListSubscribersMethods -->
  <!-- start interface twitter4j.api.ListSubscribersMethodsAsync -->
  <interface name="ListSubscribersMethodsAsync"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <doc>
    <![CDATA[Not yet implemented.]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.ListSubscribersMethodsAsync -->
  <!-- start interface twitter4j.api.LocalTrendsMethods -->
  <interface name="LocalTrendsMethods"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <doc>
    <![CDATA[Not yet supported.

 http://yusuke.homeip.net/jira/browse/TFJ-233]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.LocalTrendsMethods -->
  <!-- start interface twitter4j.api.LocalTrendsMethodsAsync -->
  <interface name="LocalTrendsMethodsAsync"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <doc>
    <![CDATA[Not yet supported.

 http://yusuke.homeip.net/jira/browse/TFJ-233]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.LocalTrendsMethodsAsync -->
  <!-- start interface twitter4j.api.NotificationMethods -->
  <interface name="NotificationMethods"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="enableNotification" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Enables notifications for updates from the specified user to the authenticating user.  Returns the specified user when successful.
 <br>This method calls http://api.twitter.com/1/notifications/follow/[id].json

 @param screenName Specifies the screen name of the user to follow with device updates.
 @return User
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-notifications%C2%A0follow">Twitter API Wiki / Twitter REST API Method: notifications follow</a>]]>
      </doc>
    </method>
    <method name="enableNotification" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Enables notifications for updates from the specified user to the authenticating user.  Returns the specified user when successful.
 <br>This method calls http://api.twitter.com/1/notifications/follow/[id].json

 @param userId Specifies the ID of the user to follow with device updates.
 @return User
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-notifications%C2%A0follow">Twitter API Wiki / Twitter REST API Method: notifications follow</a>]]>
      </doc>
    </method>
    <method name="disableNotification" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Disables notifications for updates from the specified user to the authenticating user.  Returns the specified user when successful.
 <br>This method calls http://api.twitter.com/1/notifications/leave/[id].json

 @param screenName Specifies the screen name of the user to disable device notifications.
 @return User
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-notifications%C2%A0leave">Twitter API Wiki / Twitter REST API Method: notifications leave</a>]]>
      </doc>
    </method>
    <method name="disableNotification" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Disables notifications for updates from the specified user to the authenticating user.  Returns the specified user when successful.
 <br>This method calls http://api.twitter.com/1/notifications/leave/[id].json

 @param userId Specifies the ID of the user to disable device notifications.
 @return User
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-notifications%C2%A0leave">Twitter API Wiki / Twitter REST API Method: notifications leave</a>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.NotificationMethods -->
  <!-- start interface twitter4j.api.NotificationMethodsAsync -->
  <interface name="NotificationMethodsAsync"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="enableNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <doc>
      <![CDATA[Enables notifications for updates from the specified user to the authenticating user.  Returns the specified user when successful.
 <br>This method calls http://api.twitter.com/1/notifications/follow

 @param screenName Specifies the screen name of the user to follow with device updates.
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-notifications%C2%A0follow">Twitter API Wiki / Twitter REST API Method: notifications%C2%A0follow</a>]]>
      </doc>
    </method>
    <method name="enableNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <doc>
      <![CDATA[Enables notifications for updates from the specified user to the authenticating user.  Returns the specified user when successful.
 <br>This method calls http://api.twitter.com/1/notifications/follow

 @param userId Specifies the ID of the user to follow with device updates.
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-notifications%C2%A0follow">Twitter API Wiki / Twitter REST API Method: notifications%C2%A0follow</a>]]>
      </doc>
    </method>
    <method name="disableNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <doc>
      <![CDATA[Disables notifications for updates from the specified user to the authenticating user.  Returns the specified user when successful.
 <br>This method calls http://api.twitter.com/1/notifications/leave

 @param screenName Specifies the screen name of the user to disable device notifications.
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-notifications%C2%A0leave">Twitter API Wiki / Twitter REST API Method: notifications%C2%A0leave</a>]]>
      </doc>
    </method>
    <method name="disableNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <doc>
      <![CDATA[Disables notifications for updates from the specified user to the authenticating user.  Returns the specified user when successful.
 <br>This method calls http://api.twitter.com/1/notifications/leave

 @param userId Specifies the ID of the user to disable device notifications.
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-notifications%C2%A0leave">Twitter API Wiki / Twitter REST API Method: notifications%C2%A0leave</a>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.NotificationMethodsAsync -->
  <!-- start interface twitter4j.api.SavedSearchesMethods -->
  <interface name="SavedSearchesMethods"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getSavedSearches" return="java.util.List&lt;twitter4j.SavedSearch&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the authenticated user's saved search queries.
 <br>This method calls http://api.twitter.com/1/saved_searches.json
 @return Returns an array of numeric user ids the authenticating user is blocking.
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.8
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-saved_searches">Twitter API Wiki / Twitter REST API Method: saved_searches</a>]]>
      </doc>
    </method>
    <method name="showSavedSearch" return="twitter4j.SavedSearch"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Retrieve the data for a saved search owned by the authenticating user specified by the given id.
 <br>This method calls http://api.twitter.com/1/saved_searches/show/id.json
 @param id The id of the saved search to be retrieved.
 @return the data for a saved search
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.8
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-saved_searches-show">Twitter API Wiki / Twitter REST API Method: saved_searches show</a>]]>
      </doc>
    </method>
    <method name="createSavedSearch" return="twitter4j.SavedSearch"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="query" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Retrieve the data for a saved search owned by the authenticating user specified by the given id.
 <br>This method calls http://api.twitter.com/1/saved_searches/saved_searches/create.json
 @param query the query string
 @return the data for a created saved search
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.8
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-saved_searches-create">Twitter API Wiki / Twitter REST API Method: saved_searches create</a>]]>
      </doc>
    </method>
    <method name="destroySavedSearch" return="twitter4j.SavedSearch"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Destroys a saved search for the authenticated user. The search specified by id must be owned by the authenticating user.
 <br>This method calls http://api.twitter.com/1/saved_searches/destroy/id.json
 @param id The id of the saved search to be deleted.
 @return the data for a destroyed saved search
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.8
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-saved_searches-destroy">Twitter API Wiki / Twitter REST API Method: saved_searches destroy</a>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.SavedSearchesMethods -->
  <!-- start interface twitter4j.api.SavedSearchesMethodsAsync -->
  <interface name="SavedSearchesMethodsAsync"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <doc>
    <![CDATA[Not yet implemented.]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.SavedSearchesMethodsAsync -->
  <!-- start interface twitter4j.api.SearchMethods -->
  <interface name="SearchMethods"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="search" return="twitter4j.QueryResult"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="query" type="twitter4j.Query"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns tweets that match a specified query.
 <br>This method calls http://search.twitter.com/search
 @param query - the search condition
 @return the result
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 1.1.7
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-search">Twitter API Wiki / Twitter Search API Method: search</a>]]>
      </doc>
    </method>
    <method name="getTrends" return="twitter4j.Trends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the top ten topics that are currently trending on Twitter.  The response includes the time of the request, the name of each trend, and the url to the <a href="http://search.twitter.com/">Twitter Search</a> results page for that topic.
 <br>This method calls http://search.twitter.com/trends
 @return the result
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.2
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends">Twitter Search API Method: trends</a>]]>
      </doc>
    </method>
    <method name="getCurrentTrends" return="twitter4j.Trends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the current top 10 trending topics on Twitter.  The response includes the time of the request, the name of each trending topic, and query used on <a href="http://search.twitter.com/">Twitter Search</a> results page for that topic.
 <br>This method calls http://search.twitter.com/trends/current
 @return the result
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.2
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends">Twitter Search API Method: trends</a>]]>
      </doc>
    </method>
    <method name="getCurrentTrends" return="twitter4j.Trends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="excludeHashTags" type="boolean"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the current top 10 trending topics on Twitter.  The response includes the time of the request, the name of each trending topic, and query used on <a href="http://search.twitter.com/">Twitter Search</a> results page for that topic.
 <br>This method calls http://search.twitter.com/trends/current
 @param excludeHashTags Setting this to true will remove all hashtags from the trends list.
 @return the result
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.2
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends">Twitter Search API Method: trends</a>]]>
      </doc>
    </method>
    <method name="getDailyTrends" return="java.util.List&lt;twitter4j.Trends&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the top 20 trending topics for each hour in a given day.
 <br>This method calls http://search.twitter.com/trends/daily
 @return the result
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.2
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-daily">Twitter Search API Method: trends daily</a>]]>
      </doc>
    </method>
    <method name="getDailyTrends" return="java.util.List&lt;twitter4j.Trends&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="date" type="java.util.Date"/>
      <param name="excludeHashTags" type="boolean"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the top 20 trending topics for each hour in a given day.
 <br>This method calls http://search.twitter.com/trends/daily
 @param date Permits specifying a start date for the report.
 @param excludeHashTags Setting this to true will remove all hashtags from the trends list.
 @return the result
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.2
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-daily">Twitter Search API Method: trends daily</a>]]>
      </doc>
    </method>
    <method name="getWeeklyTrends" return="java.util.List&lt;twitter4j.Trends&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the top 30 trending topics for each day in a given week.
 <br>This method calls http://search.twitter.com/trends/weekly
 @return the result
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.2
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-weekly">Twitter Search API Method: trends weekly</a>]]>
      </doc>
    </method>
    <method name="getWeeklyTrends" return="java.util.List&lt;twitter4j.Trends&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="date" type="java.util.Date"/>
      <param name="excludeHashTags" type="boolean"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the top 30 trending topics for each day in a given week.
 <br>This method calls http://search.twitter.com/trends/weekly
 @param date Permits specifying a start date for the report.
 @param excludeHashTags Setting this to true will remove all hashtags from the trends list.
 @return the result
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.2
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-weekly">Twitter Search API Method: trends weekly</a>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.SearchMethods -->
  <!-- start interface twitter4j.api.SearchMethodsAsync -->
  <interface name="SearchMethodsAsync"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="search"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="query" type="twitter4j.Query"/>
      <doc>
      <![CDATA[Returns tweets that match a specified query.
 <br>This method calls http://search.twitter.com/search

 @param query - the search condition
 @since Twitter4J 1.1.7
 @see <a href="http://apiwiki.twitter.com/Search-API-Documentation">Twitter API / Search API Documentation</a>
 @see <a href="http://search.twitter.com/operators">Twitter API / Search Operators</a>]]>
      </doc>
    </method>
    <method name="getTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the top ten topics that are currently trending on Twitter.  The response includes the time of the request, the name of each trend, and the url to the <a href="http://search.twitter.com/">Twitter Search</a> results page for that topic.
 <br>This method calls http://search.twitter.com/trends
 @since Twitter4J 2.0.2
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends">Twitter Search API Method: trends</a>]]>
      </doc>
    </method>
    <method name="getCurrentTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the current top 10 trending topics on Twitter.  The response includes the time of the request, the name of each trending topic, and query used on <a href="http://search.twitter.com/">Twitter Search</a> results page for that topic.
 <br>This method calls http://search.twitter.com/trends/current
 @since Twitter4J 2.0.2
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends">Twitter Search API Method: trends</a>]]>
      </doc>
    </method>
    <method name="getCurrentTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="excludeHashTags" type="boolean"/>
      <doc>
      <![CDATA[Returns the current top 10 trending topics on Twitter.  The response includes the time of the request, the name of each trending topic, and query used on <a href="http://search.twitter.com/">Twitter Search</a> results page for that topic.
 <br>This method calls http://search.twitter.com/trends/current
 @param excludeHashTags Setting this to true will remove all hashtags from the trends list.
 @since Twitter4J 2.0.2
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends">Twitter Search API Method: trends</a>]]>
      </doc>
    </method>
    <method name="getDailyTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the top 20 trending topics for each hour in a given day.
 <br>This method calls http://search.twitter.com/trends/daily
 @since Twitter4J 2.0.2
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-daily">Twitter Search API Method: trends daily</a>]]>
      </doc>
    </method>
    <method name="getDailyTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="date" type="java.util.Date"/>
      <param name="excludeHashTags" type="boolean"/>
      <doc>
      <![CDATA[Returns the top 20 trending topics for each hour in a given day.
 <br>This method calls http://search.twitter.com/trends/daily
 @param date Permits specifying a start date for the report.
 @param excludeHashTags Setting this to true will remove all hashtags from the trends list.
 @since Twitter4J 2.0.2
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-daily">Twitter Search API Method: trends daily</a>]]>
      </doc>
    </method>
    <method name="getWeeklyTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the top 30 trending topics for each day in a given week.
 <br>This method calls http://search.twitter.com/trends/weekly
 @since Twitter4J 2.0.2
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-weekly">Twitter Search API Method: trends weekly</a>]]>
      </doc>
    </method>
    <method name="getWeeklyTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="date" type="java.util.Date"/>
      <param name="excludeHashTags" type="boolean"/>
      <doc>
      <![CDATA[Returns the top 30 trending topics for each day in a given week.
 <br>This method calls http://search.twitter.com/trends/weekly
 @param date Permits specifying a start date for the report.
 @param excludeHashTags Setting this to true will remove all hashtags from the trends list.
 @since Twitter4J 2.0.2
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-weekly">Twitter Search API Method: trends weekly</a>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.SearchMethodsAsync -->
  <!-- start interface twitter4j.api.SocialGraphMethods -->
  <interface name="SocialGraphMethods"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getFriendsIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the authenticating user is following.
 <br>This method calls http://api.twitter.com/1/friends/ids.json

 @return an array of numeric IDs for every user the authenticating user is following
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friends%C2%A0ids">Twitter API Wiki / Twitter REST API Method: friends ids</a>
 @since Twitter4J 2.0.0]]>
      </doc>
    </method>
    <method name="getFriendsIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the authenticating user is following.
 <br>This method calls http://api.twitter.com/1/friends/ids.json

 @param cursor Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @return an array of numeric IDs for every user the authenticating user is following
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friends%C2%A0ids">Twitter API Wiki / Twitter REST API Method: friends ids</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getFriendsIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is following.<br>
 all IDs are attempted to be returned, but large sets of IDs will likely fail with timeout errors.
 <br>This method calls http://api.twitter.com/1/friends/ids.json

 @param userId Specifies the ID of the user for whom to return the friends list.
 @return an array of numeric IDs for every user the specified user is following
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friends%C2%A0ids">Twitter API Wiki / Twitter REST API Method: friends ids</a>
 @since Twitter4J 2.0.0]]>
      </doc>
    </method>
    <method name="getFriendsIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is following.
 <br>This method calls http://api.twitter.com/1/friends/ids.json

 @param userId Specifies the ID of the user for whom to return the friends list.
 @param cursor Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @return an array of numeric IDs for every user the specified user is following
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friends%C2%A0ids">Twitter API Wiki / Twitter REST API Method: friends ids</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getFriendsIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is following.
 <br>This method calls http://api.twitter.com/1/friends/ids.json

 @param screenName Specifies the screen name of the user for whom to return the friends list.
 @return an array of numeric IDs for every user the specified user is following
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/REST-API-Documentation#friends/ids">Twitter API Wiki / REST API Documentation - Social Graph Methods - friends/ids</a>
 @since Twitter4J 2.0.0]]>
      </doc>
    </method>
    <method name="getFriendsIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is following.
 <br>This method calls http://api.twitter.com/1/friends/ids.json

 @param screenName Specifies the screen name of the user for whom to return the friends list.
 @param cursor     Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @return an array of numeric IDs for every user the specified user is following
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/REST-API-Documentation#friends/ids">Twitter API Wiki / REST API Documentation - Social Graph Methods - friends/ids</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getFollowersIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 <br>This method calls http://api.twitter.com/1/followers/ids.json

 @return The ID or screen_name of the user to retrieve the friends ID list for.
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers ids</a>
 @since Twitter4J 2.0.0]]>
      </doc>
    </method>
    <method name="getFollowersIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 <br>This method calls http://api.twitter.com/1/followers/ids.json

 @param cursor Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @return The ID or screen_name of the user to retrieve the friends ID list for.
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers ids</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getFollowersIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 <br>This method calls http://api.twitter.com/1/followers/ids.json

 @param userId Specifies the ID of the user for whom to return the followers list.
 @return The ID or screen_name of the user to retrieve the friends ID list for.
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers ids</a>
 @since Twitter4J 2.0.0]]>
      </doc>
    </method>
    <method name="getFollowersIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 <br>This method calls http://api.twitter.com/1/followers/ids.json

 @param userId Specifies the ID of the user for whom to return the followers list.
 @param cursor Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @return The ID or screen_name of the user to retrieve the friends ID list for.
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers ids</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getFollowersIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 <br>This method calls http://api.twitter.com/1/followers/ids.json

 @param screenName Specifies the screen name of the user for whom to return the followers list.
 @return The ID or screen_name of the user to retrieve the friends ID list for.
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers ids</a>
 @since Twitter4J 2.0.0]]>
      </doc>
    </method>
    <method name="getFollowersIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 <br>This method calls http://api.twitter.com/1/followers/ids.json

 @param screenName Specifies the screen name of the user for whom to return the followers list.
 @param cursor     Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @return The ID or screen_name of the user to retrieve the friends ID list for.
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers ids</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.SocialGraphMethods -->
  <!-- start interface twitter4j.api.SocialGraphMethodsAsync -->
  <interface name="SocialGraphMethodsAsync"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getFriendsIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the authenticating user is following.
 <br>This method calls http://api.twitter.com/1/friends/ids%C2%A0%C2%A0

 @since Twitter4J 2.0.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friends%C2%A0ids">Twitter API Wiki / Twitter REST API Method: friends%C2%A0ids</a>]]>
      </doc>
    </method>
    <method name="getFriendsIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cursor" type="long"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the authenticating user is following.
 <br>This method calls http://api.twitter.com/1/friends/ids%C2%A0%C2%A0

 @param cursor  Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friends%C2%A0ids">Twitter API Wiki / Twitter REST API Method: friends%C2%A0ids</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getFriendsIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is following.
 <br>This method calls http://api.twitter.com/1/friends/ids%C2%A0%C2%A0

 @param userId   Specifies the ID of the user for whom to return the friends list.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friends%C2%A0ids">Twitter API Wiki / Twitter REST API Method: friends%C2%A0ids</a>
 @since Twitter4J 2.0.0]]>
      </doc>
    </method>
    <method name="getFriendsIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="cursor" type="long"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is following.
 <br>This method calls http://api.twitter.com/1/friends/ids%C2%A0%C2%A0

 @param userId   Specifies the ID of the user for whom to return the friends list.
 @param cursor  Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friends%C2%A0ids">Twitter API Wiki / Twitter REST API Method: friends%C2%A0ids</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getFriendsIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is following.
 <br>This method calls http://api.twitter.com/1/friends/ids%C2%A0%C2%A0

 @param screenName Specifies the screen name of the user for whom to return the friends list.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friends%C2%A0ids">Twitter API Wiki / Twitter REST API Method: friends%C2%A0ids</a>
 @since Twitter4J 2.0.0]]>
      </doc>
    </method>
    <method name="getFriendsIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="cursor" type="long"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is following.
 <br>This method calls http://api.twitter.com/1/friends/ids%C2%A0%C2%A0

 @param screenName Specifies the screen name of the user for whom to return the friends list.
 @param cursor  Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friends%C2%A0ids">Twitter API Wiki / Twitter REST API Method: friends%C2%A0ids</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getFollowersIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 <br>This method calls http://api.twitter.com/1/followers/ids

 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers%C2%A0ids</a>
 @since Twitter4J 2.0.0]]>
      </doc>
    </method>
    <method name="getFollowersIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cursor" type="long"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 <br>This method calls http://api.twitter.com/1/followers/ids

 @param cursor Breaks the results into pages. A single page contains 100 users. This is recommended for users who are followed by many other users. Provide a value of  -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers%C2%A0ids</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getFollowersIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 <br>This method calls http://api.twitter.com/1/followers/ids

 @param userId   Specifies the ID of the user for whom to return the followers list.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers%C2%A0ids</a>
 @since Twitter4J 2.0.0]]>
      </doc>
    </method>
    <method name="getFollowersIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="cursor" type="long"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 <br>This method calls http://api.twitter.com/1/followers/ids

 @param userId   Specifies the ID of the user for whom to return the followers list.
 @param cursor  Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers%C2%A0ids</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getFollowersIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 <br>This method calls http://api.twitter.com/1/followers/ids

 @param screenName Specifies the screen name of the user for whom to return the followers list.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers%C2%A0ids</a>
 @since Twitter4J 2.0.0]]>
      </doc>
    </method>
    <method name="getFollowersIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="cursor" type="long"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 <br>This method calls http://api.twitter.com/1/followers/ids

 @param screenName Specifies the screen name of the user for whom to return the followers list.
 @param cursor  Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers%C2%A0ids</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.SocialGraphMethodsAsync -->
  <!-- start interface twitter4j.api.SpamReportingMethods -->
  <interface name="SpamReportingMethods"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="reportSpam" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[The user specified in the id is blocked by the authenticated user and reported as a spammer.
 <br>This method calls http://api.twitter.com/1/report_spam.json

 @param userId The ID of the user you want to report as a spammer.
 @return The User reported as a spammer.
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-report_spam">Twitter API Wiki / Twitter REST API Method: report_spam</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="reportSpam" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[The user specified in the id is blocked by the authenticated user and reported as a spammer.
 <br>This method calls http://api.twitter.com/1/report_spam.json

 @param screenName The screen name of the user you want to report as a spammer.
 @return The User reported as a spammer.
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-report_spam">Twitter API Wiki / Twitter REST API Method: report_spam</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.SpamReportingMethods -->
  <!-- start interface twitter4j.api.SpamReportingMethodsAsync -->
  <interface name="SpamReportingMethodsAsync"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="reportSpam"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[The user specified in the id is blocked by the authenticated user and reported as a spammer.
 <br>This method calls http://api.twitter.com/1/report_spam.json

 @param userId The ID of the user you want to report as a spammer.
 @throws twitter4j.TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-report_spam">Twitter API Wiki / Twitter REST API Method: report_spam</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="reportSpam"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[The user specified in the id is blocked by the authenticated user and reported as a spammer.
 <br>This method calls http://api.twitter.com/1/report_spam.json

 @param screenName The screen name of the user you want to report as a spammer.
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-report_spam">Twitter API Wiki / Twitter REST API Method: report_spam</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Not yet supported.

 http://yusuke.homeip.net/jira/browse/TFJ-223]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.SpamReportingMethodsAsync -->
  <!-- start interface twitter4j.api.StatusMethods -->
  <interface name="StatusMethods"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="showStatus" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a single status, specified by the id parameter. The status's author will be returned inline.
 <br>This method calls http://api.twitter.com/1/statuses/show

 @param id the numerical ID of the status you're trying to retrieve
 @return a single status
 @throws twitter4j.TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0show">Twitter API Wiki / Twitter REST API Method: statuses show</a>]]>
      </doc>
    </method>
    <method name="updateStatus" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Updates the user's status.
 <br>Statuses over 140 characters will be forcibly truncated.
 <br>This method calls http://api.twitter.com/1/statuses/update

 @param status the text of your status update
 @return the latest status
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0update">Twitter API Wiki / Twitter REST API Method: statuses update</a>]]>
      </doc>
    </method>
    <method name="updateStatus" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="java.lang.String"/>
      <param name="location" type="twitter4j.GeoLocation"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Updates the user's status.
 <br>Statuses over 140 characters will be forcibly truncated.
 <br>This method calls http://api.twitter.com/1/statuses/update

 @param status the text of your status update
 @param location The location that this tweet refers to.
 @return the latest status
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0update">Twitter API Wiki / Twitter REST API Method: statuses update</a>]]>
      </doc>
    </method>
    <method name="updateStatus" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="java.lang.String"/>
      <param name="inReplyToStatusId" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Updates the user's status.
 <br>Statuses over 140 characters will be forcibly truncated.
 <br>This method calls http://api.twitter.com/1/statuses/update

 @param status            the text of your status update
 @param inReplyToStatusId The ID of an existing status that the status to be posted is in reply to.  This implicitly sets the in_reply_to_user_id attribute of the resulting status to the user ID of the message being replied to.  Invalid/missing status IDs will be ignored.
 @return the latest status
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0update">Twitter API Wiki / Twitter REST API Method: statuses update</a>]]>
      </doc>
    </method>
    <method name="updateStatus" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="java.lang.String"/>
      <param name="inReplyToStatusId" type="long"/>
      <param name="location" type="twitter4j.GeoLocation"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Updates the user's status.
 <br>Statuses over 140 characters will be forcibly truncated.
 <br>This method calls http://api.twitter.com/1/statuses/update

 @param status            the text of your status update
 @param inReplyToStatusId The ID of an existing status that the status to be posted is in reply to.  This implicitly sets the in_reply_to_user_id attribute of the resulting status to the user ID of the message being replied to.  Invalid/missing status IDs will be ignored.
 @param location The location that this tweet refers to.
 @return the latest status
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0update">Twitter API Wiki / Twitter REST API Method: statuses update</a>]]>
      </doc>
    </method>
    <method name="destroyStatus" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusId" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Destroys the status specified by the required ID parameter.  The authenticating user must be the author of the specified status.
 <br>This method calls http://api.twitter.com/1/statuses/destroy

 @param statusId The ID of the status to destroy.
 @return the deleted status
 @throws TwitterException when Twitter service or network is unavailable
 @since 1.0.5
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: statuses destroy</a>]]>
      </doc>
    </method>
    <method name="retweetStatus" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusId" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Retweets a tweet. Requires the id parameter of the tweet you are retweeting. Returns the original tweet with retweet details embedded.
 <br>This method calls http://api.twitter.com/1/statuses/retweet

 @param statusId The ID of the status to retweet.
 @return the retweeted status
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweet">Twitter API Wiki / Twitter REST API Method: statuses retweet</a>]]>
      </doc>
    </method>
    <method name="getRetweets" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusId" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns up to 100 of the first retweets of a given tweet.
 <br>This method calls http://api.twitter.com/1/statuses/retweets

 @param statusId The numerical ID of the tweet you want the retweets of.
 @return the retweets of a given tweet
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweets">Twitter API Wiki / Twitter REST API Method: statuses retweets</a>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.StatusMethods -->
  <!-- start interface twitter4j.api.StatusMethodsAsync -->
  <interface name="StatusMethodsAsync"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="showStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="long"/>
      <doc>
      <![CDATA[Returns a single status, specified by the id parameter. The status's author will be returned inline.
 <br>This method calls http://api.twitter.com/1/statuses/show
 @param id int
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0show">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0show</a>]]>
      </doc>
    </method>
    <method name="updateStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="java.lang.String"/>
      <doc>
      <![CDATA[Updates the user's status asynchronously
 <br>This method calls http://api.twitter.com/1/statuses/update

 @param status String
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0update">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0update</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="updateStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="java.lang.String"/>
      <param name="location" type="twitter4j.GeoLocation"/>
      <doc>
      <![CDATA[Updates the user's status asynchronously.
 <br>Statuses over 140 characters will be forcibly truncated.
 <br>This method calls http://api.twitter.com/1/statuses/update

 @param status the text of your status update
 @param location The location that this tweet refers to.
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0update">Twitter API Wiki / Twitter REST API Method: statuses update</a>]]>
      </doc>
    </method>
    <method name="updateStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="java.lang.String"/>
      <param name="inReplyToStatusId" type="long"/>
      <doc>
      <![CDATA[Updates the user's status asynchronously
 <br>This method calls http://api.twitter.com/1/statuses/update

 @param status String
 @param inReplyToStatusId The ID of an existing status that the status to be posted is in reply to.  This implicitly sets the in_reply_to_user_id attribute of the resulting status to the user ID of the message being replied to.  Invalid/missing status IDs will be ignored.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0update">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0update</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="updateStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="java.lang.String"/>
      <param name="inReplyToStatusId" type="long"/>
      <param name="location" type="twitter4j.GeoLocation"/>
      <doc>
      <![CDATA[Updates the user's status.
 <br>Statuses over 140 characters will be forcibly truncated.
 <br>This method calls http://api.twitter.com/1/statuses/update

 @param status            the text of your status update
 @param inReplyToStatusId The ID of an existing status that the status to be posted is in reply to.  This implicitly sets the in_reply_to_user_id attribute of the resulting status to the user ID of the message being replied to.  Invalid/missing status IDs will be ignored.
 @param location The location that this tweet refers to.
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0update">Twitter API Wiki / Twitter REST API Method: statuses update</a>]]>
      </doc>
    </method>
    <method name="destroyStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusId" type="long"/>
      <doc>
      <![CDATA[Destroys the status specified by the required ID parameter. asynchronously
 <br>This method calls http://api.twitter.com/1/statuses/destroy

 @param statusId String
 @since 1.1.2
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0destroy</a>]]>
      </doc>
    </method>
    <method name="retweetStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusId" type="long"/>
      <doc>
      <![CDATA[Retweets a tweet. Requires the id parameter of the tweet you are retweeting. Returns the original tweet with retweet details embedded.
 <br>This method calls http://api.twitter.com/1/statuses/retweet
 @param statusId The ID of the status to retweet.
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweet">Twitter API Wiki / Twitter REST API Method: statuses retweet</a>]]>
      </doc>
    </method>
    <method name="getRetweets"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusId" type="long"/>
      <doc>
      <![CDATA[Returns up to 100 of the first retweets of a given tweet.
 <br>This method calls http://api.twitter.com/1/statuses/retweets

 @param statusId The numerical ID of the tweet you want the retweets of.
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweets">Twitter API Wiki / Twitter REST API Method: statuses retweets</a>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.StatusMethodsAsync -->
  <!-- start interface twitter4j.api.TimelineMethods -->
  <interface name="TimelineMethods"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getPublicTimeline" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses from non-protected users who have set a custom user icon. <a href="http://groups.google.com/group/twitter-development-talk/browse_thread/thread/f881564598a947a7#">The public timeline is cached for 60 seconds</a> so requesting it more often than that is a waste of resources.
 <br>This method calls http://api.twitter.com/1/statuses/public_timeline

 @return list of statuses of the Public Timeline
 @throws twitter4j.TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-public_timeline">Twitter API Wiki / Twitter REST API Method: statuses public_timeline</a>]]>
      </doc>
    </method>
    <method name="getHomeTimeline" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses, including retweets, posted by the authenticating user and that user's friends. This is the equivalent of /timeline/home on the Web.
 <br>This method calls http://api.twitter.com/1/statuses/home_timeline

 @return list of the home Timeline
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-home_timeline">Twitter API Wiki / Twitter REST API Method: statuses home_timeline</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getHomeTimeline" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses, including retweets, posted by the authenticating user and that user's friends. This is the equivalent of /timeline/home on the Web.
 <br>This method calls http://api.twitter.com/1/statuses/home_timeline

 @param paging controls pagination. Supports since_id, max_id, count and page parameters.
 @return list of the home Timeline
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-home_timeline">Twitter API Wiki / Twitter REST API Method: statuses home_timeline</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getFriendsTimeline" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses posted in the last 24 hours from the authenticating1 user and that user's friends.
 It's also possible to request another user's friends_timeline via the id parameter below.<br>
 Note: Retweets will not appear in the friends_timeline for backwards compatibility. If you want retweets included use getHomeTimeline().
 <br>This method calls http://api.twitter.com/1/statuses/friends_timeline

 @return list of the Friends Timeline
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>]]>
      </doc>
    </method>
    <method name="getFriendsTimeline" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses posted in the last 24 hours from the specified userid.
 <br>This method calls http://api.twitter.com/1/statuses/friends_timeline

 @param paging controls pagination. Supports since_id, max_id, count and page parameters.
 @return list of the Friends Timeline
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>]]>
      </doc>
    </method>
    <method name="getUserTimeline" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the specified screen name.
 <br>This method calls http://api.twitter.com/1/statuses/user_timeline.json

 @param screenName specifies the screen name of the user for whom to return the user_timeline
 @param paging controls pagination. Supports since_id, max_id, count and page parameters.
 @return list of the user Timeline
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>]]>
      </doc>
    </method>
    <method name="getUserTimeline" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the specified screen name.
 <br>This method calls http://api.twitter.com/1/statuses/user_timeline.json

 @param userId specifies the ID of the user for whom to return the user_timeline
 @param paging controls pagination. Supports since_id, max_id, count and page parameters.
 @return list of the user Timeline
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>]]>
      </doc>
    </method>
    <method name="getUserTimeline" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the specified userid.
 <br>This method calls http://api.twitter.com/1/statuses/user_timeline

 @param screenName specifies the screen name of the user for whom to return the user_timeline
 @return the 20 most recent statuses posted in the last 24 hours from the user
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>]]>
      </doc>
    </method>
    <method name="getUserTimeline" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user_id" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the specified userid.
 <br>This method calls http://api.twitter.com/1/statuses/user_timeline

 @param user_id specifies the ID of the user for whom to return the user_timeline
 @return the 20 most recent statuses posted in the last 24 hours from the user
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="getUserTimeline" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the authenticating user.
 <br>This method calls http://api.twitter.com/1/statuses/user_timeline

 @return the 20 most recent statuses posted in the last 24 hours from the user
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>]]>
      </doc>
    </method>
    <method name="getUserTimeline" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the authenticating user.
 <br>This method calls http://api.twitter.com/1/statuses/user_timeline

 @param paging controls pagination. Supports since_id, max_id, count and page parameters.
 @return the 20 most recent statuses posted in the last 24 hours from the user
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="getMentions" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent mentions (status containing @username) for the authenticating user.
 <br>This method calls http://api.twitter.com/1/statuses/mentions

 @return the 20 most recent replies
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-mentions">Twitter API Wiki / Twitter REST API Method: statuses mentions</a>]]>
      </doc>
    </method>
    <method name="getMentions" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent mentions (status containing @username) for the authenticating user.
 <br>This method calls http://api.twitter.com/1/statuses/mentions

 @param paging controls pagination. Supports since_id, max_id, count and page parameters.
 @return the 20 most recent replies
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-mentions">Twitter API Wiki / Twitter REST API Method: statuses mentions</a>]]>
      </doc>
    </method>
    <method name="getRetweetedByMe" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent retweets posted by the authenticating user.
 <br>This method calls http://api.twitter.com/1/statuses/retweeted_by_me

 @return the 20 most recent retweets posted by the authenticating user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_by_me">Twitter API Wiki / Twitter REST API Method: statuses/retweeted_by_me</a>]]>
      </doc>
    </method>
    <method name="getRetweetedByMe" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent retweets posted by the authenticating user.
 <br>This method calls http://api.twitter.com/1/statuses/retweeted_by_me

 @param paging controls pagination. Supports since_id, max_id, count and page parameters.
 @return the 20 most recent retweets posted by the authenticating user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_by_me">Twitter API Wiki / Twitter REST API Method: statuses/retweeted_by_me</a>]]>
      </doc>
    </method>
    <method name="getRetweetedToMe" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent retweets posted by the authenticating user's friends.
 <br>This method calls http://api.twitter.com/1/statuses/retweeted_to_me

 @return the 20 most recent retweets posted by the authenticating user's friends.
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_to_me">Twitter API Wiki / Twitter REST API Method: statuses/retweeted_to_me</a>]]>
      </doc>
    </method>
    <method name="getRetweetedToMe" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent retweets posted by the authenticating user's friends.
 <br>This method calls http://api.twitter.com/1/statuses/retweeted_to_me

 @param paging controls pagination. Supports since_id, max_id, count and page parameters.
 @return the 20 most recent retweets posted by the authenticating user's friends.
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_to_me">Twitter API Wiki / Twitter REST API Method: statuses/retweeted_to_me</a>]]>
      </doc>
    </method>
    <method name="getRetweetsOfMe" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent tweets of the authenticated user that have been retweeted by others.
 <br>This method calls http://api.twitter.com/1/statuses/retweets_of_me

 @return the 20 most recent tweets of the authenticated user that have been retweeted by others.
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweets_of_me">Twitter API Wiki / Twitter REST API Method: statuses/retweets_of_me</a>]]>
      </doc>
    </method>
    <method name="getRetweetsOfMe" return="twitter4j.ResponseList&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent tweets of the authenticated user that have been retweeted by others.
 <br>This method calls http://api.twitter.com/1/statuses/retweets_of_me

 @param paging controls pagination. Supports since_id, max_id, count and page parameters.
 @return the 20 most recent tweets of the authenticated user that have been retweeted by others.
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweets_of_me">Twitter API Wiki / Twitter REST API Method: statuses/retweets_of_me</a>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.TimelineMethods -->
  <!-- start interface twitter4j.api.TimelineMethodsAsync -->
  <interface name="TimelineMethodsAsync"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getPublicTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the 20 most recent statuses from non-protected users who have set a custom user icon. <a href="http://groups.google.com/group/twitter-development-talk/browse_thread/thread/f881564598a947a7#">The public timeline is cached for 60 seconds</a> so requesting it more often than that is a waste of resources.
 <br>This method calls http://api.twitter.com/1/statuses/public_timeline
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-public_timeline">Twitter API Wiki / Twitter REST API Method: statuses public_timeline</a>]]>
      </doc>
    </method>
    <method name="getHomeTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the 20 most recent statuses, including retweets, posted by the authenticating user and that user's friends. This is the equivalent of /timeline/home on the Web.
 <br>This method calls http://api.twitter.com/1/statuses/home_timeline

 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-home_timeline">Twitter API Wiki / Twitter REST API Method: statuses home_timeline</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getHomeTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses, including retweets, posted by the authenticating user and that user's friends. This is the equivalent of /timeline/home on the Web.
 <br>This method calls http://api.twitter.com/1/statuses/home_timeline

 @param paging   controls pagination
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-home_timeline">Twitter API Wiki / Twitter REST API Method: statuses home_timeline</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getFriendsTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the 20 most recent statuses posted in the last 24 hours from the authenticating user and that user's friends.
  It's also possible to request another user's friends_timeline via the id parameter below.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>]]>
      </doc>
    </method>
    <method name="getFriendsTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses posted in the last 24 hours from the authenticating user and that user's friends.
  It's also possible to request another user's friends_timeline via the id parameter below.
 <br>This method calls http://api.twitter.com/1/statuses/friends_timeline
 @param paging controls pagination
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="getUserTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="paging" type="twitter4j.Paging"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the specified screenName.
 <br>This method calls http://api.twitter.com/1/statuses/user_timeline

 @param screenName Specifies the screen name of the user for whom to return the user_timeline.
 @param paging controls pagination
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-user_timeline">Twitter API Wiki / Twitter REST API Method: statuses user_timeline</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="getUserTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="paging" type="twitter4j.Paging"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the specified screenName.
 <br>This method calls http://api.twitter.com/1/statuses/user_timeline

 @param userId Specifies the ID of the user for whom to return the user_timeline.
 @param paging controls pagination
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-user_timeline">Twitter API Wiki / Twitter REST API Method: statuses user_timeline</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="getUserTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the specified user id.
 <br>This method calls http://api.twitter.com/1/statuses/user_timeline

 @param paging   controls pagination
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-user_timeline">Twitter API Wiki / Twitter REST API Method: statuses user_timeline</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="getUserTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the specified user id.
 <br>This method calls http://api.twitter.com/1/statuses/user_timeline

 @param screenName Specifies the screen name of the user for whom to return the user_timeline.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-user_timeline">Twitter API Wiki / Twitter REST API Method: statuses user_timeline</a>]]>
      </doc>
    </method>
    <method name="getUserTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the specified user id.
 <br>This method calls http://api.twitter.com/1/statuses/user_timeline

 @param userId   Specifies the ID of the user for whom to return the user_timeline.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-user_timeline">Twitter API Wiki / Twitter REST API Method: statuses user_timeline</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="getUserTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the authenticating user.
 <br>This method calls http://api.twitter.com/1/statuses/user_timeline
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-user_timeline">Twitter API Wiki / Twitter REST API Method: statuses user_timeline</a>]]>
      </doc>
    </method>
    <method name="getMentions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the 20 most recent replies (status updates prefixed with @username) to the authenticating user.  Replies are only available to the authenticating user; you can not request a list of replies to another user whether public or protected.
 <br>This method calls http://api.twitter.com/1/statuses/mentions
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-mentions">Twitter API Wiki / Twitter REST API Method: statuses mentions</a>]]>
      </doc>
    </method>
    <method name="getMentions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <doc>
      <![CDATA[Returns the 20 most recent replies (status updates prefixed with @username) to the authenticating user.  Replies are only available to the authenticating user; you can not request a list of replies to another user whether public or protected.
 <br>This method calls http://api.twitter.com/1/statuses/mentions
 @param paging controls pagination
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-mentions">Twitter API Wiki / Twitter REST API Method: statuses mentions</a>]]>
      </doc>
    </method>
    <method name="getRetweetedByMe"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the 20 most recent retweets posted by the authenticating user.
 <br>This method calls http://api.twitter.com/1/statuses/retweeted_by_me
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_by_me">Twitter API Wiki / Twitter REST API Method: statuses/retweeted_by_me</a>]]>
      </doc>
    </method>
    <method name="getRetweetedByMe"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <doc>
      <![CDATA[Returns the 20 most recent retweets posted by the authenticating user.
 <br>This method calls http://api.twitter.com/1/statuses/retweeted_by_me
 @param paging controls pagination
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_by_me">Twitter API Wiki / Twitter REST API Method: statuses/retweeted_by_me</a>]]>
      </doc>
    </method>
    <method name="getRetweetedToMe"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the 20 most recent retweets posted by the authenticating user's friends.
 <br>This method calls http://api.twitter.com/1/statuses/retweeted_to_me
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_to_me">Twitter API Wiki / Twitter REST API Method: statuses/retweeted_to_me</a>]]>
      </doc>
    </method>
    <method name="getRetweetedToMe"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <doc>
      <![CDATA[Returns the 20 most recent retweets posted by the authenticating user's friends.
 <br>This method calls http://api.twitter.com/1/statuses/retweeted_to_me
 @param paging controls pagination
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_to_me">Twitter API Wiki / Twitter REST API Method: statuses/retweeted_to_me</a>]]>
      </doc>
    </method>
    <method name="getRetweetsOfMe"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the 20 most recent tweets of the authenticated user that have been retweeted by others.
 <br>This method calls http://api.twitter.com/1/statuses/retweets_of_me
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweets_of_me">Twitter API Wiki / Twitter REST API Method: statuses/retweets_of_me</a>]]>
      </doc>
    </method>
    <method name="getRetweetsOfMe"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <doc>
      <![CDATA[Returns the 20 most recent tweets of the authenticated user that have been retweeted by others.
 <br>This method calls http://api.twitter.com/1/statuses/retweets_of_me
 @param paging controls pagination
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweets_of_me">Twitter API Wiki / Twitter REST API Method: statuses/retweets_of_me</a>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.TimelineMethodsAsync -->
  <!-- start interface twitter4j.api.UserMethods -->
  <interface name="UserMethods"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="showUser" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns extended information of a given user, specified by screen name as per the required id parameter below.  This information includes design settings, so third party developers can theme their widgets according to a given user's preferences.
 <br>This method calls http://api.twitter.com/1/users/show.json

 @param screenName the screen name of the user for whom to request the detail
 @return User
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-users%C2%A0show">Twitter API Wiki / Twitter REST API Method: users show</a>]]>
      </doc>
    </method>
    <method name="showUser" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns extended information of a given user, specified by ID.  This information includes design settings, so third party developers can theme their widgets according to a given user's preferences.
 <br>This method calls http://api.twitter.com/1/users/show

 @param userId the ID of the user for whom to request the detail
 @return User
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-users%C2%A0show">Twitter API Wiki / Twitter REST API Method: users show</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="searchUsers" return="twitter4j.ResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="query" type="java.lang.String"/>
      <param name="page" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Run a search for users similar to Find People button on Twitter.com; the same results returned by people search on Twitter.com will be returned by using this API (about being listed in the People Search).  It is only possible to retrieve the first 1000 matches from this API.
 <br>This method calls http://api.twitter.com/1/users/search.json

 @param query The query to run against people search. 
 @param page Specifies the page of results to retrieve. Number of statuses per page is fixed to 20.
 @return the list of Users matches the provided
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-users-search">Twitter API Wiki / Twitter REST API Method: users search</a>]]>
      </doc>
    </method>
    <method name="getFriendsStatuses" return="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the specified user's friends, each with current status inline.
 <br>This method calls http://api.twitter.com/1/statuses/friends

 @return the list of friends
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses friends</a>]]>
      </doc>
    </method>
    <method name="getFriendsStatuses" return="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the user's friends, each with current status inline.<br>
 <br>This method calls http://api.twitter.com/1/statuses/friends

 @param cursor Breaks the results into pages. A single page contains 100 users. This is recommended for users who are followed by many other users. Provide a value of  -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
 @return the list of friends
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.9
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses friends</a>]]>
      </doc>
    </method>
    <method name="getFriendsStatuses" return="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the specified user's friends, each with current status inline.
 This method automatically provides a value of cursor=-1 to begin paging.
 <br>This method calls http://api.twitter.com/1/statuses/friends

 @param screenName the screen name of the user for whom to request a list of friends
 @return the list of friends
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses friends</a>
 @since Twitter4J 2.0.9]]>
      </doc>
    </method>
    <method name="getFriendsStatuses" return="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the specified user's friends, each with current status inline.
 This method automatically provides a value of cursor=-1 to begin paging.
 <br>This method calls http://api.twitter.com/1/statuses/friends

 @param userId the ID of the user for whom to request a list of friends
 @return the list of friends
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses friends</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="getFriendsStatuses" return="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the specified user's friends, each with current status inline.
 <br>This method calls http://api.twitter.com/1/statuses/friends

 @param screenName the screen name of the user for whom to request a list of friends
 @param cursor Breaks the results into pages. A single page contains 100 users. This is recommended for users who are followed by many other users. Provide a value of  -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
 @return the list of friends
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.9
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses friends</a>]]>
      </doc>
    </method>
    <method name="getFriendsStatuses" return="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the specified user's friends, each with current status inline.
 <br>This method calls http://api.twitter.com/1/statuses/friends

 @param userId the ID of the user for whom to request a list of friends
 @param cursor Breaks the results into pages. A single page contains 100 users. This is recommended for users who are followed by many other users. Provide a value of  -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
 @return the list of friends
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses friends</a>]]>
      </doc>
    </method>
    <method name="getFollowersStatuses" return="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the authenticating user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).<br>
 This method automatically provides a value of cursor=-1 to begin paging.
 <br>This method calls http://api.twitter.com/1/statuses/followers

 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses followers</a>
 @since Twitter4J 2.0.9]]>
      </doc>
    </method>
    <method name="getFollowersStatuses" return="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the authenticating user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://api.twitter.com/1/statuses/followers

 @param cursor Breaks the results into pages. A single page contains 100 users. This is recommended for users who are followed by many other users. Provide a value of  -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.9
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses followers</a>]]>
      </doc>
    </method>
    <method name="getFollowersStatuses" return="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the specified user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://api.twitter.com/1/statuses/followers

 @param screenName The screen name of the user for whom to request a list of followers.
 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.9
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses followers</a>]]>
      </doc>
    </method>
    <method name="getFollowersStatuses" return="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the specified user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://api.twitter.com/1/statuses/followers

 @param userId The ID of the user for whom to request a list of followers.
 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses followers</a>]]>
      </doc>
    </method>
    <method name="getFollowersStatuses" return="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the specified user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://api.twitter.com/1/statuses/followers

 @param screenName The screen name of the user for whom to request a list of followers.
 @param cursor Breaks the results into pages. A single page contains 100 users. This is recommended for users who are followed by many other users. Provide a value of  -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.9
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses followers</a>]]>
      </doc>
    </method>
    <method name="getFollowersStatuses" return="twitter4j.PagableResponseList&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the specified user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://api.twitter.com/1/statuses/followers

 @param userId   The ID of the user for whom to request a list of followers.
 @param cursor Breaks the results into pages. A single page contains 100 users. This is recommended for users who are followed by many other users. Provide a value of  -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses followers</a>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.UserMethods -->
  <!-- start interface twitter4j.api.UserMethodsAsync -->
  <interface name="UserMethodsAsync"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="showUser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <doc>
      <![CDATA[Retrieves extended information of a given user, specified by screen name.  This information includes design settings, so third party developers can theme their widgets according to a given user's preferences.
 <br>This method calls http://api.twitter.com/1/users/show
 @param screenName the screen name of the user for whom to request the detail
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-users%C2%A0show">Twitter API Wiki / Twitter REST API Method: users%C2%A0show</a>]]>
      </doc>
    </method>
    <method name="showUser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <doc>
      <![CDATA[Retrieves extended information of a given user, specified by screen name.  This information includes design settings, so third party developers can theme their widgets according to a given user's preferences.
 <br>This method calls http://api.twitter.com/1/users/show
 @param userId the ID of the user for whom to request the detail
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-users%C2%A0show">Twitter API Wiki / Twitter REST API Method: users%C2%A0show</a>]]>
      </doc>
    </method>
    <method name="searchUsers"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="query" type="java.lang.String"/>
      <param name="page" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Run a search for users similar to Find People button on Twitter.com; the same results returned by people search on Twitter.com will be returned by using this API (about being listed in the People Search).  It is only possible to retrieve the first 1000 matches from this API.
 <br>This method calls http://api.twitter.com/1/users/search.json

 @param query The query to run against people search.
 @param page Specifies the page of results to retrieve. Number of statuses per page is fixed to 20.
 @throws twitter4j.TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-users-search">Twitter API Wiki / Twitter REST API Method: users search</a>]]>
      </doc>
    </method>
    <method name="getFriendsStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the specified user's friends, each with current status inline.
 <br>This method calls http://api.twitter.com/1/statuses/friends
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0friends</a>
 @since Twitter4J 2.0.9]]>
      </doc>
    </method>
    <method name="getFriendsStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cursor" type="long"/>
      <doc>
      <![CDATA[Returns the specified user's friends, each with current status inline.
 <br>This method calls http://api.twitter.com/1/statuses/friends
 @param cursor Breaks the results into pages. A single page contains 100 users. This is recommended for users who are followed by many other users. Provide a value of  -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
 @since Twitter4J 2.0.9
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0friends</a>]]>
      </doc>
    </method>
    <method name="getFriendsStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the specified user's friends, each with current status inline.
 <br>This method calls http://api.twitter.com/1/statuses/friends
 @param screenName the screen name of the user for whom to request a list of friends
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0friends</a>
 @since Twitter4J 2.0.9]]>
      </doc>
    </method>
    <method name="getFriendsStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <doc>
      <![CDATA[Returns the specified user's friends, each with current status inline.
 <br>This method calls http://api.twitter.com/1/statuses/friends
 @param userId the ID of the user for whom to request a list of friends
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0friends</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="getFriendsStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="cursor" type="long"/>
      <doc>
      <![CDATA[Returns the specified user's friends, each with current status inline.
 <br>This method calls http://api.twitter.com/1/statuses/friends
 @param screenName the screen name of the user for whom to request a list of friends
 @param cursor Breaks the results into pages. A single page contains 100 users. This is recommended for users who are followed by many other users. Provide a value of  -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0friends</a>
 @since Twitter4J 2.0.9]]>
      </doc>
    </method>
    <method name="getFriendsStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="cursor" type="long"/>
      <doc>
      <![CDATA[Returns the specified user's friends, each with current status inline.
 <br>This method calls http://api.twitter.com/1/statuses/friends
 @param userId the screen name of the user for whom to request a list of friends
 @param cursor Breaks the results into pages. A single page contains 100 users. This is recommended for users who are followed by many other users. Provide a value of  -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0friends</a>
 @since Twitter4J 2.1.0]]>
      </doc>
    </method>
    <method name="getFollowersStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the authenticating user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://api.twitter.com/1/statuses/followers
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0followers</a>
 @since Twitter4J 2.0.9]]>
      </doc>
    </method>
    <method name="getFollowersStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cursor" type="long"/>
      <doc>
      <![CDATA[Returns the authenticating user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://api.twitter.com/1/statuses/followers
 @param cursor Breaks the results into pages. A single page contains 100 users. This is recommended for users who are followed by many other users. Provide a value of  -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
 @since Twitter4J 2.0.9
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0followers</a>]]>
      </doc>
    </method>
    <method name="getFollowersStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the specified user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://api.twitter.com/1/statuses/followers

 @param screenName The screen name of the user for whom to request a list of followers.
 @since Twitter4J 2.0.9
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0followers</a>]]>
      </doc>
    </method>
    <method name="getFollowersStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <doc>
      <![CDATA[Returns the specified user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://api.twitter.com/1/statuses/followers

 @param userId The ID of the user for whom to request a list of followers.
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0followers</a>]]>
      </doc>
    </method>
    <method name="getFollowersStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="cursor" type="long"/>
      <doc>
      <![CDATA[Returns the specified user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://api.twitter.com/1/statuses/followers
 @param screenName The screen name of the user for whom to request a list of followers.
 @param cursor Breaks the results into pages. A single page contains 100 users. This is recommended for users who are followed by many other users. Provide a value of  -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
 @since Twitter4J 2.0.9
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0followers</a>]]>
      </doc>
    </method>
    <method name="getFollowersStatuses"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="cursor" type="long"/>
      <doc>
      <![CDATA[Returns the specified user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://api.twitter.com/1/statuses/followers
 @param userId The ID of the user for whom to request a list of followers.
 @param cursor Breaks the results into pages. A single page contains 100 users. This is recommended for users who are followed by many other users. Provide a value of  -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
 @since Twitter4J 2.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0followers</a>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Joern Huxhorn - jhuxhorn at googlemail.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.api.UserMethodsAsync -->
</package>
<package name="twitter4j.examples">
  <!-- start class twitter4j.examples.AsyncUpdate -->
  <class name="AsyncUpdate" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AsyncUpdate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
    </method>
    <doc>
    <![CDATA[<p>This is a code example of Twitter4J async API.<br>
 Usage: java twitter4j.examples.AsyncUpdate <i>TwitterID</i> <i>TwitterPassword</i> <i>text</i><br>
 </p>

 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.examples.AsyncUpdate -->
  <!-- start class twitter4j.examples.FeedMonitor -->
  <class name="FeedMonitor" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FeedMonitor" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
      <doc>
      <![CDATA[Main entry point for this application.<br>
 If config_file_path is not specified, feedmonitor.properties will be used.<br>
 Usage: java twitter4j.examples.FeedMonitor [config_file_path ..] [interval(min)]]]>
      </doc>
    </method>
    <doc>
    <![CDATA[<p>
 FeedMonitor is a simple feed monitoring application.<br>
 FeedMonitor monitors specified feeds and reports newly posted entries to the specified Twitter account every 10 minutes.<br>
 It is possible to specify multiple configuration files.<br>
 Numeric parameter will be recognized as monitoring interverval in minutes.<br>
 Usage: java twitter4j.examples.FeedMonitor [config_file_path ..] [interval(min)]<br>
 <br>
 If no configuration file path is specified, FeedMonitor will look for default configuration file name - &quot;feedmonitor.properties&quot;.<br>
 The configuration file format is Java standard properties file format with following properties:<br>
 feedurl : the feed URL you want to monitor<br>
 id : Twitter id<br>
 password : Twitter password<br>
 <br>
 <hr>
 e.g. a sample properties for monitoring CSS latest news every 10 minutes
 <pre style="border: solid 1px black;background-color:#AAF">
 feedurl=http://rss.cnn.com/rss/cnn_latest.rss
 id=YOUR_TWITTER_ID
 password=YOUR_TWITTER_PASSWORD</pre>
 </p>
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.examples.FeedMonitor -->
  <!-- start class twitter4j.examples.GetDirectMessages -->
  <class name="GetDirectMessages" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GetDirectMessages"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
      <doc>
      <![CDATA[Usage: java twitter4j.examples.GetDirectMessages ID Password
 @param args String[]]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Example application that gets recent direct messages from specified account.<br>
 Usage: java twitter4j.examples.GetDirectMessages ID Password
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.examples.GetDirectMessages -->
  <!-- start class twitter4j.examples.GetTimelines -->
  <class name="GetTimelines" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GetTimelines"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
      <doc>
      <![CDATA[Usage: java twitter4j.examples.GetTimelines ID Password
 @param args String[]]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Example application that gets public, user and friend timeline using specified account.<br>
 Usage: java twitter4j.examples.GetTimelines ID Password
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.examples.GetTimelines -->
  <!-- start class twitter4j.examples.OAuthUpdate -->
  <class name="OAuthUpdate" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="OAuthUpdate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
      <doc>
      <![CDATA[Usage: java -Dtwitter4j.oauth.consumerKey=[consumer key] -Dtwitter4j.oauth.consumerSecret=[consumer secret] twitter4j.examples.OAuthUpdate [message]
 @param args message]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Example application that uses OAuth method to acquire access to your account.<br>
 This application illustrates how to use OAuth method with Twitter4J.<br>
 Usage: java -Dtwitter4j.oauth.consumerKey=[consumer key] -Dtwitter4j.oauth.consumerSecret=[consumer secret] twitter4j.examples.OAuthUpdate [message]
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.examples.OAuthUpdate -->
  <!-- start class twitter4j.examples.SendDirectMessage -->
  <class name="SendDirectMessage" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SendDirectMessage"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
      <doc>
      <![CDATA[Usage: java twitter4j.examples.DirectMessage senderID senderPassword message recipientId
 @param args String[]]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Example application that sends a message to specified Twitter-er from specified account.<br>
 Usage: java twitter4j.examples.DirectMessage senderID senderPassword message recipientId
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.examples.SendDirectMessage -->
  <!-- start class twitter4j.examples.StreamingExample -->
  <class name="StreamingExample" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="twitter4j.StatusListener"/>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Main entry for this application.
 @param args String[] TwitterID TwitterPassword]]>
      </doc>
    </method>
    <method name="onStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="twitter4j.Status"/>
    </method>
    <method name="onDeletionNotice"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusDeletionNotice" type="twitter4j.StatusDeletionNotice"/>
    </method>
    <method name="onTrackLimitationNotice"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="numberOfLimitedStatuses" type="int"/>
    </method>
    <method name="onException"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ex" type="java.lang.Exception"/>
    </method>
    <doc>
    <![CDATA[<p>This is a code example of Twitter4J Streaming API support.<br>
 Usage: java twitter4j.examples.StreamingExample <i>TwitterID</i> <i>TwitterPassword</i><br>
 </p>
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.examples.StreamingExample -->
  <!-- start class twitter4j.examples.Update -->
  <class name="Update" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Update"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Main entry for this application.
 @param args String[] TwitterID TwitterPassword StatusString]]>
      </doc>
    </method>
    <doc>
    <![CDATA[<p>This is a code example of Twitter4J update API.<br>
 Usage: java twitter4j.examples.Update <i>TwitterID</i> <i>TwitterPassword</i> <i>text</i><br>
 </p>
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.examples.Update -->
</package>

</api>
