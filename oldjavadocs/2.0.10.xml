<?xml version="1.0" encoding="iso-8859-1" standalone="no"?>
<!-- Generated by the JDiff Javadoc doclet -->
<!-- (http://www.jdiff.org) -->
<!-- on Sun Jan 24 04:42:12 JST 2010 -->

<api
  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
  xsi:noNamespaceSchemaLocation='api.xsd'
  name="../2.0.10"
  jdversion="1.1.1">

<!--  Command line arguments =  -doclet jdiff.JDiff -docletpath /Users/yusukey/Downloads/jdiff-1.1.1/jdiff.jar:/Users/yusukey/Downloads/jdiff-1.1.1/xerces.jar -d /Users/yusukey/server/jboss-4.2.2.GA/server/default/deploy/twitter4j.war/oldjavadocs/2.0.10-core-2.1.0-SNAPSHOT -classpath /usr/share/ant/lib/ant-launcher.jar:/usr/share/ant/lib/ant-antlr.jar:/usr/share/ant/lib/ant-jai.jar:/usr/share/ant/lib/ant-jmf.jar:/usr/share/ant/lib/ant-junit.jar:/usr/share/ant/lib/ant-nodeps.jar:/usr/share/ant/lib/ant-swing.jar:/usr/share/ant/lib/ant-testutil.jar:/usr/share/ant/lib/ant-trax.jar:/usr/share/ant/lib/ant.jar:/usr/share/ant/lib/xercesImpl.jar:/usr/share/ant/lib/xml-apis.jar -sourcepath /Users/yusukey/server/jboss-4.2.2.GA/server/default/deploy/twitter4j.war/oldjavadocs/2.0.10-source -apiname ../2.0.10 -baseURI http://www.w3.org -apidir /Users/yusukey/server/jboss-4.2.2.GA/server/default/deploy/twitter4j.war/oldjavadocs/2.0.10-core-2.1.0-SNAPSHOT -source 1.5 -->
<package name="twitter4j">
  <!-- start class twitter4j.AsyncTwitter -->
  <class name="AsyncTwitter" extends="twitter4j.Twitter"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AsyncTwitter" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="AsyncTwitter" type="java.lang.String, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="searchAcync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="query" type="twitter4j.Query"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns tweets that match a specified query.
 <br>This method calls http://search.twitter.com/search
 
 @param query - the search condition
 @param listener a listener object that receives the response
 @since Twitter4J 1.1.7
 @see <a href="http://apiwiki.twitter.com/Search-API-Documentation">Twitter API / Search API Documentation</a>
 @see <a href="http://search.twitter.com/operators">Twitter API / Search Operators</a>]]>
      </doc>
    </method>
    <method name="getTrendsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the top ten topics that are currently trending on Twitter.  The response includes the time of the request, the name of each trend, and the url to the <a href="http://search.twitter.com/">Twitter Search</a> results page for that topic.
 <br>This method calls http://search.twitter.com/trends
 @since Twitter4J 2.0.2
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends">Twitter Search API Method: trends</a>]]>
      </doc>
    </method>
    <method name="getCurrentTrendsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the current top 10 trending topics on Twitter.  The response includes the time of the request, the name of each trending topic, and query used on <a href="http://search.twitter.com/">Twitter Search</a> results page for that topic.
 <br>This method calls http://search.twitter.com/trends/current
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.2
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends">Twitter Search API Method: trends</a>]]>
      </doc>
    </method>
    <method name="getCurrentTrendsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="excludeHashTags" type="boolean"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the current top 10 trending topics on Twitter.  The response includes the time of the request, the name of each trending topic, and query used on <a href="http://search.twitter.com/">Twitter Search</a> results page for that topic.
 <br>This method calls http://search.twitter.com/trends/current
 @param excludeHashTags Setting this to true will remove all hashtags from the trends list.
 @since Twitter4J 2.0.2
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends">Twitter Search API Method: trends</a>]]>
      </doc>
    </method>
    <method name="getDailyTrendsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the top 20 trending topics for each hour in a given day.
 <br>This method calls http://search.twitter.com/trends/daily
 @since Twitter4J 2.0.2
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-daily">Twitter Search API Method: trends daily</a>]]>
      </doc>
    </method>
    <method name="getDailyTrendsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="date" type="java.util.Date"/>
      <param name="excludeHashTags" type="boolean"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the top 20 trending topics for each hour in a given day.
 <br>This method calls http://search.twitter.com/trends/daily
 @param date Permits specifying a start date for the report.
 @param excludeHashTags Setting this to true will remove all hashtags from the trends list.
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.2
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-daily">Twitter Search API Method: trends daily</a>]]>
      </doc>
    </method>
    <method name="getWeeklyTrendsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the top 30 trending topics for each day in a given week.
 <br>This method calls http://search.twitter.com/trends/weekly
 @since Twitter4J 2.0.2
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-weekly">Twitter Search API Method: trends weekly</a>]]>
      </doc>
    </method>
    <method name="getWeeklyTrendsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="date" type="java.util.Date"/>
      <param name="excludeHashTags" type="boolean"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the top 30 trending topics for each day in a given week.
 <br>This method calls http://search.twitter.com/trends/weekly
 @param date Permits specifying a start date for the report.
 @param excludeHashTags Setting this to true will remove all hashtags from the trends list.
 @since Twitter4J 2.0.2
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-weekly">Twitter Search API Method: trends weekly</a>]]>
      </doc>
    </method>
    <method name="getPublicTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[<br>This method calls http://twitter.com/statuses/public_timeline
 Returns the 20 most recent statuses from non-protected users who have set a custom user icon.
 <br>This method calls http://twitter.com/statuses/public_timeline
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-public_timeline">Twitter API Wiki / Twitter REST API Method: statuses public_timeline</a>]]>
      </doc>
    </method>
    <method name="getPublicTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getpublicTimelineAsync(long sinceID, TwitterListener listener)">
      <param name="sinceID" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns only public statuses with an ID greater than (that is, more recent than) the specified ID.
 <br>This method calls http://twitter.com/statuses/public_timeline
 @param sinceID String
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-public_timeline">Twitter API Wiki / Twitter REST API Method: statuses public_timeline</a>
 @deprecated use getpublicTimelineAsync(long sinceID, TwitterListener listener)]]>
      </doc>
    </method>
    <method name="getPublicTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sinceID" type="long"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns only public statuses with an ID greater than (that is, more recent than) the specified ID.
 <br>This method calls http://twitter.com/statuses/public_timeline
 @param sinceID String
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-public_timeline">Twitter API Wiki / Twitter REST API Method: statuses public_timeline</a>]]>
      </doc>
    </method>
    <method name="getHomeTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses, including retweets, posted by the authenticating user and that user's friends. This is the equivalent of /timeline/home on the Web.
 <br>This method calls http://twitter.com/statuses/home_timeline
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-home_timeline">Twitter API Wiki / Twitter REST API Method: statuses home_timeline</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getHomeTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses, including retweets, posted by the authenticating user and that user's friends. This is the equivalent of /timeline/home on the Web.
 <br>This method calls http://twitter.com/statuses/home_timeline
 @param paging controls pagination
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-home_timeline">Twitter API Wiki / Twitter REST API Method: statuses home_timeline</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getFriendsTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses posted in the last 24 hours from the authenticating user and that user's friends.
  It's also possible to request another user's friends_timeline via the id parameter below.
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>]]>
      </doc>
    </method>
    <method name="getFriendsTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses posted in the last 24 hours from the authenticating user and that user's friends.
  It's also possible to request another user's friends_timeline via the id parameter below.
 <br>This method calls http://twitter.com/statuses/friends_timeline
 @param paging controls pagination
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="getFriendsTimelineByPageAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getFriendsTimelineAsync(Paging paging, TwitterListener listener) instead">
      <param name="page" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses posted in the last 24 hours from the authenticating user.
 <br>This method calls http://twitter.com/statuses/friends_timeline
 @param page int
 @param listener a listener object that receives the response
 @deprecated Use getFriendsTimelineAsync(Paging paging, TwitterListener listener) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>]]>
      </doc>
    </method>
    <method name="getFriendsTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getFriendsTimelineAsync(Paging paging, TwitterListener listener) instead">
      <param name="page" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses posted in the last 24 hours from the authenticating user.
 <br>This method calls http://twitter.com/statuses/friends_timeline
 @param page int
 @param listener a listener object that receives the response
 @since Twitter4J 1.1.8
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @deprecated Use getFriendsTimelineAsync(Paging paging, TwitterListener listener) instead]]>
      </doc>
    </method>
    <method name="getFriendsTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getFriendsTimelineAsync(Paging paging, TwitterListener listener) instead">
      <param name="sinceId" type="long"/>
      <param name="page" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses posted in the last 24 hours from the authenticating user.
 <br>This method calls http://twitter.com/statuses/friends_timeline
 @param sinceId Returns only statuses with an ID greater than (that is, more recent than) the specified ID
 @param page int
 @param listener a listener object that receives the response
 @since Twitter4J 1.1.8
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @deprecated Use getFriendsTimelineAsync(Paging paging, TwitterListener listener) instead]]>
      </doc>
    </method>
    <method name="getFriendsTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="The Twitter API does not support this method anymore.">
      <param name="id" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses posted in the last 24 hours from the specified user id.
 <br>This method calls http://twitter.com/statuses/friends_timeline
 @param id String user ID
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @deprecated The Twitter API does not support this method anymore.]]>
      </doc>
    </method>
    <method name="getFriendsTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="The Twitter API does not support this method anymore.">
      <param name="id" type="java.lang.String"/>
      <param name="paging" type="twitter4j.Paging"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses posted in the last 24 hours from the specified user id.
 <br>This method calls http://twitter.com/statuses/friends_timeline
 @param id String user ID
 @param paging controls pagination
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @since Twitter4J 2.0.1
 @deprecated The Twitter API does not support this method anymore.]]>
      </doc>
    </method>
    <method name="getFriendsTimelineByPageAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="The Twitter API does not support this method anymore.">
      <param name="id" type="java.lang.String"/>
      <param name="page" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses posted in the last 24 hours from the specified user id.
 <br>This method calls http://twitter.com/statuses/friends_timeline
 @param id String user ID
 @param page int
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @deprecated The Twitter API does not support this method anymore.]]>
      </doc>
    </method>
    <method name="getFriendsTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="The Twitter API does not support this method anymore.">
      <param name="id" type="java.lang.String"/>
      <param name="page" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses posted in the last 24 hours from the specified user id.
 <br>This method calls http://twitter.com/statuses/friends_timeline
 @param id String user ID
 @param page int
 @param listener a listener object that receives the response
 @since Twitter4J 1.1.8
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @deprecated The Twitter API does not support this method anymore.]]>
      </doc>
    </method>
    <method name="getFriendsTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="The Twitter API does not support this method anymore.">
      <param name="sinceId" type="long"/>
      <param name="id" type="java.lang.String"/>
      <param name="page" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses posted in the last 24 hours from the authenticating user.
 <br>This method calls http://twitter.com/statuses/friends_timeline
 @param sinceId Returns only statuses with an ID greater than (that is, more recent than) the specified ID
 @param id   specifies the ID or screen name of the user for whom to return the friends_timeline
 @param page the number of page
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @deprecated The Twitter API does not support this method anymore.]]>
      </doc>
    </method>
    <method name="getFriendsTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getFriendsTimelineAsync(String id, Paging paging, TwitterListener listener) instead">
      <param name="since" type="java.util.Date"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses posted in the last 24 hours from the authenticating user.
 <br>This method calls http://twitter.com/statuses/friends_timeline
 @param since Date
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @deprecated Use getFriendsTimelineAsync(String id, Paging paging, TwitterListener listener) instead]]>
      </doc>
    </method>
    <method name="getFriendsTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getFriendsTimelineAsync(Paging paging, TwitterListener listener) instead">
      <param name="sinceId" type="long"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses posted in the last 24 hours from the authenticating user.
 <br>This method calls http://twitter.com/statuses/friends_timeline
 @param sinceId Returns only statuses with an ID greater than (that is, more recent than) the specified ID
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @deprecated Use getFriendsTimelineAsync(Paging paging, TwitterListener listener) instead]]>
      </doc>
    </method>
    <method name="getFriendsTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="The Twitter API does not support this method anymore.">
      <param name="id" type="java.lang.String"/>
      <param name="since" type="java.util.Date"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the specified user id.
 <br>This method calls http://twitter.com/statuses/friends_timeline
 @param id String user ID
 @param since Date
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @deprecated The Twitter API does not support this method anymore.]]>
      </doc>
    </method>
    <method name="getFriendsTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="The Twitter API does not support this method anymore.">
      <param name="id" type="java.lang.String"/>
      <param name="sinceId" type="long"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the specified user id.
 <br>This method calls http://twitter.com/statuses/friends_timeline
 @param sinceId Returns only statuses with an ID greater than (that is, more recent than) the specified ID
 @param listener a listener object that receives the response
 @param id String user ID
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @deprecated The Twitter API does not support this method anymore.]]>
      </doc>
    </method>
    <method name="getUserTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="using long sinceId is suggested.">
      <param name="id" type="java.lang.String"/>
      <param name="count" type="int"/>
      <param name="since" type="java.util.Date"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the specified user id.
 <br>This method calls http://twitter.com/statuses/user_timeline
 @param id String
 @param count int
 @param since Date
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-user_timeline">Twitter API Wiki / Twitter REST API Method: statuses user_timeline</a>
 @deprecated using long sinceId is suggested.]]>
      </doc>
    </method>
    <method name="getUserTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="paging" type="twitter4j.Paging"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the specified user id.
 <br>This method calls http://twitter.com/statuses/user_timeline

 @param id Specifies the ID or screen name of the user for whom to return the user_timeline.
 @param paging controls pagination
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-user_timeline">Twitter API Wiki / Twitter REST API Method: statuses user_timeline</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="getUserTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getUserTimelineAsync(String id, Paging paging, TwitterListener listener) instead">
      <param name="id" type="java.lang.String"/>
      <param name="page" type="int"/>
      <param name="sinceId" type="long"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the specified user id.
 <br>This method calls http://twitter.com/statuses/user_timeline

 @param id       String
 @param page    int
 @param sinceId  Returns only statuses with an ID greater than (that is, more recent than) the specified ID
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-user_timeline">Twitter API Wiki / Twitter REST API Method: statuses user_timeline</a>
 @since Twitter4J 2.0.0
 @deprecated Use getUserTimelineAsync(String id, Paging paging, TwitterListener listener) instead]]>
      </doc>
    </method>
    <method name="getUserTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="using long sinceId is suggested.">
      <param name="id" type="java.lang.String"/>
      <param name="since" type="java.util.Date"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the specified user id.
 <br>This method calls http://twitter.com/statuses/user_timeline
 @param id String
 @param since Date
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-user_timeline">Twitter API Wiki / Twitter REST API Method: statuses user_timeline</a>
 @deprecated using long sinceId is suggested.]]>
      </doc>
    </method>
    <method name="getUserTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getUserTimelineAsync(String id, Paging paging, TwitterListener listener) instead">
      <param name="id" type="java.lang.String"/>
      <param name="count" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the specified user id.
 <br>This method calls http://twitter.com/statuses/user_timeline
 @param id String
 @param count int
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-user_timeline">Twitter API Wiki / Twitter REST API Method: statuses user_timeline</a>
 @deprecated Use getUserTimelineAsync(String id, Paging paging, TwitterListener listener) instead]]>
      </doc>
    </method>
    <method name="getUserTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="using long sinceId is suggested.">
      <param name="count" type="int"/>
      <param name="since" type="java.util.Date"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the authenticating user.
 <br>This method calls http://twitter.com/statuses/user_timeline
 @param count int
 @param since Date
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-user_timeline">Twitter API Wiki / Twitter REST API Method: statuses user_timeline</a>
 @deprecated using long sinceId is suggested.]]>
      </doc>
    </method>
    <method name="getUserTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the specified user id.
 <br>This method calls http://twitter.com/statuses/user_timeline

 @param paging   controls pagination
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-user_timeline">Twitter API Wiki / Twitter REST API Method: statuses user_timeline</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="getUserTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getUserTimelineAsync(Paging paging, TwitterListener listener) instead">
      <param name="count" type="int"/>
      <param name="sinceId" type="long"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the authenticating user.
 <br>This method calls http://twitter.com/statuses/user_timeline

 @param count    int
 @param sinceId  Returns only statuses with an ID greater than (that is, more recent than) the specified ID
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-user_timeline">Twitter API Wiki / Twitter REST API Method: statuses user_timeline</a>
 @since Twitter4J 2.0.0
 @deprecated Use getUserTimelineAsync(Paging paging, TwitterListener listener) instead]]>
      </doc>
    </method>
    <method name="getUserTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the specified user id.
 <br>This method calls http://twitter.com/statuses/user_timeline
 @param id String
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-user_timeline">Twitter API Wiki / Twitter REST API Method: statuses user_timeline</a>]]>
      </doc>
    </method>
    <method name="getUserTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getUserTimelineAsync(String id, Paging paging, TwitterListener listener) instead">
      <param name="id" type="java.lang.String"/>
      <param name="sinceId" type="long"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the specified user id.
 <br>This method calls http://twitter.com/statuses/user_timeline
 @param id String
 @param sinceId Returns only statuses with an ID greater than (that is, more recent than) the specified ID
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-user_timeline">Twitter API Wiki / Twitter REST API Method: statuses user_timeline</a>
 @since Twitter4J 2.0.0
 @deprecated Use getUserTimelineAsync(String id, Paging paging, TwitterListener listener) instead]]>
      </doc>
    </method>
    <method name="getUserTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the authenticating user.
 <br>This method calls http://twitter.com/statuses/user_timeline
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-user_timeline">Twitter API Wiki / Twitter REST API Method: statuses user_timeline</a>]]>
      </doc>
    </method>
    <method name="getUserTimelineAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getUserTimelineAsync(Paging paging, TwitterListener listener) instead">
      <param name="sinceId" type="long"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the authenticating user.
 <br>This method calls http://twitter.com/statuses/user_timeline
 @param sinceId Returns only statuses with an ID greater than (that is, more recent than) the specified ID
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-user_timeline">Twitter API Wiki / Twitter REST API Method: statuses user_timeline</a>
 @since Twitter4J 2.0.0
 @deprecated Use getUserTimelineAsync(Paging paging, TwitterListener listener) instead]]>
      </doc>
    </method>
    <method name="getRepliesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getMentionsAsync(TwitterListener listener) instead">
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent replies (status updates prefixed with @username) to the authenticating user.  Replies are only available to the authenticating user; you can not request a list of replies to another user whether public or protected.
 <br>This method calls http://twitter.com/statuses/mentions
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-mentions">Twitter API Wiki / Twitter REST API Method: statuses mentions</a>
 @deprecated Use getMentionsAsync(TwitterListener listener) instead]]>
      </doc>
    </method>
    <method name="getMentionsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent replies (status updates prefixed with @username) to the authenticating user.  Replies are only available to the authenticating user; you can not request a list of replies to another user whether public or protected.
 <br>This method calls http://twitter.com/statuses/mentions
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-mentions">Twitter API Wiki / Twitter REST API Method: statuses mentions</a>]]>
      </doc>
    </method>
    <method name="getMentionsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent replies (status updates prefixed with @username) to the authenticating user.  Replies are only available to the authenticating user; you can not request a list of replies to another user whether public or protected.
 <br>This method calls http://twitter.com/statuses/mentions
 @param paging controls pagination
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-mentions">Twitter API Wiki / Twitter REST API Method: statuses mentions</a>]]>
      </doc>
    </method>
    <method name="getRetweetedByMeAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent retweets posted by the authenticating user.
 <br>This method calls http://twitter.com/statuses/retweeted_by_me
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_by_me">Twitter API Wiki / Twitter REST API Method: statuses/retweeted_by_me</a>]]>
      </doc>
    </method>
    <method name="getRetweetedByMeAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent retweets posted by the authenticating user.
 <br>This method calls http://twitter.com/statuses/retweeted_by_me
 @param paging controls pagination
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_by_me">Twitter API Wiki / Twitter REST API Method: statuses/retweeted_by_me</a>]]>
      </doc>
    </method>
    <method name="getRetweetedToMeAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent retweets posted by the authenticating user's friends.
 <br>This method calls http://twitter.com/statuses/retweeted_to_me
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_to_me">Twitter API Wiki / Twitter REST API Method: statuses/retweeted_to_me</a>]]>
      </doc>
    </method>
    <method name="getRetweetedToMeAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent retweets posted by the authenticating user's friends.
 <br>This method calls http://twitter.com/statuses/retweeted_to_me
 @param paging controls pagination
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_to_me">Twitter API Wiki / Twitter REST API Method: statuses/retweeted_to_me</a>]]>
      </doc>
    </method>
    <method name="getRetweetsOfMeAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent tweets of the authenticated user that have been retweeted by others.
 <br>This method calls http://twitter.com/statuses/retweets_of_me
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweets_of_me">Twitter API Wiki / Twitter REST API Method: statuses/retweets_of_me</a>]]>
      </doc>
    </method>
    <method name="getRetweetsOfMeAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent tweets of the authenticated user that have been retweeted by others.
 <br>This method calls http://twitter.com/statuses/retweets_of_me
 @param paging controls pagination
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweets_of_me">Twitter API Wiki / Twitter REST API Method: statuses/retweets_of_me</a>]]>
      </doc>
    </method>
    <method name="getRepliesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getMentionsAsync(Paging paging, TwitterListener listener) instead">
      <param name="sinceId" type="long"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent replies (status updates prefixed with @username) to the authenticating user.  Replies are only available to the authenticating user; you can not request a list of replies to another user whether public or protected.
 <br>This method calls http://twitter.com/statuses/mentions
 @param sinceId Returns only statuses with an ID greater than (that is, more recent than) the specified ID
 @param listener a listener object that receives the response
 @since Twitter4J 1.1.8
 @deprecated Use getMentionsAsync(Paging paging, TwitterListener listener) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-mentions">Twitter API Wiki / Twitter REST API Method: statuses mentions</a>]]>
      </doc>
    </method>
    <method name="getRepliesByPageAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getMentionsAsync(Paging paging, TwitterListener listener) instead">
      <param name="page" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent replies (status updates prefixed with @username) to the authenticating user.  Replies are only available to the authenticating user; you can not request a list of replies to another user whether public or protected.
 @param page int
 @param listener a listener object that receives the response
 @deprecated Use getMentionsAsync(Paging paging, TwitterListener listener) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-mentions">Twitter API Wiki / Twitter REST API Method: statuses mentions</a>]]>
      </doc>
    </method>
    <method name="getRepliesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getMentionsAsync(Paging paging, TwitterListener listener) instead">
      <param name="page" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent replies (status updates prefixed with @username) to the authenticating user.  Replies are only available to the authenticating user; you can not request a list of replies to another user whether public or protected.
 <br>This method calls http://twitter.com/statuses/mentions
 @param page int
 @param listener a listener object that receives the response
 @since Twitter4J 1.1.8
 @deprecated Use getMentionsAsync(Paging paging, TwitterListener listener) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-mentions">Twitter API Wiki / Twitter REST API Method: statuses mentions</a>]]>
      </doc>
    </method>
    <method name="getRepliesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getMentionsAsync(Paging paging, TwitterListener listener) instead">
      <param name="sinceId" type="long"/>
      <param name="page" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent replies (status updates prefixed with @username) to the authenticating user.  Replies are only available to the authenticating user; you can not request a list of replies to another user whether public or protected.
 <br>This method calls http://twitter.com/statuses/mentions
 @param sinceId Returns only statuses with an ID greater than (that is, more recent than) the specified ID
 @param page int
 @param listener a listener object that receives the response
 @since Twitter4J 1.1.8
 @deprecated Use getMentionsAsync(Paging paging, TwitterListener listener) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses-mentions">Twitter API Wiki / Twitter REST API Method: statuses mentions</a>]]>
      </doc>
    </method>
    <method name="showAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use showAsync(long id) instead.">
      <param name="id" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns a single status, specified by the id parameter. The status's author will be returned inline.
 <br>This method calls http://twitter.com/statuses/show
 @param id int
 @param listener a listener object that receives the response
 @deprecated Use showAsync(long id) instead.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0show">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0show</a>]]>
      </doc>
    </method>
    <method name="showAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use showStatusAsync(long id, TwitterListener listener) instead">
      <param name="id" type="long"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns a single status, specified by the id parameter. The status's author will be returned inline.
 <br>This method calls http://twitter.com/statuses/show
 @param id int
 @param listener a listener object that receives the response
 @since 1.1.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0show">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0show</a>
 @deprecated Use showStatusAsync(long id, TwitterListener listener) instead]]>
      </doc>
    </method>
    <method name="showStatusAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="long"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns a single status, specified by the id parameter. The status's author will be returned inline.
 <br>This method calls http://twitter.com/statuses/show
 @param id int
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0show">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0show</a>]]>
      </doc>
    </method>
    <method name="updateAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use updateStatusAsync(String status, TwitterListener listener) instead">
      <param name="status" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Updates the user's status asynchronously
 <br>This method calls http://twitter.com/statuses/update

 @param status String
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0update">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0update</a>
 @deprecated Use updateStatusAsync(String status, TwitterListener listener) instead]]>
      </doc>
    </method>
    <method name="updateAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use updateStatusAsync(String status) instead">
      <param name="status" type="java.lang.String"/>
      <doc>
      <![CDATA[Updates the user's status asynchronously
 <br>This method calls http://twitter.com/statuses/update

 @param status String
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0update">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0update</a>
 @deprecated Use updateStatusAsync(String status) instead]]>
      </doc>
    </method>
    <method name="updateStatusAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Updates the user's status asynchronously
 <br>This method calls http://twitter.com/statuses/update

 @param status String
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0update">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0update</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="updateStatusAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="java.lang.String"/>
      <doc>
      <![CDATA[Updates the user's status asynchronously
 <br>This method calls http://twitter.com/statuses/update

 @param status String
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0update">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0update</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="updateAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use updateStatusAsync(String status, long inReplyToStatusId, TwitterListener listener) instead">
      <param name="status" type="java.lang.String"/>
      <param name="inReplyToStatusId" type="long"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Updates the user's status asynchronously
 <br>This method calls http://twitter.com/statuses/update

 @param status String
 @param inReplyToStatusId The ID of an existing status that the status to be posted is in reply to.  This implicitly sets the in_reply_to_user_id attribute of the resulting status to the user ID of the message being replied to.  Invalid/missing status IDs will be ignored.
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0update">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0update</a>
 @since Twitter4J 1.1.6
 @deprecated Use updateStatusAsync(String status, long inReplyToStatusId, TwitterListener listener) instead]]>
      </doc>
    </method>
    <method name="updateAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use updateStatusAsync(String status, long inReplyToStatusId) instead">
      <param name="status" type="java.lang.String"/>
      <param name="inReplyToStatusId" type="long"/>
      <doc>
      <![CDATA[Updates the user's status asynchronously
 <br>This method calls http://twitter.com/statuses/update

 @param status String
 @param inReplyToStatusId The ID of an existing status that the status to be posted is in reply to.  This implicitly sets the in_reply_to_user_id attribute of the resulting status to the user ID of the message being replied to.  Invalid/missing status IDs will be ignored.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0update">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0update</a>
 @since Twitter4J 1.1.6
 @deprecated Use updateStatusAsync(String status, long inReplyToStatusId) instead]]>
      </doc>
    </method>
    <method name="updateStatusAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="java.lang.String"/>
      <param name="inReplyToStatusId" type="long"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Updates the user's status asynchronously
 <br>This method calls http://twitter.com/statuses/update

 @param status String
 @param inReplyToStatusId The ID of an existing status that the status to be posted is in reply to.  This implicitly sets the in_reply_to_user_id attribute of the resulting status to the user ID of the message being replied to.  Invalid/missing status IDs will be ignored.
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0update">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0update</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="updateStatusAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="java.lang.String"/>
      <param name="inReplyToStatusId" type="long"/>
      <doc>
      <![CDATA[Updates the user's status asynchronously
 <br>This method calls http://twitter.com/statuses/update

 @param status String
 @param inReplyToStatusId The ID of an existing status that the status to be posted is in reply to.  This implicitly sets the in_reply_to_user_id attribute of the resulting status to the user ID of the message being replied to.  Invalid/missing status IDs will be ignored.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0update">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0update</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="destoryStatusAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use destroyStatusAsync(long statuId) instead.">
      <param name="statusId" type="int"/>
      <doc>
      <![CDATA[Destroys the status specified by the required ID parameter. asynchronously
 <br>This method calls http://twitter.com/statuses/destroy
 @param statusId String
 @since 1.0.5
 @deprecated Use destroyStatusAsync(long statuId) instead.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0destroy</a>]]>
      </doc>
    </method>
    <method name="destroyStatusAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use destroyStatusAsync(long statuId) instead.">
      <param name="statusId" type="int"/>
      <doc>
      <![CDATA[Destroys the status specified by the required ID parameter. asynchronously
 <br>This method calls http://twitter.com/statuses/destroy
 @param statusId String
 @since 1.1.2
 @deprecated Use destroyStatusAsync(long statuId) instead.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0destroy</a>]]>
      </doc>
    </method>
    <method name="destroyStatusAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusId" type="long"/>
      <doc>
      <![CDATA[Destroys the status specified by the required ID parameter. asynchronously
 <br>This method calls http://twitter.com/statuses/destroy

 @param statusId String
 @since 1.1.2
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0destroy</a>]]>
      </doc>
    </method>
    <method name="destoryStatusAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use destroyStatusAsync(long statuId) instead.">
      <param name="statusId" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Destroys the status specified by the required ID parameter. asynchronously
 <br>This method calls http://twitter.com/statuses/destroy
 @param statusId String
 @param listener a listener object that receives the response
 @since 1.0.6
 @deprecated Use destroyStatusAsync(long statuId) instead.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0destroy</a>]]>
      </doc>
    </method>
    <method name="destroyStatusAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use destroyStatusAsync(long statuId) instead.">
      <param name="statusId" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Destroys the status specified by the required ID parameter. asynchronously
 <br>This method calls http://twitter.com/statuses/destroy
 @param statusId String
 @param listener a listener object that receives the response
 @since 1.1.2
 @deprecated Use destroyStatusAsync(long statuId) instead.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0destroy</a>]]>
      </doc>
    </method>
    <method name="destroyStatusAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusId" type="long"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Destroys the status specified by the required ID parameter. asynchronously
 <br>This method calls http://twitter.com/statuses/destroy

 @param statusId String
 @param listener a listener object that receives the response
 @since 1.1.2
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0destroy</a>]]>
      </doc>
    </method>
    <method name="retweetStatusAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusId" type="long"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Retweets a tweet. Requires the id parameter of the tweet you are retweeting. Returns the original tweet with retweet details embedded.
 <br>This method calls http://twitter.com/statuses/retweet
 @param statusId The ID of the status to retweet.
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweet">Twitter API Wiki / Twitter REST API Method: statuses retweet</a>]]>
      </doc>
    </method>
    <method name="retweetStatusAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusId" type="long"/>
      <doc>
      <![CDATA[Retweets a tweet. Requires the id parameter of the tweet you are retweeting. Returns the original tweet with retweet details embedded.
 <br>This method calls http://twitter.com/statuses/retweet
 @param statusId The ID of the status to retweet.
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweet">Twitter API Wiki / Twitter REST API Method: statuses retweet</a>]]>
      </doc>
    </method>
    <method name="getUserDetailAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use showUserAsync(id,listener) instead">
      <param name="id" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Retrieves extended information of a given user, specified by ID or screen name as per the required id parameter below.  This information includes design settings, so third party developers can theme their widgets according to a given user's preferences.
 <br>This method calls http://twitter.com/users/show
 @param id String
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-users%C2%A0show">Twitter API Wiki / Twitter REST API Method: users%C2%A0show</a>
 @deprecated use showUserAsync(id,listener) instead]]>
      </doc>
    </method>
    <method name="showUserAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Retrieves extended information of a given user, specified by ID or screen name as per the required id parameter below.  This information includes design settings, so third party developers can theme their widgets according to a given user's preferences.
 <br>This method calls http://twitter.com/users/show
 @param id String
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-users%C2%A0show">Twitter API Wiki / Twitter REST API Method: users%C2%A0show</a>
 @since Twitter4J 2.0.9]]>
      </doc>
    </method>
    <method name="getFriendsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getFriendsStatusesAsync(listener)">
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the specified user's friends, each with current status inline.
 <br>This method calls http://twitter.com/statuses/friends
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0friends</a>
 @deprecated use getFriendsStatusesAsync(listener)]]>
      </doc>
    </method>
    <method name="getFriendsStatusesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the specified user's friends, each with current status inline.
 <br>This method calls http://twitter.com/statuses/friends
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0friends</a>
 @since Twitter4J 2.0.9]]>
      </doc>
    </method>
    <method name="getFriendsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getFriendsStatusesAsync(paging,listener) instead">
      <param name="paging" type="twitter4j.Paging"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the specified user's friends, each with current status inline.
 <br>This method calls http://twitter.com/statuses/friends
 @param paging controls pagination
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0friends</a>
 @deprecated use getFriendsStatusesAsync(paging,listener) instead]]>
      </doc>
    </method>
    <method name="getFriendsStatusesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the specified user's friends, each with current status inline.
 <br>This method calls http://twitter.com/statuses/friends
 @param paging controls pagination
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.9
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0friends</a>]]>
      </doc>
    </method>
    <method name="getFriendsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getFriendsStatusesAsync(Paging paging,TwitterListener listener) instead">
      <param name="page" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the specified user's friends, each with current status inline.
 <br>This method calls http://twitter.com/statuses/friends
 @param page number of the page to retrieve friends
 @param listener a listener object that receives the response
 @deprecated Use getFriendsStatusesAsync(Paging paging,TwitterListener listener) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0friends</a>]]>
      </doc>
    </method>
    <method name="getFriendsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getFriendsStatusesAsync(id, listener) instead">
      <param name="id" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the user's friends, each with current status inline.
 <br>This method calls http://twitter.com/statuses/friends
 @param id String
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0friends</a>
 @deprecated use getFriendsStatusesAsync(id, listener) instead]]>
      </doc>
    </method>
    <method name="getFriendsStatusesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the user's friends, each with current status inline.
 <br>This method calls http://twitter.com/statuses/friends
 @param id String
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0friends</a>
 @since Twitter4J 2.0.9]]>
      </doc>
    </method>
    <method name="getFriendsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getFriendsStatusesAsync(id, paging, listener) instead">
      <param name="id" type="java.lang.String"/>
      <param name="paging" type="twitter4j.Paging"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the user's friends, each with current status inline.
 <br>This method calls http://twitter.com/statuses/friends
 @param id String
 @param paging controls pagination
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0friends</a>
 @deprecated use getFriendsStatusesAsync(id, paging, listener) instead]]>
      </doc>
    </method>
    <method name="getFriendsStatusesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="paging" type="twitter4j.Paging"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the user's friends, each with current status inline.
 <br>This method calls http://twitter.com/statuses/friends
 @param id String
 @param paging controls pagination
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0friends</a>
 @since Twitter4J 2.0.9]]>
      </doc>
    </method>
    <method name="getFriendsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getFriendsStatusesAsync(String id, Paging paging, TwitterListener listener) instead">
      <param name="id" type="java.lang.String"/>
      <param name="page" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the user's friends, each with current status inline.
 <br>This method calls http://twitter.com/statuses/friends
 @param id String
 @param page int
 @param listener a listener object that receives the response
 @deprecated Use getFriendsStatusesAsync(String id, Paging paging, TwitterListener listener) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0friends</a>]]>
      </doc>
    </method>
    <method name="getFollowersAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getFollowersStatusesAsync(listener)">
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the authenticating user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://twitter.com/statuses/followers
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0followers</a>
 @deprecated use getFollowersStatusesAsync(listener)]]>
      </doc>
    </method>
    <method name="getFollowersStatusesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the authenticating user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://twitter.com/statuses/followers
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0followers</a>
 @since Twitter4J 2.0.9]]>
      </doc>
    </method>
    <method name="getFollowersAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the authenticating user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://twitter.com/statuses/followers
 @param paging controls pagination
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0followers</a>
 deprecated use getFollowersStatusesAsync(paging, listener) instead]]>
      </doc>
    </method>
    <method name="getFollowersStatusesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the authenticating user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://twitter.com/statuses/followers
 @param paging controls pagination
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.9
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0followers</a>]]>
      </doc>
    </method>
    <method name="getFollowersAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getFollowersStatusesAsync(Paging paging, TwitterListener listener) instead">
      <param name="page" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the authenticating user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://twitter.com/statuses/followers
 @param page Retrieves the next 100 followers.
 @param listener a listener object that receives the response
 @since Twitter4J 1.1.0
 @deprecated Use getFollowersStatusesAsync(Paging paging, TwitterListener listener) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0followers</a>]]>
      </doc>
    </method>
    <method name="getFollowersAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getFollowersStatusesAsync(id, listener) instead">
      <param name="id" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the authenticating user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://twitter.com/statuses/followers

 @param id       The ID or screen name of the user for whom to request a list of followers.
 @param listener a listener object that receives the response
 @since Twitter4J 1.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0followers</a>
 @deprecated use getFollowersStatusesAsync(id, listener) instead]]>
      </doc>
    </method>
    <method name="getFollowersStatusesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the authenticating user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://twitter.com/statuses/followers

 @param id       The ID or screen name of the user for whom to request a list of followers.
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.9
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0followers</a>]]>
      </doc>
    </method>
    <method name="getFollowersAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getFollowersStatusesAsync(id, paging, listener) instead">
      <param name="id" type="java.lang.String"/>
      <param name="paging" type="twitter4j.Paging"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the authenticating user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://twitter.com/statuses/followers
 @param id The ID or screen name of the user for whom to request a list of followers.
 @param paging controls pagination
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0followers</a>
 @deprecated use getFollowersStatusesAsync(id, paging, listener) instead]]>
      </doc>
    </method>
    <method name="getFollowersStatusesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="paging" type="twitter4j.Paging"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the authenticating user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://twitter.com/statuses/followers
 @param id The ID or screen name of the user for whom to request a list of followers.
 @param paging controls pagination
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.9
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0followers</a>]]>
      </doc>
    </method>
    <method name="getFollowersAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getFollowersStatusesAsync(String id, Paging paging, TwitterListener listener) instead">
      <param name="id" type="java.lang.String"/>
      <param name="page" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the authenticating user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://twitter.com/statuses/followers
 @param id The ID or screen name of the user for whom to request a list of followers.
 @param page Retrieves the next 100 followers.
 @param listener a listener object that receives the response
 @since Twitter4J 1.1.0
 @deprecated Use getFollowersStatusesAsync(String id, Paging paging, TwitterListener listener) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses%C2%A0followers</a>]]>
      </doc>
    </method>
    <method name="getFeaturedAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns a list of the users currently featured on the site with their current statuses inline.
 @param listener a listener object that receives the response]]>
      </doc>
    </method>
    <method name="getDirectMessagesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns a list of the direct messages sent to the authenticating user.
 <br>This method calls http://twitter.com/direct_messages
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages">Twitter API Wiki / Twitter REST API Method: direct_messages</a>]]>
      </doc>
    </method>
    <method name="getDirectMessagesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns a list of the direct messages sent to the authenticating user.
 <br>This method calls http://twitter.com/direct_messages
 @param paging controls pagination
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages">Twitter API Wiki / Twitter REST API Method: direct_messages</a>]]>
      </doc>
    </method>
    <method name="getDirectMessagesByPageAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getDirectMessagesAsync(Paging paging, TwitterListener listener) instead">
      <param name="page" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns a list of the direct messages sent to the authenticating user.
 <br>This method calls http://twitter.com/direct_messages
 @param page int
 @param listener a listener object that receives the response
 @deprecated Use getDirectMessagesAsync(Paging paging, TwitterListener listener) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages">Twitter API Wiki / Twitter REST API Method: direct_messages</a>]]>
      </doc>
    </method>
    <method name="getDirectMessagesByPageAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getDirectMessagesAsync(Paging paging, TwitterListener listener) instead">
      <param name="page" type="int"/>
      <param name="sinceId" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns a list of the direct messages sent to the authenticating user.
 <br>This method calls http://twitter.com/direct_messages
 @param page int
 @param sinceId Returns only direct messages with an ID greater than (that is, more recent than) the specified ID.
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.0
 @deprecated Use getDirectMessagesAsync(Paging paging, TwitterListener listener) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages">Twitter API Wiki / Twitter REST API Method: direct_messages</a>]]>
      </doc>
    </method>
    <method name="getDirectMessagesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getDirectMessagesAsync(Paging paging, TwitterListener listener) instead">
      <param name="sinceId" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns a list of the direct messages sent to the authenticating user.
 <br>This method calls http://twitter.com/direct_messages
 @param sinceId int
 @param listener a listener object that receives the response
 @deprecated Use getDirectMessagesAsync(Paging paging, TwitterListener listener) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages">Twitter API Wiki / Twitter REST API Method: direct_messages</a>]]>
      </doc>
    </method>
    <method name="getDirectMessagesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="using long sinceId is suggested.">
      <param name="since" type="java.util.Date"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns a list of the direct messages sent to the authenticating user.
 <br>This method calls http://twitter.com/direct_messages
 @param since Date
 @param listener a listener object that receives the response
 @deprecated using long sinceId is suggested.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages">Twitter API Wiki / Twitter REST API Method: direct_messages</a>]]>
      </doc>
    </method>
    <method name="getSentDirectMessagesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns a list of the direct messages sent by the authenticating user.
 <br>This method calls http://twitter.com/direct_messages/sent
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages%C2%A0sent">Twitter API Wiki / Twitter REST API Method: direct_messages%C2%A0sent</a>]]>
      </doc>
    </method>
    <method name="getSentDirectMessagesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns a list of the direct messages sent by the authenticating user.
 <br>This method calls http://twitter.com/direct_messages/sent
 @param paging controls pagination
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages%C2%A0sent">Twitter API Wiki / Twitter REST API Method: direct_messages%C2%A0sent</a>]]>
      </doc>
    </method>
    <method name="getSentDirectMessagesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="using long sinceId is suggested.">
      <param name="since" type="java.util.Date"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns a list of the direct messages sent by the authenticating user.
 <br>This method calls http://twitter.com/direct_messages/sent
 @param since Date
 @param listener a listener object that receives the response
 @deprecated using long sinceId is suggested.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages%C2%A0sent">Twitter API Wiki / Twitter REST API Method: direct_messages%C2%A0sent</a>]]>
      </doc>
    </method>
    <method name="getSentDirectMessagesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getSentDirectMessagesAsync(Paging paging, TwitterListener listener) instead">
      <param name="sinceId" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns a list of the direct messages sent by the authenticating user.
 <br>This method calls http://twitter.com/direct_messages/sent
 @param sinceId returns only sent direct messages with an ID greater than (that is, more recent than) the specified ID
 @param listener a listener object that receives the response
 @deprecated Use getSentDirectMessagesAsync(Paging paging, TwitterListener listener) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages%C2%A0sent">Twitter API Wiki / Twitter REST API Method: direct_messages%C2%A0sent</a>]]>
      </doc>
    </method>
    <method name="getSentDirectMessagesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getSentDirectMessagesAsync(Paging paging, TwitterListener listener) instead">
      <param name="page" type="int"/>
      <param name="sinceId" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns a list of the direct messages sent by the authenticating user.
 <br>This method calls http://twitter.com/direct_messages/sent
 @param page Retrieves the 20 next most recent direct messages.
 @param sinceId returns only sent direct messages with an ID greater than (that is, more recent than) the specified ID
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.0
 @deprecated Use getSentDirectMessagesAsync(Paging paging, TwitterListener listener) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages%C2%A0sent">Twitter API Wiki / Twitter REST API Method: direct_messages%C2%A0sent</a>]]>
      </doc>
    </method>
    <method name="sendDirectMessageAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="text" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Sends a new direct message to the specified user from the authenticating user.  Requires both the user and text parameters below.
 The text will be trimed if the length of the text is exceeding 140 characters.
 <br>This method calls http://twitter.com/direct_messages/new
 @param id String
 @param text String
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages%C2%A0new">Twitter API Wiki / Twitter REST API Method: direct_messages%C2%A0new</a>]]>
      </doc>
    </method>
    <method name="sendDirectMessageAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="text" type="java.lang.String"/>
      <doc>
      <![CDATA[Sends a new direct message to the specified user from the authenticating user.  Requires both the user and text parameters below.
 The text will be trimed if the length of the text is exceeding 140 characters.
 <br>This method calls http://twitter.com/direct_messages/new
 @param id String
 @param text String
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages%C2%A0new">Twitter API Wiki / Twitter REST API Method: direct_messages%C2%A0new</a>]]>
      </doc>
    </method>
    <method name="deleteDirectMessageAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use destroyDirectMessageAsync(int id, TwitterListener listener) instead">
      <param name="id" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Delete specified direct message
 <br>This method calls http://twitter.com/direct_messages/destroy
 @param id int
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: direct_messages%C2%A0destroy</a>
 @deprecated Use destroyDirectMessageAsync(int id, TwitterListener listener) instead]]>
      </doc>
    </method>
    <method name="destroyDirectMessageAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Delete specified direct message
 <br>This method calls http://twitter.com/direct_messages/destroy
 @param id int
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: direct_messages%C2%A0destroy</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="destroyDirectMessageAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="int"/>
      <doc>
      <![CDATA[Delete specified direct message
 <br>This method calls http://twitter.com/direct_messages/destroy
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-direct_messages%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: direct_messages%C2%A0destroy</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="createAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use createFriendshipAsync(String id, TwitterListener listener) instead">
      <param name="id" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Befriends the user specified in the ID parameter as the authenticating user.  Returns the befriended user in the requested format when successful.
 <br>This method calls http://twitter.com/friendships/create
 @param id String
 @param listener a listener object that receives the response
 @deprecated Use createFriendshipAsync(String id, TwitterListener listener) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friendships%C2%A0create">Twitter API Wiki / Twitter REST API Method: friendships%C2%A0create</a>]]>
      </doc>
    </method>
    <method name="createFriendshipAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Befriends the user specified in the ID parameter as the authenticating user.  Returns the befriended user in the requested format when successful.
 <br>This method calls http://twitter.com/friendships/create

 @param id       String
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friendships%C2%A0create">Twitter API Wiki / Twitter REST API Method: friendships%C2%A0create</a>]]>
      </doc>
    </method>
    <method name="createFriendshipAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="follow" type="boolean"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Befriends the user specified in the ID parameter as the authenticating user.  Returns the befriended user in the requested format when successful.
 <br>This method calls http://twitter.com/friendships/create

 @param id the ID or screen name of the user to be befriended
 @param follow Enable notifications for the target user in addition to becoming friends.
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friendships%C2%A0create">Twitter API Wiki / Twitter REST API Method: friendships%C2%A0create</a>]]>
      </doc>
    </method>
    <method name="createAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use createFriendshipAsync(String id) instead">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Befriends the user specified in the ID parameter as the authenticating user.  Returns the befriended user in the requested format when successful.
 <br>This method calls http://twitter.com/friendships/create
 @param id String
 @deprecated Use createFriendshipAsync(String id) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friendships%C2%A0create">Twitter API Wiki / Twitter REST API Method: friendships%C2%A0create</a>]]>
      </doc>
    </method>
    <method name="createFriendshipAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Befriends the user specified in the ID parameter as the authenticating user.  Returns the befriended user in the requested format when successful.
 <br>This method calls http://twitter.com/friendships/create

 @param id String
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friendships%C2%A0create">Twitter API Wiki / Twitter REST API Method: friendships%C2%A0create</a>]]>
      </doc>
    </method>
    <method name="destroyAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use destroyFriendshipAsync(String id, TwitterListener listener) instead">
      <param name="id" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Discontinues friendship with the specified in the ID parameter as the authenticating user.  Returns the un-friended user in the requested format when successful.
 <br>This method calls http://twitter.com/friendships/destroy
 @param id String
 @param listener a listener object that receives the response
 @deprecated Use destroyFriendshipAsync(String id, TwitterListener listener) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friendships%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: friendships%C2%A0destroy</a>]]>
      </doc>
    </method>
    <method name="destroyAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use destroyFriendshipAsync(String id) instead">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Discontinues friendship with the specified in the ID parameter as the authenticating user.  Returns the un-friended user in the requested format when successful.
 <br>This method calls http://twitter.com/friendships/destroy
 @param id String
 @deprecated Use destroyFriendshipAsync(String id) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friendships%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: friendships%C2%A0destroy</a>]]>
      </doc>
    </method>
    <method name="destroyFriendshipAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Discontinues friendship with the specified in the ID parameter as the authenticating user.  Returns the un-friended user in the requested format when successful.
 <br>This method calls http://twitter.com/friendships/destroy
 @param id String
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friendships%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: friendships%C2%A0destroy</a>]]>
      </doc>
    </method>
    <method name="destroyFriendshipAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Discontinues friendship with the specified in the ID parameter as the authenticating user.  Returns the un-friended user in the requested format when successful.
 <br>This method calls http://twitter.com/friendships/destroy

 @param id String
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friendships%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: friendships%C2%A0destroy</a>]]>
      </doc>
    </method>
    <method name="existsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="existsFriendshipAsync(String user_a, String user_b, TwitterListener listener)">
      <param name="userA" type="java.lang.String"/>
      <param name="userB" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Tests if a friendship exists between two users.
 <br>This method calls http://twitter.com/friendships/exists

 @param userA The ID or screen_name of the first user to test friendship for.
 @param userB The ID or screen_name of the second user to test friendship for.
 @deprecated existsFriendshipAsync(String user_a, String user_b, TwitterListener listener)
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friendships-exists">Twitter API Wiki / Twitter REST API Method: friendships exists</a>]]>
      </doc>
    </method>
    <method name="existsFriendshipAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userA" type="java.lang.String"/>
      <param name="userB" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Tests if a friendship exists between two users.
 <br>This method calls http://twitter.com/friendships/exists

 @param userA The ID or screen_name of the first user to test friendship for.
 @param userB The ID or screen_name of the second user to test friendship for.
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friendships-exists">Twitter API Wiki / Twitter REST API Method: friendships exists</a>]]>
      </doc>
    </method>
    <method name="getFriendsIDsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the authenticating user is following.
 <br>This method calls http://twitter.com/friends/ids%C2%A0%C2%A0

 @param listener a listener object that receives the response
 @since Twitter4J 2.0.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friends%C2%A0ids">Twitter API Wiki / Twitter REST API Method: friends%C2%A0ids</a>]]>
      </doc>
    </method>
    <method name="getFriendsIDsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getFriendsIDsAsync(long cursor, TwitterListener listener) instead">
      <param name="paging" type="twitter4j.Paging"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the authenticating user is following.
 <br>This method calls http://twitter.com/friends/ids%C2%A0%C2%A0

 @param listener a listener object that receives the response
 @param paging   Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friends%C2%A0ids">Twitter API Wiki / Twitter REST API Method: friends%C2%A0ids</a>
 @since Twitter4J 2.0.1
 @deprecated use getFriendsIDsAsync(long cursor, TwitterListener listener) instead]]>
      </doc>
    </method>
    <method name="getFriendsIDsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cursor" type="long"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the authenticating user is following.
 <br>This method calls http://twitter.com/friends/ids%C2%A0%C2%A0

 @param listener a listener object that receives the response
 @param cursor  Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friends%C2%A0ids">Twitter API Wiki / Twitter REST API Method: friends%C2%A0ids</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getFriendsIDsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is following.
 <br>This method calls http://twitter.com/friends/ids%C2%A0%C2%A0

 @param userId   Specfies the ID of the user for whom to return the friends list.
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friends%C2%A0ids">Twitter API Wiki / Twitter REST API Method: friends%C2%A0ids</a>
 @since Twitter4J 2.0.0]]>
      </doc>
    </method>
    <method name="getFriendsIDsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getFriendsIDsAsync(int userId, long cursor, TwitterListener listener) instead">
      <param name="userId" type="int"/>
      <param name="paging" type="twitter4j.Paging"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is following.
 <br>This method calls http://twitter.com/friends/ids%C2%A0%C2%A0

 @param userId   Specfies the ID of the user for whom to return the friends list.
 @param paging   Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friends%C2%A0ids">Twitter API Wiki / Twitter REST API Method: friends%C2%A0ids</a>
 @since Twitter4J 2.0.1
 @deprecated use getFriendsIDsAsync(int userId, long cursor, TwitterListener listener) instead]]>
      </doc>
    </method>
    <method name="getFriendsIDsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="cursor" type="long"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is following.
 <br>This method calls http://twitter.com/friends/ids%C2%A0%C2%A0

 @param userId   Specifies the ID of the user for whom to return the friends list.
 @param cursor  Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friends%C2%A0ids">Twitter API Wiki / Twitter REST API Method: friends%C2%A0ids</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getFriendsIDsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is following.
 <br>This method calls http://twitter.com/friends/ids%C2%A0%C2%A0

 @param screenName Specfies the screen name of the user for whom to return the friends list.
 @param listener   a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friends%C2%A0ids">Twitter API Wiki / Twitter REST API Method: friends%C2%A0ids</a>
 @since Twitter4J 2.0.0]]>
      </doc>
    </method>
    <method name="getFriendsIDsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getFriendsIDsAsync(String screenName, long cursor, TwitterListener listener) instead">
      <param name="screenName" type="java.lang.String"/>
      <param name="paging" type="twitter4j.Paging"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is following.
 <br>This method calls http://twitter.com/friends/ids%C2%A0%C2%A0

 @param screenName Specfies the screen name of the user for whom to return the friends list.
 @param paging   Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @param listener   a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friends%C2%A0ids">Twitter API Wiki / Twitter REST API Method: friends%C2%A0ids</a>
 @since Twitter4J 2.0.1
 @deprecated use getFriendsIDsAsync(String screenName, long cursor, TwitterListener listener) instead]]>
      </doc>
    </method>
    <method name="getFriendsIDsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="cursor" type="long"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is following.
 <br>This method calls http://twitter.com/friends/ids%C2%A0%C2%A0

 @param screenName Specfies the screen name of the user for whom to return the friends list.
 @param cursor  Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @param listener   a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-friends%C2%A0ids">Twitter API Wiki / Twitter REST API Method: friends%C2%A0ids</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getFollowersIDsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 <br>This method calls http://twitter.com/followers/ids

 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers%C2%A0ids</a>
 @since Twitter4J 2.0.0]]>
      </doc>
    </method>
    <method name="getFollowersIDsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getFollowersIDsAsync(long cursor, TwitterListener listener) instead">
      <param name="paging" type="twitter4j.Paging"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 <br>This method calls http://twitter.com/followers/ids

 @param listener a listener object that receives the response
 @param paging   Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers%C2%A0ids</a>
 @since Twitter4J 2.0.1
 @deprecated use getFollowersIDsAsync(long cursor, TwitterListener listener) instead]]>
      </doc>
    </method>
    <method name="getFollowersIDsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cursor" type="long"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 <br>This method calls http://twitter.com/followers/ids

 @param cursor  Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers%C2%A0ids</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getFollowersIDsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 <br>This method calls http://twitter.com/followers/ids

 @param userId   Specfies the ID of the user for whom to return the followers list.
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers%C2%A0ids</a>
 @since Twitter4J 2.0.0]]>
      </doc>
    </method>
    <method name="getFollowersIDsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getFollowersIDsAsync(int userId, long cursor, TwitterListener listener) instead">
      <param name="userId" type="int"/>
      <param name="paging" type="twitter4j.Paging"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 <br>This method calls http://twitter.com/followers/ids

 @param userId   Specfies the ID of the user for whom to return the followers list.
 @param paging   Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers%C2%A0ids</a>
 @since Twitter4J 2.0.1
 @deprecated use getFollowersIDsAsync(int userId, long cursor, TwitterListener listener) instead]]>
      </doc>
    </method>
    <method name="getFollowersIDsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="cursor" type="long"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 <br>This method calls http://twitter.com/followers/ids

 @param userId   Specfies the ID of the user for whom to return the followers list.
 @param cursor  Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers%C2%A0ids</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getFollowersIDsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 <br>This method calls http://twitter.com/followers/ids

 @param screenName Specfies the screen name of the user for whom to return the followers list.
 @param listener   a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers%C2%A0ids</a>
 @since Twitter4J 2.0.0]]>
      </doc>
    </method>
    <method name="getFollowersIDsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getFollowersIDsAsync(String screenName, long cursor, TwitterListener listener) instead">
      <param name="screenName" type="java.lang.String"/>
      <param name="paging" type="twitter4j.Paging"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 <br>This method calls http://twitter.com/followers/ids

 @param screenName Specfies the screen name of the user for whom to return the followers list.
 @param paging     Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @param listener   a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers%C2%A0ids</a>
 @since Twitter4J 2.0.1
 @deprecated use getFollowersIDsAsync(String screenName, long cursor, TwitterListener listener) instead]]>
      </doc>
    </method>
    <method name="getFollowersIDsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="cursor" type="long"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 <br>This method calls http://twitter.com/followers/ids

 @param screenName Specfies the screen name of the user for whom to return the followers list.
 @param cursor  Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @param listener   a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers%C2%A0ids</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="updateLocationAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use updateProfileAsync(String name, String email, String url, String location, String description, TwitterListener listener) instead">
      <param name="location" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Updates the location

 @param location the current location of the user
 @param listener a listener object that receives the response
 @since Twitter4J 1.0.4
 @deprecated Use updateProfileAsync(String name, String email, String url, String location, String description, TwitterListener listener) instead]]>
      </doc>
    </method>
    <method name="updateProfileAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="email" type="java.lang.String"/>
      <param name="url" type="java.lang.String"/>
      <param name="location" type="java.lang.String"/>
      <param name="description" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Sets values that users are able to set under the "Account" tab of their settings page. Only the parameters specified(non-null) will be updated.

 @param name        Optional. Maximum of 20 characters.
 @param email       Optional. Maximum of 40 characters. Must be a valid email address.
 @param url         Optional. Maximum of 100 characters. Will be prepended with "http://" if not present.
 @param location    Optional. Maximum of 30 characters. The contents are not normalized or geocoded in any way.
 @param description Optional. Maximum of 160 characters.
 @param listener    a listener object that receives the response
 @since Twitter4J 2.0.2]]>
      </doc>
    </method>
    <method name="updateProfileAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="email" type="java.lang.String"/>
      <param name="url" type="java.lang.String"/>
      <param name="location" type="java.lang.String"/>
      <param name="description" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets values that users are able to set under the "Account" tab of their settings page. Only the parameters specified(non-null) will be updated.

 @param name        Optional. Maximum of 20 characters.
 @param email       Optional. Maximum of 40 characters. Must be a valid email address.
 @param url         Optional. Maximum of 100 characters. Will be prepended with "http://" if not present.
 @param location    Optional. Maximum of 30 characters. The contents are not normalized or geocoded in any way.
 @param description Optional. Maximum of 160 characters.
 @since Twitter4J 2.0.2]]>
      </doc>
    </method>
    <method name="rateLimitStatusAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Gets the remaining number of API requests available to the requesting user before the API limit is reached for the current hour. Calls to rate_limit_status do not count against the rate limit.  If authentication credentials are provided, the rate limit status for the authenticating user is returned.  Otherwise, the rate limit status for the requester's IP address is returned.
 <br>This method calls http://twitter.com/account/rate_limit_status

 @since Twitter4J 1.1.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-account%C2%A0rate_limit_status">Twitter API Wiki / Twitter REST API Method: account%C2%A0rate_limit_status</a>]]>
      </doc>
    </method>
    <method name="updateDeliverlyDeviceAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="device" type="twitter4j.Twitter.Device"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Sets which device Twitter delivers updates to for the authenticating user.  Sending none as the device parameter will disable IM or SMS updates.
 <br>This method calls http://twitter.com/account/update_delivery_device

 @param device   new Delivery device. Must be one of: IM, SMS, NONE.
 @param listener a listener object that receives the response
 @since Twitter4J 1.0.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-account%C2%A0update_delivery_device">Twitter API Wiki / Twitter REST API Method: account%C2%A0update_delivery_device</a>]]>
      </doc>
    </method>
    <method name="updateProfileColorsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="profileBackgroundColor" type="java.lang.String"/>
      <param name="profileTextColor" type="java.lang.String"/>
      <param name="profileLinkColor" type="java.lang.String"/>
      <param name="profileSidebarFillColor" type="java.lang.String"/>
      <param name="profileSidebarBorderColor" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Sets one or more hex values that control the color scheme of the authenticating user's profile page on twitter.com.  These values are also returned in the getUserDetail() method.
 <br>This method calls http://twitter.com/account/update_profile_colors
 @param profileBackgroundColor optional, can be null
 @param profileTextColor optional, can be null
 @param profileLinkColor optional, can be null
 @param profileSidebarFillColor optional, can be null
 @param profileSidebarBorderColor optional, can be null
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-account%C2%A0update_profile_colors">Twitter API Wiki / Twitter REST API Method: account%C2%A0update_profile_colors</a>]]>
      </doc>
    </method>
    <method name="updateProfileColorsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="profileBackgroundColor" type="java.lang.String"/>
      <param name="profileTextColor" type="java.lang.String"/>
      <param name="profileLinkColor" type="java.lang.String"/>
      <param name="profileSidebarFillColor" type="java.lang.String"/>
      <param name="profileSidebarBorderColor" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets one or more hex values that control the color scheme of the authenticating user's profile page on twitter.com.  These values are also returned in the getUserDetail() method.
 <br>This method calls http://twitter.com/account/update_profile_colors
 @param profileBackgroundColor optional, can be null
 @param profileTextColor optional, can be null
 @param profileLinkColor optional, can be null
 @param profileSidebarFillColor optional, can be null
 @param profileSidebarBorderColor optional, can be null
 @since Twitter4J 2.0.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-account%C2%A0update_profile_colors">Twitter API Wiki / Twitter REST API Method: account%C2%A0update_profile_colors</a>]]>
      </doc>
    </method>
    <method name="favoritesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getFavoritesAsync(TwitterListener listener) instead">
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format.
 <br>This method calls http://twitter.com/favorites
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-favorites">Twitter API Wiki / Twitter REST API Method: favorites</a>
 @deprecated Use getFavoritesAsync(TwitterListener listener) instead]]>
      </doc>
    </method>
    <method name="getFavoritesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format.
 <br>This method calls http://twitter.com/favorites
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-favorites">Twitter API Wiki / Twitter REST API Method: favorites</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="favoritesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getFavoritesAsync(int page, TwitterListener listener) instead">
      <param name="page" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format.
 <br>This method calls http://twitter.com/favorites
 @param page number of page to retrieve favorites
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-favorites">Twitter API Wiki / Twitter REST API Method: favorites</a>
 @deprecated Use getFavoritesAsync(int page, TwitterListener listener) instead]]>
      </doc>
    </method>
    <method name="getFavoritesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="page" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format.
 <br>This method calls http://twitter.com/favorites
 @param page number of page to retrieve favorites
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-favorites">Twitter API Wiki / Twitter REST API Method: favorites</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="favoritesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getFavoritesAsync(String id,TwitterListener listener) instead">
      <param name="id" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format.
 <br>This method calls http://twitter.com/favorites
 @param id the ID or screen name of the user for whom to request a list of favorite statuses
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-favorites">Twitter API Wiki / Twitter REST API Method: favorites</a>
 @deprecated Use getFavoritesAsync(String id,TwitterListener listener) instead]]>
      </doc>
    </method>
    <method name="getFavoritesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format.
 <br>This method calls http://twitter.com/favorites
 @param id the ID or screen name of the user for whom to request a list of favorite statuses
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-favorites">Twitter API Wiki / Twitter REST API Method: favorites</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="favoritesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getFavoritesAsync(String id,int page, TwitterListener listener) instead">
      <param name="id" type="java.lang.String"/>
      <param name="page" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format.
 <br>This method calls http://twitter.com/favorites
 @param id the ID or screen name of the user for whom to request a list of favorite statuses.
 @param page retrieves the 20 next most recent favorite statuses.
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-favorites">Twitter API Wiki / Twitter REST API Method: favorites</a>
 @deprecated Use getFavoritesAsync(String id,int page, TwitterListener listener) instead]]>
      </doc>
    </method>
    <method name="getFavoritesAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="page" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format.
 <br>This method calls http://twitter.com/favorites
 @param id the ID or screen name of the user for whom to request a list of favorite statuses.
 @param page retrieves the 20 next most recent favorite statuses.
 @param listener a listener object that receives the response
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-favorites">Twitter API Wiki / Twitter REST API Method: favorites</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="createFavoriteAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use createFavoriteAsync(long id, TwitterListener listener) instead.">
      <param name="id" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Favorites the status specified in the ID parameter as the authenticating user.  Returns the favorite status when successful.
 <br>This method calls http://twitter.com/favorites/create%C2%A0
 @param id the ID or screen name of the user for whom to request a list of favorite statuses.
 @param listener a listener object that receives the response
 @deprecated Use createFavoriteAsync(long id, TwitterListener listener) instead.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-favorites%C2%A0create">Twitter API Wiki / Twitter REST API Method: favorites%C2%A0create</a>]]>
      </doc>
    </method>
    <method name="createFavoriteAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="long"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Favorites the status specified in the ID parameter as the authenticating user.  Returns the favorite status when successful.
 <br>This method calls http://twitter.com/favorites/create%C2%A0

 @param id       the ID or screen name of the user for whom to request a list of favorite statuses.
 @param listener a listener object that receives the response
 @since 1.1.2
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-favorites%C2%A0create">Twitter API Wiki / Twitter REST API Method: favorites%C2%A0create</a>]]>
      </doc>
    </method>
    <method name="createFavoriteAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use createFavoriteAsync(long id, TwitterListener listener) instead.">
      <param name="id" type="int"/>
      <doc>
      <![CDATA[Favorites the status specified in the ID parameter as the authenticating user.  Returns the favorite status when successful.
 <br>This method calls http://twitter.com/favorites/create%C2%A0
 @param id the ID or screen name of the user for whom to request a list of favorite statuses.
 @deprecated Use createFavoriteAsync(long id, TwitterListener listener) instead.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-favorites%C2%A0create">Twitter API Wiki / Twitter REST API Method: favorites%C2%A0create</a>]]>
      </doc>
    </method>
    <method name="createFavoriteAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="long"/>
      <doc>
      <![CDATA[Favorites the status specified in the ID parameter as the authenticating user.  Returns the favorite status when successful.
 <br>This method calls http://twitter.com/favorites/create%C2%A0

 @param id the ID or screen name of the user for whom to request a list of favorite statuses.
 @since 1.1.2
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-favorites%C2%A0create">Twitter API Wiki / Twitter REST API Method: favorites%C2%A0create</a>]]>
      </doc>
    </method>
    <method name="destroyFavoriteAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use destroyFavoriteAsync(long id, TwitterListener listener) instead.">
      <param name="id" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Favorites the status specified in the ID parameter as the authenticating user.  Returns the favorite status when successful.
 <br>This method calls http://twitter.com/favorites/destroy
 @param id the ID or screen name of the user for whom to request a list of un-favorite statuses.
 @param listener a listener object that receives the response
 @deprecated Use destroyFavoriteAsync(long id, TwitterListener listener) instead.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-favorites%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: favorites%C2%A0destroy</a>]]>
      </doc>
    </method>
    <method name="destroyFavoriteAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="long"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Favorites the status specified in the ID parameter as the authenticating user.  Returns the favorite status when successful.
 <br>This method calls http://twitter.com/favorites/destroy

 @param id       the ID or screen name of the user for whom to request a list of un-favorite statuses.
 @param listener a listener object that receives the response
 @since 1.1.2
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-favorites%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: favorites%C2%A0destroy</a>]]>
      </doc>
    </method>
    <method name="destroyFavoriteAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use destroyFavoriteAsync(long id) instead.">
      <param name="id" type="int"/>
      <doc>
      <![CDATA[Favorites the status specified in the ID parameter as the authenticating user.  Returns the favorite status when successful.
 <br>This method calls http://twitter.com/favorites/destroy
 @param id the ID or screen name of the user for whom to request a list of un-favorite statuses.
 @deprecated Use destroyFavoriteAsync(long id) instead.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-favorites%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: favorites%C2%A0destroy</a>]]>
      </doc>
    </method>
    <method name="destroyFavoriteAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="long"/>
      <doc>
      <![CDATA[Favorites the status specified in the ID parameter as the authenticating user.  Returns the favorite status when successful.
 <br>This method calls http://twitter.com/favorites/destroy

 @param id the ID or screen name of the user for whom to request a list of un-favorite statuses.
 @since 1.1.2
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-favorites%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: favorites%C2%A0destroy</a>]]>
      </doc>
    </method>
    <method name="followAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use enableNotificationAsync(String id, TwitterListener listener) instead">
      <param name="id" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Enables notifications for updates from the specified user to the authenticating user.  Returns the specified user when successful.
 <br>This method calls http://twitter.com/notifications/follow

 @param id       String
 @param listener a listener object that receives the response
 @deprecated Use enableNotificationAsync(String id, TwitterListener listener) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-notifications%C2%A0follow">Twitter API Wiki / Twitter REST API Method: notifications%C2%A0follow</a>]]>
      </doc>
    </method>
    <method name="enableNotificationAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Enables notifications for updates from the specified user to the authenticating user.  Returns the specified user when successful.
 <br>This method calls http://twitter.com/notifications/follow

 @param id       String
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-notifications%C2%A0follow">Twitter API Wiki / Twitter REST API Method: notifications%C2%A0follow</a>]]>
      </doc>
    </method>
    <method name="followAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use enableNotificationAsync(String id) instead">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Enables notifications for updates from the specified user to the authenticating user.  Returns the specified user when successful.
 <br>This method calls http://twitter.com/notifications/follow

 @param id String
 @deprecated Use enableNotificationAsync(String id) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-notifications%C2%A0follow">Twitter API Wiki / Twitter REST API Method: notifications%C2%A0follow</a>]]>
      </doc>
    </method>
    <method name="enableNotificationAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Enables notifications for updates from the specified user to the authenticating user.  Returns the specified user when successful.
 <br>This method calls http://twitter.com/notifications/leave
 @param id       String
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-notifications%C2%A0follow">Twitter API Wiki / Twitter REST API Method: notifications%C2%A0follow</a>]]>
      </doc>
    </method>
    <method name="leaveAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use disableNotificationAsync(String id, TwitterListener listener) instead">
      <param name="id" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Disables notifications for updates from the specified user to the authenticating user.  Returns the specified user when successful.
 <br>This method calls http://twitter.com/notifications/leave

 @param id       String
 @param listener a listener object that receives the response
 @deprecated Use disableNotificationAsync(String id, TwitterListener listener) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-notifications%C2%A0leave">Twitter API Wiki / Twitter REST API Method: notifications%C2%A0leave</a>]]>
      </doc>
    </method>
    <method name="disableNotificationAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Disables notifications for updates from the specified user to the authenticating user.  Returns the specified user when successful.
 <br>This method calls http://twitter.com/notifications/leave

 @param id       String
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-notifications%C2%A0leave">Twitter API Wiki / Twitter REST API Method: notifications%C2%A0leave</a>]]>
      </doc>
    </method>
    <method name="leaveAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use disableNotificationAsync(String id) instead">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Disables notifications for updates from the specified user to the authenticating user.  Returns the specified user when successful.
 <br>This method calls http://twitter.com/notifications/leave

 @param id String
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-notifications%C2%A0leave">Twitter API Wiki / Twitter REST API Method: notifications%C2%A0leave</a>
 @deprecated Use disableNotificationAsync(String id) instead]]>
      </doc>
    </method>
    <method name="disableNotificationAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Disables notifications for updates from the specified user to the authenticating user.  Returns the specified user when successful.
 <br>This method calls http://twitter.com/notifications/leave

 @param id       String
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-notifications%C2%A0leave">Twitter API Wiki / Twitter REST API Method: notifications%C2%A0leave</a>]]>
      </doc>
    </method>
    <method name="blockAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use createBlockAsync(String id) instead">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Blocks the user specified in the ID parameter as the authenticating user.  Returns the blocked user in the requested format when successful.
 <br>This method calls http://twitter.com/blocks/create%C2%A0

 @param id the ID or screen_name of the user to block
 @since Twitter4J 1.0.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-blocks%C2%A0create">Twitter API Wiki / Twitter REST API Method: blocks%C2%A0create</a>
 @deprecated Use createBlockAsync(String id) instead]]>
      </doc>
    </method>
    <method name="createBlockAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Blocks the user specified in the ID parameter as the authenticating user.  Returns the blocked user in the requested format when successful.
 <br>This method calls http://twitter.com/blocks/create%C2%A0

 @param id the ID or screen_name of the user to block
 @param listener a listener object that receives the response
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-blocks%C2%A0create">Twitter API Wiki / Twitter REST API Method: blocks%C2%A0create</a>]]>
      </doc>
    </method>
    <method name="createBlockAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Blocks the user specified in the ID parameter as the authenticating user.  Returns the blocked user in the requested format when successful.
 <br>This method calls http://twitter.com/blocks/create%C2%A0

 @param id the ID or screen_name of the user to block
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-blocks%C2%A0create">Twitter API Wiki / Twitter REST API Method: blocks%C2%A0create</a>]]>
      </doc>
    </method>
    <method name="unblockAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use destroyBlockAsync(String id, TwitterListener listener) instead">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Un-blocks the user specified in the ID parameter as the authenticating user.  Returns the un-blocked user in the requested format when successful.
 <br>This method calls http://twitter.com/blocks/create%C2%A0

 @param id the ID or screen_name of the user to block
 @since Twitter4J 1.0.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-blocks%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: blocks%C2%A0destroy</a>
 @deprecated Use destroyBlockAsync(String id, TwitterListener listener) instead]]>
      </doc>
    </method>
    <method name="destroyBlockAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Un-blocks the user specified in the ID parameter as the authenticating user.  Returns the un-blocked user in the requested format when successful.
 <br>This method calls http://twitter.com/blocks/create%C2%A0

 @param id the ID or screen_name of the user to block
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-blocks%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: blocks%C2%A0destroy</a>]]>
      </doc>
    </method>
    <method name="destroyBlockAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Un-blocks the user specified in the ID parameter as the authenticating user.  Returns the un-blocked user in the requested format when successful.
 <br>This method calls http://twitter.com/blocks/create%C2%A0

 @param id the ID or screen_name of the user to block
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-blocks%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: blocks%C2%A0destroy</a>]]>
      </doc>
    </method>
    <method name="existsBlockAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Tests if a friendship exists between two users.
 <br>This method calls http://twitter.com/blocks/exists/id.xml

 @param id The ID or screen_name of the potentially blocked user.
 @since Twitter4J 2.0.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks-exists">Twitter API Wiki / Twitter REST API Method: blocks exists</a>]]>
      </doc>
    </method>
    <method name="getBlockingUsersAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="twitter4j.TwitterListener"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a list of user objects that the authenticating user is blocking.
 <br>This method calls http://twitter.com/blocks/blocking.xml

 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks-blocking">Twitter API Wiki / Twitter REST API Method: blocks blocking</a>]]>
      </doc>
    </method>
    <method name="getBlockingUsersAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="page" type="int"/>
      <param name="listener" type="twitter4j.TwitterListener"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a list of user objects that the authenticating user is blocking.
 <br>This method calls http://twitter.com/blocks/blocking.xml

 @param page the number of page
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks-blocking">Twitter API Wiki / Twitter REST API Method: blocks blocking</a>]]>
      </doc>
    </method>
    <method name="getBlockingUsersIDsAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="twitter4j.TwitterListener"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric user ids the authenticating user is blocking.
 <br>This method calls http://twitter.com/blocks/blocking/ids
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks-blocking-ids">Twitter API Wiki / Twitter REST API Method: blocks blocking ids</a>]]>
      </doc>
    </method>
    <method name="testAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the string "ok" in the requested format with a 200 OK HTTP status code.
 <br>This method calls http://twitter.com/help/test

 @since Twitter4J 1.0.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method:-help%C2%A0test">Twitter API Wiki / Twitter REST API Method: help%C2%A0test</a>]]>
      </doc>
    </method>
    <method name="shutdown"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Shuts down internal dispather thread.

 @since Twitter4J 2.0.2]]>
      </doc>
    </method>
    <method name="getDowntimeScheduleAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the same text displayed on http://twitter.com/home when a maintenance window is scheduled, in the requested format.

 @since Twitter4J 1.0.4]]>
      </doc>
    </method>
    <method name="getAuthenticatedUserAsync"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="twitter4j.TwitterListener"/>
      <doc>
      <![CDATA[Retrieves extended information of the authenticated user.  This information includes design settings, so third party developers can theme their widgets according to a given user's preferences.<br>
 The call Twitter.getAuthenticatedUser() is equivalent to the call:<br>
 twitter.getUserDetailAsync(twitter.getUserId(), listener);

 @since Twitter4J 1.1.3]]>
      </doc>
    </method>
    <field name="PUBLIC_TIMELINE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="HOME_TIMELINE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FRIENDS_TIMELINE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="USER_TIMELINE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="SHOW" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="Use SHOW_STATUS instead.">
      <doc>
      <![CDATA[@deprecated Use SHOW_STATUS instead.]]>
      </doc>
    </field>
    <field name="SHOW_STATUS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UPDATE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="Use UPDATE_STATUS instead.">
      <doc>
      <![CDATA[@deprecated Use UPDATE_STATUS instead.]]>
      </doc>
    </field>
    <field name="UPDATE_STATUS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="REPLIES" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="Use DESTROY_FRIENDSHIP instead.">
      <doc>
      <![CDATA[@deprecated Use DESTROY_FRIENDSHIP instead.]]>
      </doc>
    </field>
    <field name="MENTIONS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="RETWEETED_BY_ME" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="RETWEETED_TO_ME" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="RETWEETS_OF_ME" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FRIENDS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FOLLOWERS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FEATURED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="USER_DETAIL" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DIRECT_MESSAGES" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DESTROY_DIRECT_MESSAGES" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="SEND_DIRECT_MESSAGE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="CREATE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="CREATE_FRIENDSHIP" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DESTORY" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="Use DESTROY_FRIENDSHIP instead.">
      <doc>
      <![CDATA[@deprecated Use DESTROY_FRIENDSHIP instead.]]>
      </doc>
    </field>
    <field name="DESTROY" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="Use DESTROY_FRIENDSHIP instead.">
      <doc>
      <![CDATA[@deprecated Use DESTROY_FRIENDSHIP instead.]]>
      </doc>
    </field>
    <field name="DESTROY_FRIENDSHIP" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EXISTS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="Use EXISTS_FRIENDSHIP instead.">
      <doc>
      <![CDATA[@deprecated Use EXISTS_FRIENDSHIP instead.]]>
      </doc>
    </field>
    <field name="EXISTS_FRIENDSHIP" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FOLLOW" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="Use ENABLE_NOTIFICATION instead.">
      <doc>
      <![CDATA[@deprecated Use ENABLE_NOTIFICATION instead.]]>
      </doc>
    </field>
    <field name="ENABLE_NOTIFICATION" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="LEAVE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="Use DISABLE_NOTIFICATION instead.">
      <doc>
      <![CDATA[@deprecated Use DISABLE_NOTIFICATION instead.]]>
      </doc>
    </field>
    <field name="DISABLE_NOTIFICATION" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FAVORITES" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FRIENDS_IDS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FOLLOWERS_IDS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="CREATE_FAVORITE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DESTROY_FAVORITE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UPDATE_LOCATION" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="Use UPDATE_PROFILE instead.">
      <doc>
      <![CDATA[@deprecated Use UPDATE_PROFILE instead.]]>
      </doc>
    </field>
    <field name="UPDATE_PROFILE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UPDATE_PROFILE_COLORS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="RATE_LIMIT_STATUS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UPDATE_DELIVERLY_DEVICE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BLOCK" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="Use CREATED_BLOCK instead.">
      <doc>
      <![CDATA[@deprecated Use CREATED_BLOCK instead.]]>
      </doc>
    </field>
    <field name="CREATED_BLOCK" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UNBLOCK" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="Use DESTROYED_BLOCK instead.">
      <doc>
      <![CDATA[@deprecated Use DESTROYED_BLOCK instead.]]>
      </doc>
    </field>
    <field name="DESTROYED_BLOCK" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="TEST" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="GET_DOWNTIME_SCHEDULE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not supported by Twitter API anymore">
      <doc>
      <![CDATA[@deprecated not supported by Twitter API anymore]]>
      </doc>
    </field>
    <field name="DESTROY_STATUS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="RETWEET_STATUS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="SEARCH" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="TRENDS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="CURRENT_TRENDS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DAILY_TRENDS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="WEEKLY_TRENDS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Twitter API with a series of asynchronous APIs.<br>
 With this class, you can call TwitterAPI acynchronously.<br>
 @see twitter4j.AsyncTwitter
 @see twitter4j.TwitterListener
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.AsyncTwitter -->
  <!-- start class twitter4j.Configuration -->
  <class name="Configuration" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Configuration"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="isDalvik" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="useSSL" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getScheme" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getCilentVersion" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getCilentVersion" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientVersion" type="java.lang.String"/>
    </method>
    <method name="getSource" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSource" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="java.lang.String"/>
    </method>
    <method name="getProxyHost" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getProxyHost" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="proxyHost" type="java.lang.String"/>
    </method>
    <method name="getProxyUser" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getProxyUser" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="java.lang.String"/>
    </method>
    <method name="getClientURL" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getClientURL" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clientURL" type="java.lang.String"/>
    </method>
    <method name="getProxyPassword" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getProxyPassword" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="password" type="java.lang.String"/>
    </method>
    <method name="getProxyPort" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getProxyPort" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="port" type="int"/>
    </method>
    <method name="getConnectionTimeout" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getConnectionTimeout" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="connectionTimeout" type="int"/>
    </method>
    <method name="getReadTimeout" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getReadTimeout" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="readTimeout" type="int"/>
    </method>
    <method name="getRetryCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRetryCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="retryCount" type="int"/>
    </method>
    <method name="getRetryIntervalSecs" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRetryIntervalSecs" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="retryIntervalSecs" type="int"/>
    </method>
    <method name="getUser" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getUser" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="java.lang.String"/>
    </method>
    <method name="getPassword" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPassword" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="password" type="java.lang.String"/>
    </method>
    <method name="getUserAgent" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getUserAgent" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userAgent" type="java.lang.String"/>
    </method>
    <method name="getOAuthConsumerKey" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOAuthConsumerKey" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="consumerKey" type="java.lang.String"/>
    </method>
    <method name="getOAuthConsumerSecret" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOAuthConsumerSecret" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="consumerSecret" type="java.lang.String"/>
    </method>
    <method name="getBoolean" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="getIntProperty" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="getIntProperty" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="fallbackValue" type="int"/>
    </method>
    <method name="getLongProperty" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="getProperty" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="getProperty" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="fallbackValue" type="java.lang.String"/>
    </method>
    <method name="getNumberOfAsyncThreads" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDebug" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.Configuration -->
  <!-- start class twitter4j.DirectMessage -->
  <class name="DirectMessage" extends="twitter4j.TwitterResponse"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <method name="getId" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getText" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSenderId" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRecipientId" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getCreatedAt" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return created_at
 @since Twitter4J 1.1.0]]>
      </doc>
    </method>
    <method name="getSenderScreenName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRecipientScreenName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSender" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRecipient" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A data class representing sent/received direct message.
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.DirectMessage -->
  <!-- start class twitter4j.IDs -->
  <class name="IDs" extends="twitter4j.TwitterResponse"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getIDs" return="int[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hasPrevious" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getPreviousCursor" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="hasNext" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getNextCursor" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A data class representing array of numeric IDs.

 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.IDs -->
  <!-- start class twitter4j.Paging -->
  <class name="Paging" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <constructor name="Paging"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Paging" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Paging" type="long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Paging" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Paging" type="int, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Paging" type="int, int, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Paging" type="int, int, long, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getPage" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="page" type="int"/>
    </method>
    <method name="getCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setCount"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="count" type="int"/>
    </method>
    <method name="count" return="twitter4j.Paging"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="count" type="int"/>
    </method>
    <method name="getSinceId" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setSinceId"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sinceId" type="int"/>
    </method>
    <method name="sinceId" return="twitter4j.Paging"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sinceId" type="int"/>
    </method>
    <method name="setSinceId"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sinceId" type="long"/>
    </method>
    <method name="sinceId" return="twitter4j.Paging"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sinceId" type="long"/>
    </method>
    <method name="getMaxId" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setMaxId"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="maxId" type="long"/>
    </method>
    <method name="maxId" return="twitter4j.Paging"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="maxId" type="long"/>
    </method>
    <doc>
    <![CDATA[Controlls pagination

 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.Paging -->
  <!-- start class twitter4j.Query -->
  <class name="Query" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Query"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Query" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getQuery" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setQuery"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="query" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the query string
 @param query - the query string
 @see <a href="http://apiwiki.twitter.com/Search-API-Documentation">Twitter API / Search API Documentation</a>
 @see <a href="http://search.twitter.com/operators">Twitter API / Search Operators</a>]]>
      </doc>
    </method>
    <method name="getLang" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setLang"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lang" type="java.lang.String"/>
      <doc>
      <![CDATA[restricts tweets to the given language, given by an <a href="http://en.wikipedia.org/wiki/ISO_639-1">ISO 639-1 code</a>
 @param lang an <a href="http://en.wikipedia.org/wiki/ISO_639-1">ISO 639-1 code</a>]]>
      </doc>
    </method>
    <method name="getRpp" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setRpp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rpp" type="int"/>
      <doc>
      <![CDATA[sets the number of tweets to return per page, up to a max of 100
 @param rpp the number of tweets to return per page]]>
      </doc>
    </method>
    <method name="getPage" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="page" type="int"/>
      <doc>
      <![CDATA[sets the page number (starting at 1) to return, up to a max of roughly 1500 results
 @param page - the page number (starting at 1) to return]]>
      </doc>
    </method>
    <method name="getSinceId" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setSinceId"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sinceId" type="long"/>
      <doc>
      <![CDATA[returns tweets with status ids greater than the given id.
 @param sinceId - returns tweets with status ids greater than the given id]]>
      </doc>
    </method>
    <method name="getGeocode" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setGeoCode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="latitude" type="double"/>
      <param name="longtitude" type="double"/>
      <param name="radius" type="double"/>
      <param name="unit" type="java.lang.String"/>
      <doc>
      <![CDATA[returns tweets by users located within a given radius of the given latitude/longitude, where the user's location is taken from their Twitter profile
 @param latitude latitude
 @param longtitude longtitude
 @param radius radius
 @param unit Query.MILES or Query.KILOMETERS]]>
      </doc>
    </method>
    <method name="asPostParameters" return="twitter4j.http.PostParameter[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="MILES" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="KILOMETERS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[A data class represents search query.
 @see <a href="http://apiwiki.twitter.com/Search-API-Documentation">Twitter API / Search API Documentation</a>
 @see <a href="http://search.twitter.com/operators">Twitter API / Search Operators</a>
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.Query -->
  <!-- start class twitter4j.QueryResult -->
  <class name="QueryResult" extends="twitter4j.TwitterResponse"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getSinceId" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMaxId" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRefreshUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getResultsPerPage" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTotal" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="The Twitter API doesn't return total anymore">
      <doc>
      <![CDATA[returns the number of hits
 @return number of hits
 @deprecated The Twitter API doesn't return total anymore
 @see <a href="http://yusuke.homeip.net/jira/browse/TFJ-108">TRJ-108 deprecate QueryResult#getTotal()</a>]]>
      </doc>
    </method>
    <method name="getWarning" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getCompletedIn" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPage" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getQuery" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTweets" return="java.util.List&lt;twitter4j.Tweet&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A data class representing search API response
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.QueryResult -->
  <!-- start class twitter4j.RateLimitStatus -->
  <class name="RateLimitStatus" extends="twitter4j.TwitterResponse"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getRemainingHits" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getHourlyLimit" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getResetTimeInSeconds" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDateTime" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getResetTime() instead">
      <doc>
      <![CDATA[@deprecated use getResetTime() instead]]>
      </doc>
    </method>
    <method name="getResetTime" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@since Twitter4J 2.0.9]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A data class representing Twitter rate limit status
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.RateLimitStatus -->
  <!-- start class twitter4j.RetweetDetails -->
  <class name="RetweetDetails" extends="twitter4j.TwitterResponse"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <method name="getRetweetId" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRetweetedAt" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRetweetingUser" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A data class representing one single retweet details.

 @author Yusuke Yamamoto - yusuke at mac.com
 @since Twitter4J 2.0.10]]>
    </doc>
  </class>
  <!-- end class twitter4j.RetweetDetails -->
  <!-- start class twitter4j.SavedSearch -->
  <class name="SavedSearch" extends="twitter4j.TwitterResponse"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getCreatedAt" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getQuery" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPosition" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getId" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A data class representing a Saved Search

 @author Yusuke Yamamoto - yusuke at mac.com
 @since Twitter4J 2.0.8]]>
    </doc>
  </class>
  <!-- end class twitter4j.SavedSearch -->
  <!-- start class twitter4j.Status -->
  <class name="Status" extends="twitter4j.TwitterResponse"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <constructor name="Status" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <exception name="JSONException" type="twitter4j.org.json.JSONException"/>
    </constructor>
    <method name="getCreatedAt" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the created_at

 @return created_at
 @since Twitter4J 1.1.0]]>
      </doc>
    </method>
    <method name="getId" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the id of the status

 @return the id]]>
      </doc>
    </method>
    <method name="getText" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the text of the status

 @return the text]]>
      </doc>
    </method>
    <method name="getSource" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the source

 @return the source
 @since Twitter4J 1.0.4]]>
      </doc>
    </method>
    <method name="isTruncated" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Test if the status is truncated

 @return true if truncated
 @since Twitter4J 1.0.4]]>
      </doc>
    </method>
    <method name="getInReplyToStatusId" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the in_reply_tostatus_id

 @return the in_reply_tostatus_id
 @since Twitter4J 1.0.4]]>
      </doc>
    </method>
    <method name="getInReplyToUserId" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the in_reply_user_id

 @return the in_reply_tostatus_id
 @since Twitter4J 1.0.4]]>
      </doc>
    </method>
    <method name="getInReplyToScreenName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the in_reply_to_screen_name

 @return the in_in_reply_to_screen_name
 @since Twitter4J 2.0.4]]>
      </doc>
    </method>
    <method name="getLatitude" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[returns The location's latitude that this tweet refers to.

 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getLongitude" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[returns The location's longitude that this tweet refers to.

 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="isFavorited" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Test if the status is favorited

 @return true if favorited
 @since Twitter4J 1.0.4]]>
      </doc>
    </method>
    <method name="getUser" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the user

 @return the user]]>
      </doc>
    </method>
    <method name="isRetweet" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getRetweetDetails" return="twitter4j.RetweetDetails"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A data class representing one single status of a user.
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.Status -->
  <!-- start interface twitter4j.StatusListener -->
  <interface name="StatusListener"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="onStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="twitter4j.Status"/>
    </method>
    <method name="onException"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ex" type="java.lang.Exception"/>
    </method>
    <doc>
    <![CDATA[@author Yusuke Yamamoto - yusuke at mac.com
 @since Twitter4J 2.0.4]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.StatusListener -->
  <!-- start class twitter4j.StatusStream -->
  <class name="StatusStream" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="next" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[@author Yusuke Yamamoto - yusuke at mac.com
 @since Twitter4J 2.0.4]]>
    </doc>
  </class>
  <!-- end class twitter4j.StatusStream -->
  <!-- start class twitter4j.Trend -->
  <class name="Trend" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <constructor name="Trend" type="twitter4j.org.json.JSONObject"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="JSONException" type="twitter4j.org.json.JSONException"/>
    </constructor>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getQuery" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A data class representing Treand.

 @author Yusuke Yamamoto - yusuke at mac.com
 @since Twitter4J 2.0.2]]>
    </doc>
  </class>
  <!-- end class twitter4j.Trend -->
  <!-- start class twitter4j.Trends -->
  <class name="Trends" extends="twitter4j.TwitterResponse"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Comparable&lt;twitter4j.Trends&gt;"/>
    <method name="compareTo" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="that" type="twitter4j.Trends"/>
    </method>
    <method name="getTrends" return="twitter4j.Trend[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAsOf" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTrendAt" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A data class representing Treands.

 @author Yusuke Yamamoto - yusuke at mac.com
 @since Twitter4J 2.0.2]]>
    </doc>
  </class>
  <!-- end class twitter4j.Trends -->
  <!-- start class twitter4j.Tweet -->
  <class name="Tweet" extends="twitter4j.TwitterResponse"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getText" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[returns the text
 @return the text]]>
      </doc>
    </method>
    <method name="getToUserId" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[returns the to_user_id
 @return the to_user_id value or -1 if to_user_id is not specified by the tweet]]>
      </doc>
    </method>
    <method name="getToUser" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[returns the to_user
 @return the to_user value or null if to_user is not specified by the tweet]]>
      </doc>
    </method>
    <method name="getFromUser" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[returns the from_user
 @return the from_user]]>
      </doc>
    </method>
    <method name="getId" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[returns the status id of the tweet
 @return the status id]]>
      </doc>
    </method>
    <method name="getFromUserId" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[returns the user id of the tweet's owner.<br>
 <font color="orange">Warning:</a> The user ids in the Search API are different from those in the REST API (about the two APIs). This defect is being tracked by Issue 214. This means that the to_user_id and from_user_id field vary from the actualy user id on Twitter.com. Applications will have to perform a screen name-based lookup with the users/show method to get the correct user id if necessary.
 @return the user id of the tweet's owner
 @see <a href="http://code.google.com/p/twitter-api/issues/detail?id=214">Issue 214:	Search API "from_user_id" doesn't match up with the proper Twitter "user_id"</a>]]>
      </doc>
    </method>
    <method name="getIsoLanguageCode" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[returns the iso language code of the tweet
 @return the iso language code of the tweet or null if iso_language_code is not specified by the tweet]]>
      </doc>
    </method>
    <method name="getSource" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[returns the source of the tweet
 @return the source of the tweet]]>
      </doc>
    </method>
    <method name="getProfileImageUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[returns the profile_image_url
 @return the profile_image_url]]>
      </doc>
    </method>
    <method name="getCreatedAt" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[returns the created_at
 @return the created_at]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A data class representing a Tweet in the search response
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.Tweet -->
  <!-- start class twitter4j.Twitter -->
  <class name="Twitter" extends="twitter4j.TwitterSupport"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <constructor name="Twitter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Twitter" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Twitter" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Twitter" type="java.lang.String, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setBaseURL"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="baseURL" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the base URL

 @param baseURL String the base URL]]>
      </doc>
    </method>
    <method name="getBaseURL" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the base URL

 @return the base URL]]>
      </doc>
    </method>
    <method name="setSearchBaseURL"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="searchBaseURL" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the search base URL

 @param searchBaseURL the search base URL
 @since Twitter4J 1.1.7]]>
      </doc>
    </method>
    <method name="getSearchBaseURL" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the search base url
 @return search base url
 @since Twitter4J 1.1.7]]>
      </doc>
    </method>
    <method name="setOAuthConsumer"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="consumerKey" type="java.lang.String"/>
      <param name="consumerSecret" type="java.lang.String"/>
      <doc>
      <![CDATA[@param consumerKey OAuth consumer key
 @param consumerSecret OAuth consumer secret
 @since Twitter 2.0.0]]>
      </doc>
    </method>
    <method name="getOAuthRequestToken" return="twitter4j.http.RequestToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Retrieves a request token
 @return generated request token.
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter 2.0.0
 @see <a href="http://apiwiki.twitter.com/OAuth-FAQ">Twitter API Wiki - OAuth FAQ</a>
 @see <a href="http://oauth.net/core/1.0/#auth_step1">OAuth Core 1.0 - 6.1.  Obtaining an Unauthorized Request Token</a>]]>
      </doc>
    </method>
    <method name="getOAuthRequestToken" return="twitter4j.http.RequestToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="callback_url" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
    </method>
    <method name="getOAuthAccessToken" return="twitter4j.http.AccessToken"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestToken" type="twitter4j.http.RequestToken"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Retrieves an access token assosiated with the supplied request token.
 @param requestToken the request token
 @return access token associsted with the supplied request token.
 @throws TwitterException when Twitter service or network is unavailable, or the user has not authorized
 @see <a href="http://apiwiki.twitter.com/OAuth-FAQ#Howlongdoesanaccesstokenlast">Twitter API Wiki - How long does an access token last?</a>
 @see <a href="http://oauth.net/core/1.0/#auth_step2">OAuth Core 1.0 - 6.2.  Obtaining User Authorization</a>
 @since Twitter 2.0.0]]>
      </doc>
    </method>
    <method name="getOAuthAccessToken" return="twitter4j.http.AccessToken"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestToken" type="twitter4j.http.RequestToken"/>
      <param name="pin" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Retrieves an access token assosiated with the supplied request token and sets userId.
 @param requestToken the request token
 @param pin pin
 @return access token associsted with the supplied request token.
 @throws TwitterException when Twitter service or network is unavailable, or the user has not authorized
 @see <a href="http://apiwiki.twitter.com/OAuth-FAQ#Howlongdoesanaccesstokenlast">Twitter API Wiki - How long does an access token last?</a>
 @see <a href="http://oauth.net/core/1.0/#auth_step2">OAuth Core 1.0 - 6.2.  Obtaining User Authorization</a>
 @since Twitter 2.0.8]]>
      </doc>
    </method>
    <method name="getOAuthAccessToken" return="twitter4j.http.AccessToken"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="token" type="java.lang.String"/>
      <param name="tokenSecret" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Retrieves an access token assosiated with the supplied request token and sets userId.
 @param token request token
 @param tokenSecret request token secret
 @return access token associsted with the supplied request token.
 @throws TwitterException when Twitter service or network is unavailable, or the user has not authorized
 @see <a href="http://apiwiki.twitter.com/OAuth-FAQ#Howlongdoesanaccesstokenlast">Twitter API Wiki - How long does an access token last?</a>
 @see <a href="http://oauth.net/core/1.0/#auth_step2">OAuth Core 1.0 - 6.2.  Obtaining User Authorization</a>
 @since Twitter 2.0.1]]>
      </doc>
    </method>
    <method name="getOAuthAccessToken" return="twitter4j.http.AccessToken"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="token" type="java.lang.String"/>
      <param name="tokenSecret" type="java.lang.String"/>
      <param name="oauth_verifier" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Retrieves an access token assosiated with the supplied request token.
 @param token request token
 @param tokenSecret request token secret
 @param oauth_verifier oauth_verifier or pin
 @return access token associsted with the supplied request token.
 @throws TwitterException when Twitter service or network is unavailable, or the user has not authorized
 @see <a href="http://apiwiki.twitter.com/OAuth-FAQ#Howlongdoesanaccesstokenlast">Twitter API Wiki - How long does an access token last?</a>
 @see <a href="http://oauth.net/core/1.0/#auth_step2">OAuth Core 1.0 - 6.2.  Obtaining User Authorization</a>
 @since Twitter 2.0.8]]>
      </doc>
    </method>
    <method name="setOAuthAccessToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="accessToken" type="twitter4j.http.AccessToken"/>
      <doc>
      <![CDATA[Sets the access token
 @param accessToken accessToken
 @since Twitter 2.0.0]]>
      </doc>
    </method>
    <method name="setOAuthAccessToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="token" type="java.lang.String"/>
      <param name="tokenSecret" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the access token
 @param token token
 @param tokenSecret token secret
 @since Twitter 2.0.0]]>
      </doc>
    </method>
    <method name="get" return="twitter4j.http.Response"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="url" type="java.lang.String"/>
      <param name="name1" type="java.lang.String"/>
      <param name="value1" type="java.lang.String"/>
      <param name="authenticate" type="boolean"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Issues an HTTP GET request.

 @param url          the request url
 @param authenticate if true, the request will be sent with BASIC authentication header
 @param name1        the name of the first parameter
 @param value1       the value of the first parameter
 @return the response
 @throws TwitterException when Twitter service or network is unavailable]]>
      </doc>
    </method>
    <method name="get" return="twitter4j.http.Response"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="url" type="java.lang.String"/>
      <param name="name1" type="java.lang.String"/>
      <param name="value1" type="java.lang.String"/>
      <param name="name2" type="java.lang.String"/>
      <param name="value2" type="java.lang.String"/>
      <param name="authenticate" type="boolean"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Issues an HTTP GET request.

 @param url          the request url
 @param name1        the name of the first parameter
 @param value1       the value of the first parameter
 @param name2        the name of the second parameter
 @param value2       the value of the second parameter
 @param authenticate if true, the request will be sent with BASIC authentication header
 @return the response
 @throws TwitterException when Twitter service or network is unavailable]]>
      </doc>
    </method>
    <method name="get" return="twitter4j.http.Response"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="url" type="java.lang.String"/>
      <param name="params" type="twitter4j.http.PostParameter[]"/>
      <param name="authenticate" type="boolean"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Issues an HTTP GET request.

 @param url          the request url
 @param params       the request parameters
 @param authenticate if true, the request will be sent with BASIC authentication header
 @return the response
 @throws TwitterException when Twitter service or network is unavailable]]>
      </doc>
    </method>
    <method name="get" return="twitter4j.http.Response"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="url" type="java.lang.String"/>
      <param name="params" type="twitter4j.http.PostParameter[]"/>
      <param name="paging" type="twitter4j.Paging"/>
      <param name="authenticate" type="boolean"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Issues an HTTP GET request.

 @param url          the request url
 @param params       the request parameters
 @param paging controls pagination
 @param authenticate if true, the request will be sent with BASIC authentication header
 @return the response
 @throws TwitterException when Twitter service or network is unavailable]]>
      </doc>
    </method>
    <method name="search" return="twitter4j.QueryResult"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="query" type="twitter4j.Query"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns tweets that match a specified query.
 <br>This method calls http://search.twitter.com/search
 @param query - the search condition
 @return the result
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 1.1.7
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-search">Twitter API Wiki / Twitter Search API Method: search</a>]]>
      </doc>
    </method>
    <method name="getTrends" return="twitter4j.Trends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the top ten topics that are currently trending on Twitter.  The response includes the time of the request, the name of each trend, and the url to the <a href="http://search.twitter.com/">Twitter Search</a> results page for that topic.
 <br>This method calls http://search.twitter.com/trends
 @return the result
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.2
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends">Twitter Search API Method: trends</a>]]>
      </doc>
    </method>
    <method name="getCurrentTrends" return="twitter4j.Trends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the current top 10 trending topics on Twitter.  The response includes the time of the request, the name of each trending topic, and query used on <a href="http://search.twitter.com/">Twitter Search</a> results page for that topic.
 <br>This method calls http://search.twitter.com/trends/current
 @return the result
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.2
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends">Twitter Search API Method: trends</a>]]>
      </doc>
    </method>
    <method name="getCurrentTrends" return="twitter4j.Trends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="excludeHashTags" type="boolean"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the current top 10 trending topics on Twitter.  The response includes the time of the request, the name of each trending topic, and query used on <a href="http://search.twitter.com/">Twitter Search</a> results page for that topic.
 <br>This method calls http://search.twitter.com/trends/current
 @param excludeHashTags Setting this to true will remove all hashtags from the trends list.
 @return the result
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.2
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends">Twitter Search API Method: trends</a>]]>
      </doc>
    </method>
    <method name="getDailyTrends" return="java.util.List&lt;twitter4j.Trends&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the top 20 trending topics for each hour in a given day.
 <br>This method calls http://search.twitter.com/trends/daily
 @return the result
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.2
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-daily">Twitter Search API Method: trends daily</a>]]>
      </doc>
    </method>
    <method name="getDailyTrends" return="java.util.List&lt;twitter4j.Trends&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="date" type="java.util.Date"/>
      <param name="excludeHashTags" type="boolean"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the top 20 trending topics for each hour in a given day.
 <br>This method calls http://search.twitter.com/trends/daily
 @param date Permits specifying a start date for the report.
 @param excludeHashTags Setting this to true will remove all hashtags from the trends list.
 @return the result
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.2
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-daily">Twitter Search API Method: trends daily</a>]]>
      </doc>
    </method>
    <method name="getWeeklyTrends" return="java.util.List&lt;twitter4j.Trends&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the top 30 trending topics for each day in a given week.
 <br>This method calls http://search.twitter.com/trends/weekly
 @return the result
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.2
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-weekly">Twitter Search API Method: trends weekly</a>]]>
      </doc>
    </method>
    <method name="getWeeklyTrends" return="java.util.List&lt;twitter4j.Trends&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="date" type="java.util.Date"/>
      <param name="excludeHashTags" type="boolean"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the top 30 trending topics for each day in a given week.
 <br>This method calls http://search.twitter.com/trends/weekly
 @param date Permits specifying a start date for the report.
 @param excludeHashTags Setting this to true will remove all hashtags from the trends list.
 @return the result
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.2
 @see <a href="http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-weekly">Twitter Search API Method: trends weekly</a>]]>
      </doc>
    </method>
    <method name="getPublicTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses from non-protected users who have set a custom user icon.
 <br>This method calls http://twitter.com/statuses/public_timeline

 @return list of statuses of the Public Timeline
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-public_timeline">Twitter API Wiki / Twitter REST API Method: statuses public_timeline</a>]]>
      </doc>
    </method>
    <method name="getPublicTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getPublicTimeline(long sinceID) instead">
      <param name="sinceID" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns only public statuses with an ID greater than (that is, more recent than) the specified ID.
 <br>This method calls http://twitter.com/statuses/public_timeline

 @param sinceID returns only public statuses with an ID greater than (that is, more recent than) the specified ID
 @return the 20 most recent statuses
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-public_timeline">Twitter API Wiki / Twitter REST API Method: statuses public_timeline</a>
 @deprecated use getPublicTimeline(long sinceID) instead]]>
      </doc>
    </method>
    <method name="getPublicTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sinceID" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns only public statuses with an ID greater than (that is, more recent than) the specified ID.
 <br>This method calls http://twitter.com/statuses/public_timeline

 @param sinceID returns only public statuses with an ID greater than (that is, more recent than) the specified ID
 @return the 20 most recent statuses
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-public_timeline">Twitter API Wiki / Twitter REST API Method: statuses public_timeline</a>]]>
      </doc>
    </method>
    <method name="getHomeTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses, including retweets, posted by the authenticating user and that user's friends. This is the equivalent of /timeline/home on the Web.
 <br>This method calls http://twitter.com/statuses/home_timeline

 @return list of the home Timeline
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-home_timeline">Twitter API Wiki / Twitter REST API Method: statuses home_timeline</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getHomeTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses, including retweets, posted by the authenticating user and that user's friends. This is the equivalent of /timeline/home on the Web.
 <br>This method calls http://twitter.com/statuses/home_timeline

 @param paging controls pagination
 @return list of the home Timeline
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-home_timeline">Twitter API Wiki / Twitter REST API Method: statuses home_timeline</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getFriendsTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses posted in the last 24 hours from the authenticating1 user and that user's friends.
 It's also possible to request another user's friends_timeline via the id parameter below.
 <br>This method calls http://twitter.com/statuses/friends_timeline

 @return list of the Friends Timeline
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>]]>
      </doc>
    </method>
    <method name="getFriendsTimelineByPage" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getFriendsTimeline(Paging paging) instead">
      <param name="page" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses posted in the last 24 hours from the authenticating user.
 <br>This method calls http://twitter.com/statuses/friends_timeline

 @param page the number of page
 @return list of the Friends Timeline
 @throws TwitterException when Twitter service or network is unavailable
 @deprecated Use getFriendsTimeline(Paging paging) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>]]>
      </doc>
    </method>
    <method name="getFriendsTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getFriendsTimeline(Paging paging) instead">
      <param name="page" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses posted in the last 24 hours from the authenticating user.
 <br>This method calls http://twitter.com/statuses/friends_timeline

 @param page the number of page
 @return list of the Friends Timeline
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 1.1.8
 @deprecated Use getFriendsTimeline(Paging paging) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>]]>
      </doc>
    </method>
    <method name="getFriendsTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getFriendsTimeline(Paging paging) instead">
      <param name="sinceId" type="long"/>
      <param name="page" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses posted in the last 24 hours from the authenticating user.
 <br>This method calls http://twitter.com/statuses/friends_timeline

 @param sinceId Returns only statuses with an ID greater than (that is, more recent than) the specified ID
 @param page    the number of page
 @return list of the Friends Timeline
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 1.1.8
 @deprecated Use getFriendsTimeline(Paging paging) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>]]>
      </doc>
    </method>
    <method name="getFriendsTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="The Twitter API does not support this method anymore.">
      <param name="id" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses posted in the last 24 hours from the specified userid.
 <br>This method calls http://twitter.com/statuses/friends_timeline

 @param id specifies the ID or screen name of the user for whom to return the friends_timeline
 @return list of the Friends Timeline
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @deprecated The Twitter API does not support this method anymore.]]>
      </doc>
    </method>
    <method name="getFriendsTimelineByPage" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="The Twitter API does not support this method anymore.">
      <param name="id" type="java.lang.String"/>
      <param name="page" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses posted in the last 24 hours from the specified userid.
 <br>This method calls http://twitter.com/statuses/friends_timeline

 @param id   specifies the ID or screen name of the user for whom to return the friends_timeline
 @param page the number of page
 @return list of the Friends Timeline
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @deprecated The Twitter API does not support this method anymore.]]>
      </doc>
    </method>
    <method name="getFriendsTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="The Twitter API does not support this method anymore.">
      <param name="id" type="java.lang.String"/>
      <param name="page" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses posted in the last 24 hours from the specified userid.
 <br>This method calls http://twitter.com/statuses/friends_timeline

 @param id   specifies the ID or screen name of the user for whom to return the friends_timeline
 @param page the number of page
 @return list of the Friends Timeline
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 1.1.8
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @deprecated The Twitter API does not support this method anymore.]]>
      </doc>
    </method>
    <method name="getFriendsTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="The Twitter API does not support this method anymore.">
      <param name="sinceId" type="long"/>
      <param name="id" type="java.lang.String"/>
      <param name="page" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses posted in the last 24 hours from the specified userid.
 <br>This method calls http://twitter.com/statuses/friends_timeline

 @param sinceId Returns only statuses with an ID greater than (that is, more recent than) the specified ID
 @param id   specifies the ID or screen name of the user for whom to return the friends_timeline
 @param page the number of page
 @return list of the Friends Timeline
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 1.1.8
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @deprecated The Twitter API does not support this method anymore.]]>
      </doc>
    </method>
    <method name="getFriendsTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses posted in the last 24 hours from the specified userid.
 <br>This method calls http://twitter.com/statuses/friends_timeline

 @param paging controls pagination
 @return list of the Friends Timeline
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>]]>
      </doc>
    </method>
    <method name="getFriendsTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="The Twitter API does not support this method anymore.">
      <param name="id" type="java.lang.String"/>
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses posted in the last 24 hours from the specified userid.
 <br>This method calls http://twitter.com/statuses/friends_timeline

 @param id   specifies the ID or screen name of the user for whom to return the friends_timeline
 @param paging controls pagination
 @return list of the Friends Timeline
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @deprecated The Twitter API does not support this method anymore.]]>
      </doc>
    </method>
    <method name="getFriendsTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getFriendsTimeline(Paging paging) instead">
      <param name="since" type="java.util.Date"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses posted in the last 24 hours from the authenticating user.
 <br>This method calls http://twitter.com/statuses/friends_timeline

 @param since narrows the returned results to just those statuses created after the specified HTTP-formatted date
 @return list of the Friends Timeline
 @throws TwitterException when Twitter service or network is unavailable
 @deprecated Use getFriendsTimeline(Paging paging) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>]]>
      </doc>
    </method>
    <method name="getFriendsTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getFriendsTimeline(Paging paging) instead">
      <param name="sinceId" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent statuses posted in the last 24 hours from the authenticating user.
 <br>This method calls http://twitter.com/statuses/friends_timeline

 @param sinceId Returns only statuses with an ID greater than (that is, more recent than) the specified ID
 @return list of the Friends Timeline
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 1.1.8
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @deprecated Use getFriendsTimeline(Paging paging) instead]]>
      </doc>
    </method>
    <method name="getFriendsTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="The Twitter API does not support this method anymore.">
      <param name="id" type="java.lang.String"/>
      <param name="since" type="java.util.Date"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the specified userid.
 <br>This method calls http://twitter.com/statuses/friends_timeline

 @param id    specifies the ID or screen name of the user for whom to return the friends_timeline
 @param since narrows the returned results to just those statuses created after the specified HTTP-formatted date
 @return list of the Friends Timeline
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @deprecated The Twitter API does not support this method anymore.]]>
      </doc>
    </method>
    <method name="getFriendsTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="The Twitter API does not support this method anymore.">
      <param name="id" type="java.lang.String"/>
      <param name="sinceId" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the specified userid.
 <br>This method calls http://twitter.com/statuses/friends_timeline

 @param id    specifies the ID or screen name of the user for whom to return the friends_timeline
 @param sinceId Returns only statuses with an ID greater than (that is, more recent than) the specified ID
 @return list of the Friends Timeline
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 1.1.8
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @deprecated The Twitter API does not support this method anymore.]]>
      </doc>
    </method>
    <method name="getUserTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="using long sinceId is suggested.">
      <param name="id" type="java.lang.String"/>
      <param name="count" type="int"/>
      <param name="since" type="java.util.Date"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the specified userid.
 <br>This method calls http://twitter.com/statuses/user_timeline

 @param id    specifies the ID or screen name of the user for whom to return the user_timeline
 @param count specifies the number of statuses to retrieve.  May not be greater than 200 for performance purposes
 @param since narrows the returned results to just those statuses created after the specified HTTP-formatted date
 @return list of the user Timeline
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @deprecated using long sinceId is suggested.]]>
      </doc>
    </method>
    <method name="getUserTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getUserTimeline(String id, Paging paging) instead">
      <param name="id" type="java.lang.String"/>
      <param name="count" type="int"/>
      <param name="sinceId" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the specified userid.
 <br>This method calls http://twitter.com/statuses/user_timeline

 @param id    specifies the ID or screen name of the user for whom to return the user_timeline
 @param count specifies the number of statuses to retrieve.  May not be greater than 200 for performance purposes
 @param sinceId Returns only statuses with an ID greater than (that is, more recent than) the specified ID
 @return list of the user Timeline
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 1.1.8
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @deprecated Use getUserTimeline(String id, Paging paging) instead]]>
      </doc>
    </method>
    <method name="getUserTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the specified userid.
 <br>This method calls http://twitter.com/statuses/user_timeline

 @param id    specifies the ID or screen name of the user for whom to return the user_timeline
 @param paging controls pagenation
 @return list of the user Timeline
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>]]>
      </doc>
    </method>
    <method name="getUserTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getUserTimeline(String id, Paging paging) instead">
      <param name="id" type="java.lang.String"/>
      <param name="since" type="java.util.Date"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the specified userid.
 <br>This method calls http://twitter.com/statuses/user_timeline

 @param id    specifies the ID or screen name of the user for whom to return the user_timeline
 @param since narrows the returned results to just those statuses created after the specified HTTP-formatted date
 @return the 20 most recent statuses posted in the last 24 hours from the user
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @deprecated Use getUserTimeline(String id, Paging paging) instead]]>
      </doc>
    </method>
    <method name="getUserTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getUserTimeline(String id, Paging paging) instead">
      <param name="id" type="java.lang.String"/>
      <param name="count" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the specified userid.
 <br>This method calls http://twitter.com/statuses/user_timeline

 @param id    specifies the ID or screen name of the user for whom to return the user_timeline
 @param count specifies the number of statuses to retrieve.  May not be greater than 200 for performance purposes
 @return the 20 most recent statuses posted in the last 24 hours from the user
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @deprecated Use getUserTimeline(String id, Paging paging) instead]]>
      </doc>
    </method>
    <method name="getUserTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="using long sinceId is suggested.">
      <param name="count" type="int"/>
      <param name="since" type="java.util.Date"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the authenticating user.
 <br>This method calls http://twitter.com/statuses/user_timeline

 @param count specifies the number of statuses to retrieve.  May not be greater than 200 for performance purposes
 @param since narrows the returned results to just those statuses created after the specified HTTP-formatted date
 @return the 20 most recent statuses posted in the last 24 hours from the user
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @deprecated using long sinceId is suggested.]]>
      </doc>
    </method>
    <method name="getUserTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getUserTimeline(String id, Paging paging) instead">
      <param name="count" type="int"/>
      <param name="sinceId" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the authenticating user.
 <br>This method calls http://twitter.com/statuses/user_timeline

 @param count specifies the number of statuses to retrieve.  May not be greater than 200 for performance purposes
 @param sinceId returns only statuses with an ID greater than (that is, more recent than) the specified ID.
 @return the 20 most recent statuses posted in the last 24 hours from the user
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @since Twitter4J 2.0.0
 @deprecated Use getUserTimeline(String id, Paging paging) instead]]>
      </doc>
    </method>
    <method name="getUserTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the specified userid.
 <br>This method calls http://twitter.com/statuses/user_timeline

 @param id specifies the ID or screen name of the user for whom to return the user_timeline
 @return the 20 most recent statuses posted in the last 24 hours from the user
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>]]>
      </doc>
    </method>
    <method name="getUserTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getUserTimeline(String id, Paging paging) instead">
      <param name="id" type="java.lang.String"/>
      <param name="sinceId" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the specified userid.
 <br>This method calls http://twitter.com/statuses/user_timeline

 @param id specifies the ID or screen name of the user for whom to return the user_timeline
 @param sinceId returns only statuses with an ID greater than (that is, more recent than) the specified ID.
 @return the 20 most recent statuses posted in the last 24 hours from the user
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @since Twitter4J 2.0.0
 @deprecated Use getUserTimeline(String id, Paging paging) instead]]>
      </doc>
    </method>
    <method name="getUserTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the authenticating user.
 <br>This method calls http://twitter.com/statuses/user_timeline

 @return the 20 most recent statuses posted in the last 24 hours from the user
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>]]>
      </doc>
    </method>
    <method name="getUserTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the authenticating user.
 <br>This method calls http://twitter.com/statuses/user_timeline

 @param paging controls pagination
 @return the 20 most recent statuses posted in the last 24 hours from the user
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="getUserTimeline" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getUserTimeline(Paging paging) instead">
      <param name="sinceId" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the most recent statuses posted in the last 24 hours from the authenticating user.
 <br>This method calls http://twitter.com/statuses/user_timeline

 @param sinceId returns only statuses with an ID greater than (that is, more recent than) the specified ID.
 @return the 20 most recent statuses posted in the last 24 hours from the user
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>
 @since Twitter4J 2.0.0
 @deprecated Use getUserTimeline(Paging paging) instead]]>
      </doc>
    </method>
    <method name="getReplies" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getMentions() instead">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent replies (status updates prefixed with @username) to the authenticating user.  Replies are only available to the authenticating user; you can not request a list of replies to another user whether public or protected.
 <br>This method calls http://twitter.com/statuses/mentions

 @return the 20 most recent replies
 @throws TwitterException when Twitter service or network is unavailable
 @deprecated Use getMentions() instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-mentions">Twitter API Wiki / Twitter REST API Method: statuses mentions</a>]]>
      </doc>
    </method>
    <method name="getReplies" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getMentions(Paging paging) instead">
      <param name="sinceId" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent replies (status updates prefixed with @username) to the authenticating user.  Replies are only available to the authenticating user; you can not request a list of replies to another user whether public or protected.
 <br>This method calls http://twitter.com/statuses/mentions

 @param sinceId Returns only statuses with an ID greater than (that is, more recent than) the specified ID
 @return the 20 most recent replies
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 1.1.8
 @deprecated Use getMentions(Paging paging) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-mentions">Twitter API Wiki / Twitter REST API Method: statuses mentions</a>]]>
      </doc>
    </method>
    <method name="getRepliesByPage" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getMentions(Paging paging) instead">
      <param name="page" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the most recent replies (status updates prefixed with @username) to the authenticating user.  Replies are only available to the authenticating user; you can not request a list of replies to another user whether public or protected.
 <br>This method calls http://twitter.com/statuses/mentions

 @param page the number of page
 @return the 20 most recent replies
 @throws TwitterException when Twitter service or network is unavailable
 @deprecated Use getMentions(Paging paging) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-mentions">Twitter API Wiki / Twitter REST API Method: statuses mentions</a>]]>
      </doc>
    </method>
    <method name="getReplies" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getMentions(Paging paging) instead">
      <param name="page" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the most recent replies (status updates prefixed with @username) to the authenticating user.  Replies are only available to the authenticating user; you can not request a list of replies to another user whether public or protected.
 <br>This method calls http://twitter.com/statuses/mentions

 @param page the number of page
 @return the 20 most recent replies
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 1.1.8
 @deprecated Use getMentions(Paging paging) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-mentions">Twitter API Wiki / Twitter REST API Method: statuses mentions</a>]]>
      </doc>
    </method>
    <method name="getReplies" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getMentions(Paging paging) instead">
      <param name="sinceId" type="long"/>
      <param name="page" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the most recent replies (status updates prefixed with @username) to the authenticating user.  Replies are only available to the authenticating user; you can not request a list of replies to another user whether public or protected.
 <br>This method calls http://twitter.com/statuses/mentions

 @param sinceId Returns only statuses with an ID greater than (that is, more recent than) the specified ID
 @param page the number of page
 @return the 20 most recent replies
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 1.1.8
 @deprecated Use getMentions(Paging paging) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-mentions">Twitter API Wiki / Twitter REST API Method: statuses mentions</a>]]>
      </doc>
    </method>
    <method name="getMentions" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent mentions (status containing @username) for the authenticating user.
 <br>This method calls http://twitter.com/statuses/mentions

 @return the 20 most recent replies
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-mentions">Twitter API Wiki / Twitter REST API Method: statuses mentions</a>]]>
      </doc>
    </method>
    <method name="getMentions" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent mentions (status containing @username) for the authenticating user.
 <br>This method calls http://twitter.com/statuses/mentions

 @param paging controls pagination
 @return the 20 most recent replies
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-mentions">Twitter API Wiki / Twitter REST API Method: statuses mentions</a>]]>
      </doc>
    </method>
    <method name="getRetweetedByMe" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent retweets posted by the authenticating user.
 <br>This method calls http://twitter.com/statuses/retweeted_by_me

 @return the 20 most recent retweets posted by the authenticating user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_by_me">Twitter API Wiki / Twitter REST API Method: statuses/retweeted_by_me</a>]]>
      </doc>
    </method>
    <method name="getRetweetedByMe" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent retweets posted by the authenticating user.
 <br>This method calls http://twitter.com/statuses/retweeted_by_me

 @param paging controls pagination
 @return the 20 most recent retweets posted by the authenticating user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_by_me">Twitter API Wiki / Twitter REST API Method: statuses/retweeted_by_me</a>]]>
      </doc>
    </method>
    <method name="getRetweetedToMe" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent retweets posted by the authenticating user's friends.
 <br>This method calls http://twitter.com/statuses/retweeted_to_me

 @return the 20 most recent retweets posted by the authenticating user's friends.
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_to_me">Twitter API Wiki / Twitter REST API Method: statuses/retweeted_to_me</a>]]>
      </doc>
    </method>
    <method name="getRetweetedToMe" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent retweets posted by the authenticating user's friends.
 <br>This method calls http://twitter.com/statuses/retweeted_to_me

 @param paging controls pagination
 @return the 20 most recent retweets posted by the authenticating user's friends.
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_to_me">Twitter API Wiki / Twitter REST API Method: statuses/retweeted_to_me</a>]]>
      </doc>
    </method>
    <method name="getRetweetsOfMe" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent tweets of the authenticated user that have been retweeted by others.
 <br>This method calls http://twitter.com/statuses/retweets_of_me

 @return the 20 most recent tweets of the authenticated user that have been retweeted by others.
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweets_of_me">Twitter API Wiki / Twitter REST API Method: statuses/retweets_of_me</a>]]>
      </doc>
    </method>
    <method name="getRetweetsOfMe" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent tweets of the authenticated user that have been retweeted by others.
 <br>This method calls http://twitter.com/statuses/retweets_of_me

 @param paging controls pagination
 @return the 20 most recent tweets of the authenticated user that have been retweeted by others.
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweets_of_me">Twitter API Wiki / Twitter REST API Method: statuses/retweets_of_me</a>]]>
      </doc>
    </method>
    <method name="show" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use showStatus(long id) instead.">
      <param name="id" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a single status, specified by the id parameter. The status's author will be returned inline.
 <br>This method calls http://twitter.com/statuses/show

 @param id the numerical ID of the status you're trying to retrieve
 @return a single status
 @throws TwitterException when Twitter service or network is unavailable
 @deprecated Use showStatus(long id) instead.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0show">Twitter API Wiki / Twitter REST API Method: statuses show</a>]]>
      </doc>
    </method>
    <method name="show" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use showStatus(long id) instead.">
      <param name="id" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a single status, specified by the id parameter. The status's author will be returned inline.
 <br>This method calls http://twitter.com/statuses/show

 @param id the numerical ID of the status you're trying to retrieve
 @return a single status
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 1.1.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0show">Twitter API Wiki / Twitter REST API Method: statuses show</a>
 @deprecated Use showStatus(long id) instead.]]>
      </doc>
    </method>
    <method name="showStatus" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a single status, specified by the id parameter. The status's author will be returned inline.
 <br>This method calls http://twitter.com/statuses/show

 @param id the numerical ID of the status you're trying to retrieve
 @return a single status
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0show">Twitter API Wiki / Twitter REST API Method: statuses show</a>]]>
      </doc>
    </method>
    <method name="update" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use updateStatus(String status) instead">
      <param name="status" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Updates the user's status.
 The text will be trimed if the length of the text is exceeding 160 characters.
 <br>This method calls http://twitter.com/statuses/update

 @param status the text of your status update
 @return the latest status
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0update">Twitter API Wiki / Twitter REST API Method: statuses update</a>
 @deprecated Use updateStatus(String status) instead]]>
      </doc>
    </method>
    <method name="updateStatus" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Updates the user's status.
 The text will be trimed if the length of the text is exceeding 160 characters.
 <br>This method calls http://twitter.com/statuses/update

 @param status the text of your status update
 @return the latest status
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0update">Twitter API Wiki / Twitter REST API Method: statuses update</a>]]>
      </doc>
    </method>
    <method name="updateStatus" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="java.lang.String"/>
      <param name="latitude" type="double"/>
      <param name="longitude" type="double"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Updates the user's status.
 The text will be trimed if the length of the text is exceeding 160 characters.
 <br>This method calls http://twitter.com/statuses/update

 @param status    the text of your status update
 @param latitude  The location's latitude that this tweet refers to.
 @param longitude The location's longitude that this tweet refers to.
 @return the latest status
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0update">Twitter API Wiki / Twitter REST API Method: statuses update</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="update" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use updateStatus(String status, long inReplyToStatusId) instead">
      <param name="status" type="java.lang.String"/>
      <param name="inReplyToStatusId" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Updates the user's status.
 The text will be trimed if the length of the text is exceeding 160 characters.
 <br>This method calls http://twitter.com/statuses/update

 @param status            the text of your status update
 @param inReplyToStatusId The ID of an existing status that the status to be posted is in reply to.  This implicitly sets the in_reply_to_user_id attribute of the resulting status to the user ID of the message being replied to.  Invalid/missing status IDs will be ignored.
 @return the latest status
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0update">Twitter API Wiki / Twitter REST API Method: statuses update</a>
 @deprecated Use updateStatus(String status, long inReplyToStatusId) instead]]>
      </doc>
    </method>
    <method name="updateStatus" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="java.lang.String"/>
      <param name="inReplyToStatusId" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Updates the user's status.
 The text will be trimed if the length of the text is exceeding 160 characters.
 <br>This method calls http://twitter.com/statuses/update

 @param status            the text of your status update
 @param inReplyToStatusId The ID of an existing status that the status to be posted is in reply to.  This implicitly sets the in_reply_to_user_id attribute of the resulting status to the user ID of the message being replied to.  Invalid/missing status IDs will be ignored.
 @return the latest status
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0update">Twitter API Wiki / Twitter REST API Method: statuses update</a>]]>
      </doc>
    </method>
    <method name="updateStatus" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="java.lang.String"/>
      <param name="inReplyToStatusId" type="long"/>
      <param name="latitude" type="double"/>
      <param name="longitude" type="double"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Updates the user's status.
 The text will be trimed if the length of the text is exceeding 160 characters.
 <br>This method calls http://twitter.com/statuses/update

 @param status            the text of your status update
 @param inReplyToStatusId The ID of an existing status that the status to be posted is in reply to.  This implicitly sets the in_reply_to_user_id attribute of the resulting status to the user ID of the message being replied to.  Invalid/missing status IDs will be ignored.
 @param latitude          The location's latitude that this tweet refers to.
 @param longitude         The location's longitude that this tweet refers to.
 @return the latest status
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0update">Twitter API Wiki / Twitter REST API Method: statuses update</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="destroyStatus" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusId" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Destroys the status specified by the required ID parameter.  The authenticating user must be the author of the specified status.
 <br>This method calls http://twitter.com/statuses/destroy

 @param statusId The ID of the status to destroy.
 @return the deleted status
 @throws TwitterException when Twitter service or network is unavailable
 @since 1.0.5
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: statuses destroy</a>]]>
      </doc>
    </method>
    <method name="retweetStatus" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusId" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Retweets a tweet. Requires the id parameter of the tweet you are retweeting. Returns the original tweet with retweet details embedded.
 <br>This method calls http://twitter.com/statuses/retweet

 @param statusId The ID of the status to retweet.
 @return the retweeted status
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweet">Twitter API Wiki / Twitter REST API Method: statuses retweet</a>]]>
      </doc>
    </method>
    <method name="getRetweets" return="java.util.List&lt;twitter4j.RetweetDetails&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusId" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns up to 100 of the first retweets of a given tweet.
 <br>This method calls http://twitter.com/statuses/retweets

 @param statusId The numerical ID of the tweet you want the retweets of.
 @return the retweets of a given tweet
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweets">Twitter API Wiki / Twitter REST API Method: statuses retweets</a>]]>
      </doc>
    </method>
    <method name="getUserDetail" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use showUser(id) instead">
      <param name="id" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns extended information of a given user, specified by ID or screen name as per the required id parameter below.  This information includes design settings, so third party developers can theme their widgets according to a given user's preferences.
 <br>This method calls http://twitter.com/users/show

 @param id the ID or screen name of the user for whom to request the detail
 @return User
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-users%C2%A0show">Twitter API Wiki / Twitter REST API Method: users show</a>
 @deprecated use showUser(id) instead]]>
      </doc>
    </method>
    <method name="showUser" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns extended information of a given user, specified by ID or screen name as per the required id parameter below.  This information includes design settings, so third party developers can theme their widgets according to a given user's preferences.
 <br>This method calls http://twitter.com/users/show

 @param id the ID or screen name of the user for whom to request the detail
 @return User
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-users%C2%A0show">Twitter API Wiki / Twitter REST API Method: users show</a>
 @since Twitter4J 2.0.9]]>
      </doc>
    </method>
    <method name="getFriends" return="java.util.List&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getFriendsStatues() instead">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the specified user's friends, each with current status inline.
 <br>This method calls http://twitter.com/statuses/friends

 @return the list of friends
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses friends</a>
 @deprecated use getFriendsStatues() instead]]>
      </doc>
    </method>
    <method name="getFriendsStatuses" return="java.util.List&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the specified user's friends, each with current status inline.
 <br>This method calls http://twitter.com/statuses/friends

 @return the list of friends
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses friends</a>
 @since Twitter4J 2.0.9]]>
      </doc>
    </method>
    <method name="getFriends" return="java.util.List&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getFriendsStatuses(Paging paging) instead">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the specified user's friends, each with current status inline.
 <br>This method calls http://twitter.com/statuses/friends

 @param paging controls pagination
 @return the list of friends
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses friends</a>
 @deprecated Use getFriendsStatuses(Paging paging) instead]]>
      </doc>
    </method>
    <method name="getFriendsStatuses" return="java.util.List&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the specified user's friends, each with current status inline.
 <br>This method calls http://twitter.com/statuses/friends

 @param paging controls pagination
 @return the list of friends
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.9
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses friends</a>]]>
      </doc>
    </method>
    <method name="getFriends" return="java.util.List&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getFriendsStatuses(Paging paging) instead">
      <param name="page" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the specified user's friends, each with current status inline.
 <br>This method calls http://twitter.com/statuses/friends

 @param page number of page
 @return the list of friends
 @throws TwitterException when Twitter service or network is unavailable
 @deprecated Use getFriendsStatuses(Paging paging) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses friends</a>]]>
      </doc>
    </method>
    <method name="getFriends" return="java.util.List&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getFriendsStatuses(id) instead">
      <param name="id" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the user's friends, each with current status inline.
 <br>This method calls http://twitter.com/statuses/friends

 @param id the ID or screen name of the user for whom to request a list of friends
 @return the list of friends
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses friends</a>
 @deprecated use getFriendsStatuses(id) instead]]>
      </doc>
    </method>
    <method name="getFriendsStatuses" return="java.util.List&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the user's friends, each with current status inline.
 <br>This method calls http://twitter.com/statuses/friends

 @param id the ID or screen name of the user for whom to request a list of friends
 @return the list of friends
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses friends</a>
 @since Twitter4J 2.0.9]]>
      </doc>
    </method>
    <method name="getFriends" return="java.util.List&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getFriendsStatuses(id,paging) instead">
      <param name="id" type="java.lang.String"/>
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the user's friends, each with current status inline.
 <br>This method calls http://twitter.com/statuses/friends

 @param id the ID or screen name of the user for whom to request a list of friends
 @param paging controls pagination
 @return the list of friends
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses friends</a>
 @deprecated use getFriendsStatuses(id,paging) instead]]>
      </doc>
    </method>
    <method name="getFriendsStatuses" return="java.util.List&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the user's friends, each with current status inline.
 <br>This method calls http://twitter.com/statuses/friends

 @param id the ID or screen name of the user for whom to request a list of friends
 @param paging controls pagination
 @return the list of friends
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.9
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses friends</a>]]>
      </doc>
    </method>
    <method name="getFriends" return="java.util.List&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getFriendsStatuses(String id, Paging paging) instead">
      <param name="id" type="java.lang.String"/>
      <param name="page" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the user's friends, each with current status inline.
 <br>This method calls http://twitter.com/statuses/friends

 @param id   the ID or screen name of the user for whom to request a list of friends
 @param page the number of page
 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @deprecated Use getFriendsStatuses(String id, Paging paging) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0friends">Twitter API Wiki / Twitter REST API Method: statuses friends</a>]]>
      </doc>
    </method>
    <method name="getFollowers" return="java.util.List&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getFollowersStatuses() instead">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the authenticating user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://twitter.com/statuses/followers

 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses followers</a>
 @deprecated use getFollowersStatuses() instead]]>
      </doc>
    </method>
    <method name="getFollowersStatuses" return="java.util.List&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the authenticating user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://twitter.com/statuses/followers

 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses followers</a>
 @since Twitter4J 2.0.9]]>
      </doc>
    </method>
    <method name="getFollowers" return="java.util.List&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getFollowersStatuses(paging)">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the authenticating user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://twitter.com/statuses/followers

 @param paging controls pagination
 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses followers</a>
 @deprecated use getFollowersStatuses(paging)]]>
      </doc>
    </method>
    <method name="getFollowersStatuses" return="java.util.List&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the authenticating user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://twitter.com/statuses/followers

 @param paging controls pagination
 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.9
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses followers</a>]]>
      </doc>
    </method>
    <method name="getFollowers" return="java.util.List&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getFollowersStatuses(Paging paging) instead">
      <param name="page" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the authenticating user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://twitter.com/statuses/followers

 @param page Retrieves the next 100 followers.
 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 1.1.0
 @deprecated Use getFollowersStatuses(Paging paging) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses followers</a>]]>
      </doc>
    </method>
    <method name="getFollowers" return="java.util.List&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getFollowersStatuses(id) instead">
      <param name="id" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the authenticating user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://twitter.com/statuses/followers

 @param id The ID or screen name of the user for whom to request a list of followers.
 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 1.1.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses followers</a>
 @deprecated use getFollowersStatuses(id) instead]]>
      </doc>
    </method>
    <method name="getFollowersStatuses" return="java.util.List&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the authenticating user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://twitter.com/statuses/followers

 @param id The ID or screen name of the user for whom to request a list of followers.
 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.9
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses followers</a>]]>
      </doc>
    </method>
    <method name="getFollowers" return="java.util.List&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getFollowersStatuses(id) instead">
      <param name="id" type="java.lang.String"/>
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the authenticating user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://twitter.com/statuses/followers

 @param id   The ID or screen name of the user for whom to request a list of followers.
 @param paging controls pagination
 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses followers</a>
 @deprecated use getFollowersStatuses(id) instead]]>
      </doc>
    </method>
    <method name="getFollowersStatuses" return="java.util.List&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the authenticating user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://twitter.com/statuses/followers

 @param id   The ID or screen name of the user for whom to request a list of followers.
 @param paging controls pagination
 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.9
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses followers</a>]]>
      </doc>
    </method>
    <method name="getFollowers" return="java.util.List&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getFollowersStatuses(String id, Paging paging) instead">
      <param name="id" type="java.lang.String"/>
      <param name="page" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the authenticating user's followers, each with current status inline. They are ordered by the order in which they joined Twitter (this is going to be changed).
 <br>This method calls http://twitter.com/statuses/followers

 @param id   The ID or screen name of the user for whom to request a list of followers.
 @param page Retrieves the next 100 followers.
 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 1.1.0
 @deprecated Use getFollowersStatuses(String id, Paging paging) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0followers">Twitter API Wiki / Twitter REST API Method: statuses followers</a>]]>
      </doc>
    </method>
    <method name="getFeatured" return="java.util.List&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a list of the users currently featured on the site with their current statuses inline.

 @return List of User
 @throws TwitterException when Twitter service or network is unavailable]]>
      </doc>
    </method>
    <method name="getDirectMessages" return="java.util.List&lt;twitter4j.DirectMessage&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a list of the direct messages sent to the authenticating user.
 <br>This method calls http://twitter.com/direct_messages

 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages">Twitter API Wiki / Twitter REST API Method: direct_messages</a>]]>
      </doc>
    </method>
    <method name="getDirectMessages" return="java.util.List&lt;twitter4j.DirectMessage&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a list of the direct messages sent to the authenticating user.
 <br>This method calls http://twitter.com/direct_messages

 @param paging controls pagination
 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages">Twitter API Wiki / Twitter REST API Method: direct_messages</a>]]>
      </doc>
    </method>
    <method name="getDirectMessagesByPage" return="java.util.List&lt;twitter4j.DirectMessage&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getDirectMessages(Paging paging) instead">
      <param name="page" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a list of the direct messages sent to the authenticating user.
 <br>This method calls http://twitter.com/direct_messages

 @param page the number of page
 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @deprecated Use getDirectMessages(Paging paging) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages">Twitter API Wiki / Twitter REST API Method: direct_messages</a>]]>
      </doc>
    </method>
    <method name="getDirectMessages" return="java.util.List&lt;twitter4j.DirectMessage&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getDirectMessages(Paging paging) instead">
      <param name="page" type="int"/>
      <param name="sinceId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a list of the direct messages sent to the authenticating user.
 <br>This method calls http://twitter.com/direct_messages

 @param page    the number of page
 @param sinceId Returns only direct messages with an ID greater than (that is, more recent than) the specified ID.
 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.0
 @deprecated Use getDirectMessages(Paging paging) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages">Twitter API Wiki / Twitter REST API Method: direct_messages</a>]]>
      </doc>
    </method>
    <method name="getDirectMessages" return="java.util.List&lt;twitter4j.DirectMessage&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getDirectMessages(Paging paging) instead">
      <param name="sinceId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a list of the direct messages sent to the authenticating user.
 <br>This method calls http://twitter.com/direct_messages

 @param sinceId Returns only direct messages with an ID greater than (that is, more recent than) the specified ID.
 @return list of direct messages
 @throws TwitterException when Twitter service or network is unavailable
 @deprecated Use getDirectMessages(Paging paging) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages">Twitter API Wiki / Twitter REST API Method: direct_messages</a>]]>
      </doc>
    </method>
    <method name="getDirectMessages" return="java.util.List&lt;twitter4j.DirectMessage&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getDirectMessages(Paging paging) instead">
      <param name="since" type="java.util.Date"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a list of the direct messages sent to the authenticating user.
 <br>This method calls http://twitter.com/direct_messages

 @param since narrows the resulting list of direct messages to just those sent after the specified HTTP-formatted date
 @return list of direct messages
 @throws TwitterException when Twitter service or network is unavailable
 @deprecated Use getDirectMessages(Paging paging) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages">Twitter API Wiki / Twitter REST API Method: direct_messages</a>]]>
      </doc>
    </method>
    <method name="getSentDirectMessages" return="java.util.List&lt;twitter4j.DirectMessage&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a list of the direct messages sent by the authenticating user.
 <br>This method calls http://twitter.com/direct_messages/sent

 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages%C2%A0sent">Twitter API Wiki / Twitter REST API Method: direct_messages sent</a>]]>
      </doc>
    </method>
    <method name="getSentDirectMessages" return="java.util.List&lt;twitter4j.DirectMessage&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a list of the direct messages sent by the authenticating user.
 <br>This method calls http://twitter.com/direct_messages/sent

 @param paging controls pagination
 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages%C2%A0sent">Twitter API Wiki / Twitter REST API Method: direct_messages sent</a>]]>
      </doc>
    </method>
    <method name="getSentDirectMessages" return="java.util.List&lt;twitter4j.DirectMessage&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="using long sinceId is suggested.">
      <param name="since" type="java.util.Date"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a list of the direct messages sent by the authenticating user.
 <br>This method calls http://twitter.com/direct_messages/sent

 @param since narrows the resulting list of direct messages to just those sent after the specified HTTP-formatted date
 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @deprecated using long sinceId is suggested.
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages%C2%A0sent">Twitter API Wiki / Twitter REST API Method: direct_messages sent</a>]]>
      </doc>
    </method>
    <method name="getSentDirectMessages" return="java.util.List&lt;twitter4j.DirectMessage&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getSentDirectMessages(Paging paging) instead">
      <param name="sinceId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a list of the direct messages sent by the authenticating user.
 <br>This method calls http://twitter.com/direct_messages/sent

 @param sinceId returns only sent direct messages with an ID greater than (that is, more recent than) the specified ID
 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @deprecated Use getSentDirectMessages(Paging paging) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages%C2%A0sent">Twitter API Wiki / Twitter REST API Method: direct_messages sent</a>]]>
      </doc>
    </method>
    <method name="getSentDirectMessages" return="java.util.List&lt;twitter4j.DirectMessage&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getSentDirectMessages(Paging paging) instead">
      <param name="page" type="int"/>
      <param name="sinceId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a list of the direct messages sent by the authenticating user.
 <br>This method calls http://twitter.com/direct_messages/sent

 @param sinceId returns only sent direct messages with an ID greater than (that is, more recent than) the specified ID
 @param page Retrieves the 20 next most recent direct messages.
 @return List
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.0
 @deprecated Use getSentDirectMessages(Paging paging) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages%C2%A0sent">Twitter API Wiki / Twitter REST API Method: direct_messages sent</a>]]>
      </doc>
    </method>
    <method name="sendDirectMessage" return="twitter4j.DirectMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="text" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Sends a new direct message to the specified user from the authenticating user.  Requires both the user and text parameters below.
 The text will be trimed if the length of the text is exceeding 140 characters.
 <br>This method calls http://twitter.com/direct_messages/new

 @param id   the ID or screen name of the user to whom send the direct message
 @param text String
 @return DirectMessage
 @throws TwitterException when Twitter service or network is unavailable
     @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages%C2%A0new">Twitter API Wiki / Twitter REST API Method: direct_messages new</a>]]>
      </doc>
    </method>
    <method name="deleteDirectMessage" return="twitter4j.DirectMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use destroyDirectMessage(int id) instead">
      <param name="id" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Destroys the direct message specified in the required ID parameter.  The authenticating user must be the recipient of the specified direct message.
 <br>This method calls http://twitter.com/direct_messages/destroy

 @param id the ID of the direct message to destroy
 @return the deleted direct message
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: direct_messages destroy</a>
 @deprecated Use destroyDirectMessage(int id) instead]]>
      </doc>
    </method>
    <method name="destroyDirectMessage" return="twitter4j.DirectMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Destroys the direct message specified in the required ID parameter.  The authenticating user must be the recipient of the specified direct message.
 <br>This method calls http://twitter.com/direct_messages/destroy

 @param id the ID of the direct message to destroy
 @return the deleted direct message
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: direct_messages destroy</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="create" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use createFriendship(String id) instead">
      <param name="id" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Befriends the user specified in the ID parameter as the authenticating user.  Returns the befriended user in the requested format when successful.  Returns a string describing the failure condition when unsuccessful.

 @param id the ID or screen name of the user to be befriended
 @return the befriended user
 @throws TwitterException when Twitter service or network is unavailable
 @deprecated Use createFriendship(String id) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships%C2%A0create">Twitter API Wiki / Twitter REST API Method: friendships create</a>]]>
      </doc>
    </method>
    <method name="createFriendship" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Befriends the user specified in the ID parameter as the authenticating user.  Returns the befriended user in the requested format when successful.  Returns a string describing the failure condition when unsuccessful.

 @param id the ID or screen name of the user to be befriended
 @return the befriended user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships%C2%A0create">Twitter API Wiki / Twitter REST API Method: friendships create</a>]]>
      </doc>
    </method>
    <method name="createFriendship" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="follow" type="boolean"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Befriends the user specified in the ID parameter as the authenticating user.  Returns the befriended user in the requested format when successful.  Returns a string describing the failure condition when unsuccessful.

 @param id the ID or screen name of the user to be befriended
 @param follow Enable notifications for the target user in addition to becoming friends.
 @return the befriended user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.2
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships%C2%A0create">Twitter API Wiki / Twitter REST API Method: friendships create</a>]]>
      </doc>
    </method>
    <method name="destroy" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use destroyFriendship(String id) instead">
      <param name="id" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Discontinues friendship with the user specified in the ID parameter as the authenticating user.  Returns the un-friended user in the requested format when successful.  Returns a string describing the failure condition when unsuccessful.

 @param id the ID or screen name of the user for whom to request a list of friends
 @return User
 @throws TwitterException when Twitter service or network is unavailable
 @deprecated Use destroyFriendship(String id) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: friendships destroy</a>]]>
      </doc>
    </method>
    <method name="destroyFriendship" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Discontinues friendship with the user specified in the ID parameter as the authenticating user.  Returns the un-friended user in the requested format when successful.  Returns a string describing the failure condition when unsuccessful.

 @param id the ID or screen name of the user for whom to request a list of friends
 @return User
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: friendships destroy</a>]]>
      </doc>
    </method>
    <method name="exists" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use friendshipExists(String userA, String userB)">
      <param name="userA" type="java.lang.String"/>
      <param name="userB" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Tests if a friendship exists between two users.

 @param userA The ID or screen_name of the first user to test friendship for.
 @param userB The ID or screen_name of the second user to test friendship for.
 @return if a friendship exists between two users.
 @throws TwitterException when Twitter service or network is unavailable
 @deprecated Use friendshipExists(String userA, String userB)
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships-exists">Twitter API Wiki / Twitter REST API Method: friendships exists</a>]]>
      </doc>
    </method>
    <method name="existsFriendship" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userA" type="java.lang.String"/>
      <param name="userB" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Tests if a friendship exists between two users.

 @param userA The ID or screen_name of the first user to test friendship for.
 @param userB The ID or screen_name of the second user to test friendship for.
 @return if a friendship exists between two users.
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friendships-exists">Twitter API Wiki / Twitter REST API Method: friendships exists</a>]]>
      </doc>
    </method>
    <method name="getFriendsIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the authenticating user is following.
 @return an array of numeric IDs for every user the authenticating user is following
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friends%C2%A0ids">Twitter API Wiki / Twitter REST API Method: friends ids</a>]]>
      </doc>
    </method>
    <method name="getFriendsIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getFriendsIDs(long cursor) instead">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the authenticating user is following.
 @param paging Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @return an array of numeric IDs for every user the authenticating user is following
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friends%C2%A0ids">Twitter API Wiki / Twitter REST API Method: friends ids</a>
 @deprecated use getFriendsIDs(long cursor) instead]]>
      </doc>
    </method>
    <method name="getFriendsIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the authenticating user is following.
 @param cursor  Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @return an array of numeric IDs for every user the authenticating user is following
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friends%C2%A0ids">Twitter API Wiki / Twitter REST API Method: friends ids</a>]]>
      </doc>
    </method>
    <method name="getFriendsIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is following.<br>
 all IDs are attempted to be returned, but large sets of IDs will likely fail with timeout errors.
 @param userId Specfies the ID of the user for whom to return the friends list.
 @return an array of numeric IDs for every user the specified user is following
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friends%C2%A0ids">Twitter API Wiki / Twitter REST API Method: friends ids</a>]]>
      </doc>
    </method>
    <method name="getFriendsIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getFriendsIDs(int userId, long cursor) instead">
      <param name="userId" type="int"/>
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is following.
 @param userId Specifies the ID of the user for whom to return the friends list.
 @param paging Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @return an array of numeric IDs for every user the specified user is following
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friends%C2%A0ids">Twitter API Wiki / Twitter REST API Method: friends ids</a>
 @deprecated use getFriendsIDs(int userId, long cursor) instead]]>
      </doc>
    </method>
    <method name="getFriendsIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is following.
 @param userId Specifies the ID of the user for whom to return the friends list.
 @param cursor  Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @return an array of numeric IDs for every user the specified user is following
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-friends%C2%A0ids">Twitter API Wiki / Twitter REST API Method: friends ids</a>]]>
      </doc>
    </method>
    <method name="getFriendsIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is following.
 @param screenName Specfies the screen name of the user for whom to return the friends list.
 @return an array of numeric IDs for every user the specified user is following
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.0
 @see <a href="http://apiwiki.twitter.com/REST-API-Documentation#friends/ids">Twitter API Wiki / REST API Documentation - Social Graph Methods - friends/ids</a>]]>
      </doc>
    </method>
    <method name="getFriendsIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getFriendsIDs(String screenName, long cursor) instead">
      <param name="screenName" type="java.lang.String"/>
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is following.
 @param screenName Specfies the screen name of the user for whom to return the friends list.
 @param paging Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @return an array of numeric IDs for every user the specified user is following
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/REST-API-Documentation#friends/ids">Twitter API Wiki / REST API Documentation - Social Graph Methods - friends/ids</a>
 @deprecated use getFriendsIDs(String screenName, long cursor) instead]]>
      </doc>
    </method>
    <method name="getFriendsIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is following.
 @param screenName Specfies the screen name of the user for whom to return the friends list.
 @param cursor  Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @return an array of numeric IDs for every user the specified user is following
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/REST-API-Documentation#friends/ids">Twitter API Wiki / REST API Documentation - Social Graph Methods - friends/ids</a>]]>
      </doc>
    </method>
    <method name="getFollowersIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 @return The ID or screen_name of the user to retrieve the friends ID list for.
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers ids</a>]]>
      </doc>
    </method>
    <method name="getFollowersIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getFollowersIDs(long cursor) instead">
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 @return The ID or screen_name of the user to retrieve the friends ID list for.
 @param paging Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers ids</a>
 @deprecated use getFollowersIDs(long cursor) instead]]>
      </doc>
    </method>
    <method name="getFollowersIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 @return The ID or screen_name of the user to retrieve the friends ID list for.
 @param cursor  Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers ids</a>]]>
      </doc>
    </method>
    <method name="getFollowersIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 @param userId Specfies the ID of the user for whom to return the followers list.
 @return The ID or screen_name of the user to retrieve the friends ID list for.
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers ids</a>]]>
      </doc>
    </method>
    <method name="getFollowersIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getFollowersIDs(int userId, long cursor) instead">
      <param name="userId" type="int"/>
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 @param userId Specfies the ID of the user for whom to return the followers list.
 @param paging Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @return The ID or screen_name of the user to retrieve the friends ID list for.
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers ids</a>
 @deprecated use getFollowersIDs(int userId, long cursor) instead]]>
      </doc>
    </method>
    <method name="getFollowersIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userId" type="int"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 @param userId Specifies the ID of the user for whom to return the followers list.
 @param cursor  Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @return The ID or screen_name of the user to retrieve the friends ID list for.
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers ids</a>]]>
      </doc>
    </method>
    <method name="getFollowersIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 @param screenName Specfies the screen name of the user for whom to return the followers list.
 @return The ID or screen_name of the user to retrieve the friends ID list for.
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers ids</a>]]>
      </doc>
    </method>
    <method name="getFollowersIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getFollowersIDs(String screenName, long cursor) instead">
      <param name="screenName" type="java.lang.String"/>
      <param name="paging" type="twitter4j.Paging"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 @param screenName Specfies the screen name of the user for whom to return the followers list.
 @param paging Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @return The ID or screen_name of the user to retrieve the friends ID list for.
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers ids</a>
 @deprecated use getFollowersIDs(String screenName, long cursor) instead]]>
      </doc>
    </method>
    <method name="getFollowersIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="screenName" type="java.lang.String"/>
      <param name="cursor" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric IDs for every user the specified user is followed by.
 @param screenName Specfies the screen name of the user for whom to return the followers list.
 @param cursor  Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned.
 @return The ID or screen_name of the user to retrieve the friends ID list for.
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.10
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-followers%C2%A0ids">Twitter API Wiki / Twitter REST API Method: followers ids</a>]]>
      </doc>
    </method>
    <method name="verifyCredentials" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful; returns a 401 status code and an error message if not.  Use this method to test if supplied user credentials are valid.

 @return user
 @since Twitter4J 2.0.0
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0verify_credentials">Twitter API Wiki / Twitter REST API Method: account verify_credentials</a>]]>
      </doc>
    </method>
    <method name="updateLocation" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use updateProfile(String name, String email, String url, String location, String description) instead">
      <param name="location" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Updates the location

 @param location the current location of the user
 @return the updated user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 1.0.4
 @see <a href="http://apiwiki.twitter.com/REST%20API%20Documentation#account/updatelocation">Twitter REST API Documentation &gt; Account Methods &gt; account/update_location</a>
 @deprecated Use updateProfile(String name, String email, String url, String location, String description) instead]]>
      </doc>
    </method>
    <method name="updateProfile" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="email" type="java.lang.String"/>
      <param name="url" type="java.lang.String"/>
      <param name="location" type="java.lang.String"/>
      <param name="description" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Sets values that users are able to set under the "Account" tab of their settings page. Only the parameters specified(non-null) will be updated.

 @param name Optional. Maximum of 20 characters.
 @param email Optional. Maximum of 40 characters. Must be a valid email address.
 @param url Optional. Maximum of 100 characters. Will be prepended with "http://" if not present.
 @param location Optional. Maximum of 30 characters. The contents are not normalized or geocoded in any way.
 @param description Optional. Maximum of 160 characters.
 @return the updated user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.2
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0update_profile">Twitter REST API Documentation &gt; Account Methods &gt; account/update_location</a>]]>
      </doc>
    </method>
    <method name="rateLimitStatus" return="twitter4j.RateLimitStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the remaining number of API requests available to the requesting user before the API limit is reached for the current hour. Calls to rate_limit_status do not count against the rate limit.  If authentication credentials are provided, the rate limit status for the authenticating user is returned.  Otherwise, the rate limit status for the requester's IP address is returned.<br>

 @return the rate limit status
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 1.1.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0rate_limit_status">Twitter API Wiki / Twitter REST API Method: account rate_limit_status</a>]]>
      </doc>
    </method>
    <method name="updateDeliverlyDevice" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="device" type="twitter4j.Twitter.Device"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Sets which device Twitter delivers updates to for the authenticating user.  Sending none as the device parameter will disable IM or SMS updates.

 @param device new Delivery device. Must be one of: IM, SMS, NONE.
 @return the updated user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 1.0.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0update_delivery_device">Twitter API Wiki / Twitter REST API Method: account update_delivery_device</a>]]>
      </doc>
    </method>
    <method name="updateProfileColors" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="profileBackgroundColor" type="java.lang.String"/>
      <param name="profileTextColor" type="java.lang.String"/>
      <param name="profileLinkColor" type="java.lang.String"/>
      <param name="profileSidebarFillColor" type="java.lang.String"/>
      <param name="profileSidebarBorderColor" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Sets one or more hex values that control the color scheme of the authenticating user's profile page on twitter.com.  These values are also returned in the getUserDetail() method.
 @param profileBackgroundColor optional, can be null
 @param profileTextColor optional, can be null
 @param profileLinkColor optional, can be null
 @param profileSidebarFillColor optional, can be null
 @param profileSidebarBorderColor optional, can be null
 @return the updated user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.0
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0update_profile_colors">Twitter API Wiki / Twitter REST API Method: account update_profile_colors</a>]]>
      </doc>
    </method>
    <method name="favorites" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getFavorited() instead">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format.

 @return List<Status>
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites">Twitter API Wiki / Twitter REST API Method: favorites</a>
 @deprecated Use getFavorited() instead]]>
      </doc>
    </method>
    <method name="getFavorites" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format.

 @return List<Status>
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites">Twitter API Wiki / Twitter REST API Method: favorites</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="favorites" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getFavorites(int page) instead">
      <param name="page" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format.

 @param page the number of page
 @return List<Status>
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites">Twitter API Wiki / Twitter REST API Method: favorites</a>
 @deprecated Use getFavorites(int page) instead]]>
      </doc>
    </method>
    <method name="getFavorites" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="page" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format.

 @param page the number of page
 @return List<Status>
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites">Twitter API Wiki / Twitter REST API Method: favorites</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="favorites" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getFavorites(String id) instead">
      <param name="id" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format.

 @param id the ID or screen name of the user for whom to request a list of favorite statuses
 @return List<Status>
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites">Twitter API Wiki / Twitter REST API Method: favorites</a>
 @deprecated Use getFavorites(String id) instead]]>
      </doc>
    </method>
    <method name="getFavorites" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format.

 @param id the ID or screen name of the user for whom to request a list of favorite statuses
 @return List<Status>
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites">Twitter API Wiki / Twitter REST API Method: favorites</a>
 @since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="favorites" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getFavorites(String id, int page) instead">
      <param name="id" type="java.lang.String"/>
      <param name="page" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format.

 @param id   the ID or screen name of the user for whom to request a list of favorite statuses
 @param page the number of page
 @return List<Status>
 @throws TwitterException when Twitter service or network is unavailable
 @deprecated Use getFavorites(String id, int page) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites">Twitter API Wiki / Twitter REST API Method: favorites</a>]]>
      </doc>
    </method>
    <method name="getFavorites" return="java.util.List&lt;twitter4j.Status&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="page" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format.

 @param id   the ID or screen name of the user for whom to request a list of favorite statuses
 @param page the number of page
 @return List<Status>
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites">Twitter API Wiki / Twitter REST API Method: favorites</a>]]>
      </doc>
    </method>
    <method name="createFavorite" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Favorites the status specified in the ID parameter as the authenticating user.  Returns the favorite status when successful.

 @param id the ID of the status to favorite
 @return Status
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites%C2%A0create">Twitter API Wiki / Twitter REST API Method: favorites create</a>]]>
      </doc>
    </method>
    <method name="destroyFavorite" return="twitter4j.Status"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="long"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Un-favorites the status specified in the ID parameter as the authenticating user.  Returns the un-favorited status in the requested format when successful.

 @param id the ID of the status to un-favorite
 @return Status
 @throws TwitterException when Twitter service or network is unavailable
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: favorites destroy</a>]]>
      </doc>
    </method>
    <method name="follow" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use enableNotification(String id) instead">
      <param name="id" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Enables notifications for updates from the specified user to the authenticating user.  Returns the specified user when successful.

 @param id String
 @return User
 @throws TwitterException when Twitter service or network is unavailable
 @deprecated Use enableNotification(String id) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-notifications%C2%A0follow">Twitter API Wiki / Twitter REST API Method: notifications follow</a>]]>
      </doc>
    </method>
    <method name="enableNotification" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Enables notifications for updates from the specified user to the authenticating user.  Returns the specified user when successful.

 @param id String
 @return User
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-notifications%C2%A0follow">Twitter API Wiki / Twitter REST API Method: notifications follow</a>]]>
      </doc>
    </method>
    <method name="leave" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use disableNotification(String id) instead">
      <param name="id" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Disables notifications for updates from the specified user to the authenticating user.  Returns the specified user when successful.

 @param id String
 @return User
 @throws TwitterException when Twitter service or network is unavailable
 @deprecated Use disableNotification(String id) instead
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-notifications%C2%A0leave">Twitter API Wiki / Twitter REST API Method: notifications leave</a>]]>
      </doc>
    </method>
    <method name="disableNotification" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Disables notifications for updates from the specified user to the authenticating user.  Returns the specified user when successful.

 @param id String
 @return User
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-notifications%C2%A0leave">Twitter API Wiki / Twitter REST API Method: notifications leave</a>]]>
      </doc>
    </method>
    <method name="block" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use createBlock(String id) instead">
      <param name="id" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Blocks the user specified in the ID parameter as the authenticating user.  Returns the blocked user in the requested format when successful.

 @param id the ID or screen_name of the user to block
 @return the blocked user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 1.0.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks%C2%A0create">Twitter API Wiki / Twitter REST API Method: blocks create</a>
 @deprecated Use createBlock(String id) instead]]>
      </doc>
    </method>
    <method name="createBlock" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Blocks the user specified in the ID parameter as the authenticating user.  Returns the blocked user in the requested format when successful.

 @param id the ID or screen_name of the user to block
 @return the blocked user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks%C2%A0create">Twitter API Wiki / Twitter REST API Method: blocks create</a>]]>
      </doc>
    </method>
    <method name="unblock" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use destroyBlock(String id) instead">
      <param name="id" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Un-blocks the user specified in the ID parameter as the authenticating user.  Returns the un-blocked user in the requested format when successful.

 @param id the ID or screen_name of the user to block
 @return the unblocked user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 1.0.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: blocks destroy</a>
 @deprecated Use destroyBlock(String id) instead]]>
      </doc>
    </method>
    <method name="destroyBlock" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Un-blocks the user specified in the ID parameter as the authenticating user.  Returns the un-blocked user in the requested format when successful.

 @param id the ID or screen_name of the user to block
 @return the unblocked user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.1
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks%C2%A0destroy">Twitter API Wiki / Twitter REST API Method: blocks destroy</a>]]>
      </doc>
    </method>
    <method name="existsBlock" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Tests if a friendship exists between two users.
 <br>This method calls http://twitter.com/blocks/exists/id.xml

 @param id The ID or screen_name of the potentially blocked user.
 @return  if the authenticating user is blocking a target user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks-exists">Twitter API Wiki / Twitter REST API Method: blocks exists</a>]]>
      </doc>
    </method>
    <method name="getBlockingUsers" return="java.util.List&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a list of user objects that the authenticating user is blocking.
 <br>This method calls http://twitter.com/blocks/blocking.xml

 @return a list of user objects that the authenticating user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks-blocking">Twitter API Wiki / Twitter REST API Method: blocks blocking</a>]]>
      </doc>
    </method>
    <method name="getBlockingUsers" return="java.util.List&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="page" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a list of user objects that the authenticating user is blocking.
 <br>This method calls http://twitter.com/blocks/blocking.xml

 @param page the number of page
 @return a list of user objects that the authenticating user
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks-blocking">Twitter API Wiki / Twitter REST API Method: blocks blocking</a>]]>
      </doc>
    </method>
    <method name="getBlockingUsersIDs" return="twitter4j.IDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns an array of numeric user ids the authenticating user is blocking.
 <br>This method calls http://twitter.com/blocks/blocking/ids
 @return Returns an array of numeric user ids the authenticating user is blocking.
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-blocks-blocking-ids">Twitter API Wiki / Twitter REST API Method: blocks blocking ids</a>]]>
      </doc>
    </method>
    <method name="getSavedSearches" return="java.util.List&lt;twitter4j.SavedSearch&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the authenticated user's saved search queries.
 <br>This method calls http://twitter.com/saved_searches.json
 @return Returns an array of numeric user ids the authenticating user is blocking.
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.8
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-saved_searches">Twitter API Wiki / Twitter REST API Method: saved_searches</a>]]>
      </doc>
    </method>
    <method name="showSavedSearch" return="twitter4j.SavedSearch"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Retrieve the data for a saved search owned by the authenticating user specified by the given id.
 <br>This method calls http://twitter.com/saved_searches/show/id.json
 @param id The id of the saved search to be retrieved.
 @return the data for a saved search
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.8
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-saved_searches-show">Twitter API Wiki / Twitter REST API Method: saved_searches show</a>]]>
      </doc>
    </method>
    <method name="createSavedSearch" return="twitter4j.SavedSearch"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="query" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Retrieve the data for a saved search owned by the authenticating user specified by the given id.
 <br>This method calls http://twitter.com/saved_searches/saved_searches/create.json
 @return the data for a created saved search
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.8
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-saved_searches-create">Twitter API Wiki / Twitter REST API Method: saved_searches create</a>]]>
      </doc>
    </method>
    <method name="destroySavedSearch" return="twitter4j.SavedSearch"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Destroys a saved search for the authenticated user. The search specified by id must be owned by the authenticating user.
 <br>This method calls http://twitter.com/saved_searches/destroy/id.json
 @param id The id of the saved search to be deleted.
 @return the data for a destroyed saved search
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 2.0.8
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-saved_searches-destroy">Twitter API Wiki / Twitter REST API Method: saved_searches destroy</a>]]>
      </doc>
    </method>
    <method name="test" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the string "ok" in the requested format with a 200 OK HTTP status code.

 @return true if the API is working
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 1.0.4
 @see <a href="http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-help%C2%A0test">Twitter API Wiki / Twitter REST API Method: help test</a>]]>
      </doc>
    </method>
    <method name="getAuthenticatedUser" return="twitter4j.User"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use verifyCredentials() instead">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns extended information of the authenticated user.  This information includes design settings, so third party developers can theme their widgets according to a given user's preferences.<br>
 The call Twitter.getAuthenticatedUser() is equivalent to the call:<br>
 twitter.getUserDetail(twitter.getUserId());

 @return User
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 1.1.3
 @deprecated Use verifyCredentials() instead]]>
      </doc>
    </method>
    <method name="getDowntimeSchedule" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="this method is not supported by the Twitter API anymore">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns the same text displayed on http://twitter.com/home when a maintenance window is scheduled, in the requested format.

 @return the schedule
 @throws TwitterException when Twitter service or network is unavailable
 @since Twitter4J 1.0.4
 @deprecated this method is not supported by the Twitter API anymore]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="IM" type="twitter4j.Twitter.Device"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="SMS" type="twitter4j.Twitter.Device"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="NONE" type="twitter4j.Twitter.Device"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[A java reporesentation of the <a href="http://apiwiki.twitter.com/">Twitter API</a>
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.Twitter -->
  <!-- start class twitter4j.TwitterAdapter -->
  <class name="TwitterAdapter" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="twitter4j.TwitterListener"/>
    <constructor name="TwitterAdapter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="gotHomeTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="java.util.List&lt;twitter4j.Status&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="gotPublicTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="java.util.List&lt;twitter4j.Status&gt;"/>
    </method>
    <method name="gotFriendsTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="java.util.List&lt;twitter4j.Status&gt;"/>
    </method>
    <method name="gotUserTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="java.util.List&lt;twitter4j.Status&gt;"/>
    </method>
    <method name="gotShow"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use gotShowStatus instead">
      <param name="statuses" type="twitter4j.Status"/>
      <doc>
      <![CDATA[@deprecated use gotShowStatus instead]]>
      </doc>
    </method>
    <method name="gotShowStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="twitter4j.Status"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="updated"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use updatedStatus instead">
      <param name="statuses" type="twitter4j.Status"/>
      <doc>
      <![CDATA[@deprecated use updatedStatus instead]]>
      </doc>
    </method>
    <method name="updatedStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="twitter4j.Status"/>
    </method>
    <method name="gotReplies"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use gotMentions instead">
      <param name="statuses" type="java.util.List&lt;twitter4j.Status&gt;"/>
      <doc>
      <![CDATA[@deprecated use gotMentions instead]]>
      </doc>
    </method>
    <method name="gotMentions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="java.util.List&lt;twitter4j.Status&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="gotRetweetedByMe"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="java.util.List&lt;twitter4j.Status&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="gotRetweetedToMe"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="java.util.List&lt;twitter4j.Status&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="gotRetweetsOfMe"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="java.util.List&lt;twitter4j.Status&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="destroyedStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="destroyedStatus" type="twitter4j.Status"/>
    </method>
    <method name="retweetedStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="retweetedStatus" type="twitter4j.Status"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="gotFriends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="users" type="java.util.List&lt;twitter4j.User&gt;"/>
    </method>
    <method name="gotFollowers"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="users" type="java.util.List&lt;twitter4j.User&gt;"/>
    </method>
    <method name="gotFeatured"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="users" type="java.util.List&lt;twitter4j.User&gt;"/>
    </method>
    <method name="gotUserDetail"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
    </method>
    <method name="gotDirectMessages"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="messages" type="java.util.List&lt;twitter4j.DirectMessage&gt;"/>
    </method>
    <method name="gotSentDirectMessages"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="messages" type="java.util.List&lt;twitter4j.DirectMessage&gt;"/>
    </method>
    <method name="sentDirectMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="twitter4j.DirectMessage"/>
    </method>
    <method name="deletedDirectMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use destroyedDirectMessage instead">
      <param name="message" type="twitter4j.DirectMessage"/>
      <doc>
      <![CDATA[@deprecated use destroyedDirectMessage instead]]>
      </doc>
    </method>
    <method name="destroyedDirectMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="twitter4j.DirectMessage"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="gotFriendsIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ids" type="twitter4j.IDs"/>
    </method>
    <method name="gotFollowersIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ids" type="twitter4j.IDs"/>
    </method>
    <method name="created"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use createdFriendship instead">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@deprecated use createdFriendship instead]]>
      </doc>
    </method>
    <method name="createdFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="destroyed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use destroyedFriendship instead">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@deprecated use destroyedFriendship instead]]>
      </doc>
    </method>
    <method name="destroyedFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="gotExists"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use gotExistsFriendship instead">
      <param name="exists" type="boolean"/>
      <doc>
      <![CDATA[@deprecated use gotExistsFriendship instead]]>
      </doc>
    </method>
    <method name="gotExistsFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="exists" type="boolean"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="updatedLocation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use updatedProfile instead">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@deprecated Use updatedProfile instead]]>
      </doc>
    </method>
    <method name="updatedProfile"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.2]]>
      </doc>
    </method>
    <method name="updatedProfileColors"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
    </method>
    <method name="gotRateLimitStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="twitter4j.RateLimitStatus"/>
    </method>
    <method name="updatedDeliverlyDevice"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
    </method>
    <method name="gotFavorites"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="java.util.List&lt;twitter4j.Status&gt;"/>
    </method>
    <method name="createdFavorite"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="twitter4j.Status"/>
    </method>
    <method name="destroyedFavorite"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="twitter4j.Status"/>
    </method>
    <method name="followed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use enabledNotification instead">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@deprecated use enabledNotification instead]]>
      </doc>
    </method>
    <method name="enabledNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="left"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use disabledNotification instead">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@deprecated use disabledNotification instead]]>
      </doc>
    </method>
    <method name="disabledNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="blocked"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use createdBlock instead">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@deprecated use createdBlock instead]]>
      </doc>
    </method>
    <method name="createdBlock"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="unblocked"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use destroyedBlock instead">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@deprecated use destroyedBlock instead]]>
      </doc>
    </method>
    <method name="destroyedBlock"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="gotExistsBlock"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="blockExists" type="boolean"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.4]]>
      </doc>
    </method>
    <method name="gotBlockingUsers"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="blockingUsers" type="java.util.List&lt;twitter4j.User&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.4]]>
      </doc>
    </method>
    <method name="gotBlockingUsersIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="blockingUsersIDs" type="twitter4j.IDs"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.4]]>
      </doc>
    </method>
    <method name="tested"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="test" type="boolean"/>
    </method>
    <method name="gotDowntimeSchedule"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not supported by Twitter API anymore">
      <param name="schedule" type="java.lang.String"/>
      <doc>
      <![CDATA[@deprecated not supported by Twitter API anymore]]>
      </doc>
    </method>
    <method name="searched"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="result" type="twitter4j.QueryResult"/>
    </method>
    <method name="gotTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="trends" type="twitter4j.Trends"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.2]]>
      </doc>
    </method>
    <method name="gotCurrentTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="trends" type="twitter4j.Trends"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.2]]>
      </doc>
    </method>
    <method name="gotDailyTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="trendsList" type="java.util.List&lt;twitter4j.Trends&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.2]]>
      </doc>
    </method>
    <method name="gotWeeklyTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="trendsList" type="java.util.List&lt;twitter4j.Trends&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.2]]>
      </doc>
    </method>
    <method name="onException"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ex" type="twitter4j.TwitterException"/>
      <param name="method" type="int"/>
      <doc>
      <![CDATA[@param ex TwitterException
 @param method int]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A handy adapter of TwitterListener.
 @see twitter4j.AsyncTwitter
 @see twitter4j.TwitterListener
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.TwitterAdapter -->
  <!-- start class twitter4j.TwitterException -->
  <class name="TwitterException" extends="java.lang.Exception"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TwitterException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="TwitterException" type="java.lang.Exception"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="TwitterException" type="java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="TwitterException" type="java.lang.String, java.lang.Exception"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="TwitterException" type="java.lang.String, java.lang.Exception, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getStatusCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[An exception class that will be thrown when TwitterAPI calls are failed.<br>
 In case the Twitter server returned HTTP error code, you can get the HTTP status code using getStatusCode() method.
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.TwitterException -->
  <!-- start interface twitter4j.TwitterListener -->
  <interface name="TwitterListener"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="gotPublicTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="java.util.List&lt;twitter4j.Status&gt;"/>
    </method>
    <method name="gotHomeTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="java.util.List&lt;twitter4j.Status&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="gotFriendsTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="java.util.List&lt;twitter4j.Status&gt;"/>
    </method>
    <method name="gotUserTimeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="java.util.List&lt;twitter4j.Status&gt;"/>
    </method>
    <method name="gotShow"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use gotShowStatus instead">
      <param name="status" type="twitter4j.Status"/>
      <doc>
      <![CDATA[@deprecated use gotShowStatus instead]]>
      </doc>
    </method>
    <method name="gotShowStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="twitter4j.Status"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="updated"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use updatedStatus instead">
      <param name="status" type="twitter4j.Status"/>
      <doc>
      <![CDATA[@deprecated use updatedStatus instead]]>
      </doc>
    </method>
    <method name="updatedStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="twitter4j.Status"/>
    </method>
    <method name="gotReplies"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use gotMentions instead">
      <param name="statuses" type="java.util.List&lt;twitter4j.Status&gt;"/>
      <doc>
      <![CDATA[@deprecated use gotMentions instead]]>
      </doc>
    </method>
    <method name="gotMentions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="java.util.List&lt;twitter4j.Status&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="gotRetweetedByMe"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="java.util.List&lt;twitter4j.Status&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="gotRetweetedToMe"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="java.util.List&lt;twitter4j.Status&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="gotRetweetsOfMe"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="java.util.List&lt;twitter4j.Status&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="destroyedStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="destroyedStatus" type="twitter4j.Status"/>
    </method>
    <method name="retweetedStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="retweetedStatus" type="twitter4j.Status"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="gotFriends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="users" type="java.util.List&lt;twitter4j.User&gt;"/>
    </method>
    <method name="gotFollowers"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="users" type="java.util.List&lt;twitter4j.User&gt;"/>
    </method>
    <method name="gotFeatured"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="users" type="java.util.List&lt;twitter4j.User&gt;"/>
    </method>
    <method name="gotUserDetail"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
    </method>
    <method name="gotDirectMessages"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="messages" type="java.util.List&lt;twitter4j.DirectMessage&gt;"/>
    </method>
    <method name="gotSentDirectMessages"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="messages" type="java.util.List&lt;twitter4j.DirectMessage&gt;"/>
    </method>
    <method name="sentDirectMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="twitter4j.DirectMessage"/>
    </method>
    <method name="deletedDirectMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use destroyedDirectMessage instead">
      <param name="message" type="twitter4j.DirectMessage"/>
      <doc>
      <![CDATA[@deprecated use destroyedDirectMessage instead]]>
      </doc>
    </method>
    <method name="destroyedDirectMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="twitter4j.DirectMessage"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="gotFriendsIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ids" type="twitter4j.IDs"/>
    </method>
    <method name="gotFollowersIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ids" type="twitter4j.IDs"/>
    </method>
    <method name="created"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use createdFriendship instead">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@deprecated use createdFriendship instead]]>
      </doc>
    </method>
    <method name="createdFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="destroyed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use destroyedFriendship instead">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@deprecated use destroyedFriendship instead]]>
      </doc>
    </method>
    <method name="destroyedFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="gotExists"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use gotExistsFriendship instead">
      <param name="exists" type="boolean"/>
      <doc>
      <![CDATA[@deprecated use gotExistsFriendship instead]]>
      </doc>
    </method>
    <method name="gotExistsFriendship"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="exists" type="boolean"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="updatedLocation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use updatedProfile instead">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@deprecated Use updatedProfile instead]]>
      </doc>
    </method>
    <method name="updatedProfile"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.2]]>
      </doc>
    </method>
    <method name="updatedProfileColors"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
    </method>
    <method name="gotRateLimitStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rateLimitStatus" type="twitter4j.RateLimitStatus"/>
    </method>
    <method name="updatedDeliverlyDevice"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
    </method>
    <method name="gotFavorites"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statuses" type="java.util.List&lt;twitter4j.Status&gt;"/>
    </method>
    <method name="createdFavorite"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="twitter4j.Status"/>
    </method>
    <method name="destroyedFavorite"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="status" type="twitter4j.Status"/>
    </method>
    <method name="followed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use enabledNotification instead">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@deprecated use enabledNotification instead]]>
      </doc>
    </method>
    <method name="enabledNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="left"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use disabledNotification instead">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@deprecated use disabledNotification instead]]>
      </doc>
    </method>
    <method name="disabledNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="blocked"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use createdBlock instead">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@deprecated use createdBlock instead]]>
      </doc>
    </method>
    <method name="createdBlock"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="unblocked"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use destroyedBlock instead">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@deprecated use destroyedBlock instead]]>
      </doc>
    </method>
    <method name="destroyedBlock"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="user" type="twitter4j.User"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.1]]>
      </doc>
    </method>
    <method name="gotExistsBlock"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="blockExists" type="boolean"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.4]]>
      </doc>
    </method>
    <method name="gotBlockingUsers"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="blockingUsers" type="java.util.List&lt;twitter4j.User&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.4]]>
      </doc>
    </method>
    <method name="gotBlockingUsersIDs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="blockingUsersIDs" type="twitter4j.IDs"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.4]]>
      </doc>
    </method>
    <method name="tested"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="test" type="boolean"/>
    </method>
    <method name="gotDowntimeSchedule"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not supported by Twitter API anymore">
      <param name="schedule" type="java.lang.String"/>
      <doc>
      <![CDATA[@deprecated not supported by Twitter API anymore]]>
      </doc>
    </method>
    <method name="searched"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="queryResult" type="twitter4j.QueryResult"/>
    </method>
    <method name="gotTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="trends" type="twitter4j.Trends"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.2]]>
      </doc>
    </method>
    <method name="gotCurrentTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="trends" type="twitter4j.Trends"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.2]]>
      </doc>
    </method>
    <method name="gotDailyTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="trendsList" type="java.util.List&lt;twitter4j.Trends&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.2]]>
      </doc>
    </method>
    <method name="gotWeeklyTrends"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="trendsList" type="java.util.List&lt;twitter4j.Trends&gt;"/>
      <doc>
      <![CDATA[@since Twitter4J 2.0.2]]>
      </doc>
    </method>
    <method name="onException"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="te" type="twitter4j.TwitterException"/>
      <param name="method" type="int"/>
      <doc>
      <![CDATA[@param te     TwitterException
 @param method int]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A listner for receiving asynchronous responses from Twitter Async APIs.

 @see twitter4j.AsyncTwitter
 @see twitter4j.TwitterAdapter
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </interface>
  <!-- end interface twitter4j.TwitterListener -->
  <!-- start class twitter4j.TwitterResponse -->
  <class name="TwitterResponse" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <constructor name="TwitterResponse"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="TwitterResponse" type="twitter4j.http.Response"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="ensureRootNodeNameIs"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="rootName" type="java.lang.String"/>
      <param name="elem" type="org.w3c.dom.Element"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
    </method>
    <method name="ensureRootNodeNameIs"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="rootNames" type="java.lang.String[]"/>
      <param name="elem" type="org.w3c.dom.Element"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
    </method>
    <method name="ensureRootNodeNameIs"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="rootName" type="java.lang.String"/>
      <param name="doc" type="org.w3c.dom.Document"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
    </method>
    <method name="isRootNodeNilClasses" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="doc" type="org.w3c.dom.Document"/>
    </method>
    <method name="getChildText" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="str" type="java.lang.String"/>
      <param name="elem" type="org.w3c.dom.Element"/>
    </method>
    <method name="getTextContent" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="str" type="java.lang.String"/>
      <param name="elem" type="org.w3c.dom.Element"/>
    </method>
    <method name="getChildInt" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="str" type="java.lang.String"/>
      <param name="elem" type="org.w3c.dom.Element"/>
    </method>
    <method name="getChildLong" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="str" type="java.lang.String"/>
      <param name="elem" type="org.w3c.dom.Element"/>
    </method>
    <method name="getString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="json" type="twitter4j.org.json.JSONObject"/>
      <param name="decode" type="boolean"/>
    </method>
    <method name="getChildBoolean" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="str" type="java.lang.String"/>
      <param name="elem" type="org.w3c.dom.Element"/>
    </method>
    <method name="getChildDate" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="str" type="java.lang.String"/>
      <param name="elem" type="org.w3c.dom.Element"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
    </method>
    <method name="getChildDate" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="str" type="java.lang.String"/>
      <param name="elem" type="org.w3c.dom.Element"/>
      <param name="format" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
    </method>
    <method name="parseDate" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="str" type="java.lang.String"/>
      <param name="format" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
    </method>
    <method name="getInt" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <param name="json" type="twitter4j.org.json.JSONObject"/>
      <exception name="JSONException" type="twitter4j.org.json.JSONException"/>
    </method>
    <method name="getLong" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <param name="json" type="twitter4j.org.json.JSONObject"/>
      <exception name="JSONException" type="twitter4j.org.json.JSONException"/>
    </method>
    <method name="getBoolean" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <param name="json" type="twitter4j.org.json.JSONObject"/>
      <exception name="JSONException" type="twitter4j.org.json.JSONException"/>
    </method>
    <method name="getRateLimitLimit" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRateLimitRemaining" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRateLimitReset" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Super class of Twitter Response objects.

 @see twitter4j.DirectMessage
 @see twitter4j.Status
 @see twitter4j.User
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.TwitterResponse -->
  <!-- start class twitter4j.TwitterStream -->
  <class name="TwitterStream" extends="twitter4j.TwitterSupport"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TwitterStream"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a TwitterStream instance. UserID and password should be provided by either twitter4j.properties or system property.
 since Twitter4J 2.0.10]]>
      </doc>
    </constructor>
    <constructor name="TwitterStream" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="TwitterStream" type="java.lang.String, java.lang.String, twitter4j.StatusListener"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="firehose"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="count" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Starts listening on all public statuses. Available only to approved parties and requires a signed agreement to access. Please do not contact us about access to the firehose. If your service warrants access to it, we'll contact you.

 @param count Indicates the number of previous statuses to stream before transitioning to the live stream.
 @throws TwitterException when Twitter service or network is unavailable
 @see twitter4j.StatusStream
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#firehose">Twitter API Wiki / Streaming API Documentation - firehose</a>
 @since Twitter4J 2.0.4]]>
      </doc>
    </method>
    <method name="getFirehoseStream" return="twitter4j.StatusStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="count" type="int"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a status stream of all public statuses. Available only to approved parties and requires a signed agreement to access. Please do not contact us about access to the firehose. If your service warrants access to it, we'll contact you.

 @param count Indicates the number of previous statuses to stream before transitioning to the live stream.
 @return StatusStream
 @throws TwitterException when Twitter service or network is unavailable
 @see twitter4j.StatusStream
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#firehose">Twitter API Wiki / Streaming API Documentation - firehose</a>
 @since Twitter4J 2.0.4]]>
      </doc>
    </method>
    <method name="retweet"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Starts listening on all retweets. The retweet stream is not a generally available resource. Few applications require this level of access. Creative use of a combination of other resources and various access levels can satisfy nearly every application use case. As of 9/11/2009, the site-wide retweet feature has not yet launched, so there are currently few, if any, retweets on this stream.

 @throws TwitterException when Twitter service or network is unavailable
 @see twitter4j.StatusStream
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#retweet">Twitter API Wiki / Streaming API Documentation - retweet</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getRetweetStream" return="twitter4j.StatusStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a stream of all retweets. The retweet stream is not a generally available resource. Few applications require this level of access. Creative use of a combination of other resources and various access levels can satisfy nearly every application use case. As of 9/11/2009, the site-wide retweet feature has not yet launched, so there are currently few, if any, retweets on this stream.

 @return StatusStream
 @throws TwitterException when Twitter service or network is unavailable
 @see twitter4j.StatusStream
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#firehose">Twitter API Wiki / Streaming API Documentation - firehose</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="sample"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Starts listening on random sample of all public statuses. The default access level provides a small proportion of the Firehose. The "Gardenhose" access level provides a proportion more suitable for data mining and research applications that desire a larger proportion to be statistically significant sample.

 @throws TwitterException when Twitter service or network is unavailable
 @see twitter4j.StatusStream
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#sample">Twitter API Wiki / Streaming API Documentation - sample</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getSampleStream" return="twitter4j.StatusStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a stream of random sample of all public statuses. The default access level provides a small proportion of the Firehose. The "Gardenhose" access level provides a proportion more suitable for data mining and research applications that desire a larger proportion to be statistically significant sample.

 @return StatusStream
 @throws TwitterException when Twitter service or network is unavailable
 @see twitter4j.StatusStream
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#sample">Twitter API Wiki / Streaming API Documentation - sample</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="filter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="count" type="int"/>
      <param name="follow" type="int[]"/>
      <param name="track" type="java.lang.String[]"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[See birddog above. Allows following up to 200 users. Publicly available.

 @param count  Indicates the number of previous statuses to stream before transitioning to the live stream.
 @param follow Specifies the users, by ID, to receive public tweets from.
 @param track Specifies keywords to track.
 @throws TwitterException when Twitter service or network is unavailable
 @see twitter4j.StatusStream
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#filter">Twitter API Wiki / Streaming API Documentation - filter</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="getFilterStream" return="twitter4j.StatusStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="count" type="int"/>
      <param name="follow" type="int[]"/>
      <param name="track" type="java.lang.String[]"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns stream of public statuses that match one or more filter predicates. At least one predicate parameter, track or follow, must be specified. Both parameters may be specified which allows most clients to use a single connection to the Streaming API.

 @param follow Specifies the users, by ID, to receive public tweets from.
 @return StatusStream
 @throws TwitterException when Twitter service or network is unavailable
 @see twitter4j.StatusStream
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#filter">Twitter API Wiki / Streaming API Documentation - filter</a>
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="gardenhose"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use sample() instead">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Starts listening on a percentage of all public statuses, suitable for data mining and research applications that require a statistically significant sample. Available only to approved parties and requires a signed agreement to access.

 @throws TwitterException when Twitter service or network is unavailable
 @see twitter4j.StatusStream
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#gardenhose">Twitter API Wiki / Streaming API Documentation - gardenhose</a>
 @since Twitter4J 2.0.4
 @deprecated use sample() instead]]>
      </doc>
    </method>
    <method name="getGardenhoseStream" return="twitter4j.StatusStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use sampleStream() instead">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a status stream for a percentage of all public statuses, suitable for data mining and research applications that require a statistically significant sample. Available only to approved parties and requires a signed agreement to access.

 @return StatusStream
 @throws TwitterException when Twitter service or network is unavailable
 @see twitter4j.StatusStream
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#gardenhose">Twitter API Wiki / Streaming API Documentation - gardenhose</a>
 @since Twitter4J 2.0.4
 @deprecated use sampleStream() instead]]>
      </doc>
    </method>
    <method name="spritzer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use sample() instead">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Starts listening on a percentage of all public statuses, suitable for small projects that don't require a statistically significant sample. Publicly available.

 @throws TwitterException when Twitter service or network is unavailable
 @see twitter4j.StatusStream
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#spritzer">Twitter API Wiki / Streaming API Documentation - spritizer</a>
 @since Twitter4J 2.0.4
 @deprecated use sample() instead]]>
      </doc>
    </method>
    <method name="getSpritzerStream" return="twitter4j.StatusStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use sampleStream() instead">
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a status stream for a percentage of all public statuses, suitable for small projects that don't require a statistically significant sample. Publicly available.

 @return StatusStream
 @throws TwitterException when Twitter service or network is unavailable
 @see twitter4j.StatusStream
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#spritzer">Twitter API Wiki / Streaming API Documentation - spritizer</a>
 @since Twitter4J 2.0.4
 @deprecated use sampleStream() instead]]>
      </doc>
    </method>
    <method name="birddog"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use filter() instead">
      <param name="count" type="int"/>
      <param name="follow" type="int[]"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Starts listening on public statuses from a specified set of users, by ID. Requires use of the "follow" parameter, documented below. Allows following up to 200,000 users. Available only to approved parties and requires a signed agreement to access.

 @param count  Indicates the number of previous statuses to stream before transitioning to the live stream.
 @param follow Specifies the users, by ID, to receive public tweets from.
 @throws TwitterException when Twitter service or network is unavailable
 @see twitter4j.StatusStream
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#birddog">Twitter API Wiki / Streaming API Documentation - birddog</a>
 @since Twitter4J 2.0.4
 @deprecated use filter() instead]]>
      </doc>
    </method>
    <method name="getBirddogStream" return="twitter4j.StatusStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use filterStream() instead">
      <param name="count" type="int"/>
      <param name="follow" type="int[]"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns a status stream for public statuses from a specified set of users, by ID. Requires use of the "follow" parameter, documented below. Allows following up to 200,000 users. Available only to approved parties and requires a signed agreement to access.

 @param count  Indicates the number of previous statuses to stream before transitioning to the live stream.
 @param follow Specifies the users, by ID, to receive public tweets from.
 @return StatusStream
 @throws TwitterException when Twitter service or network is unavailable
 @see twitter4j.StatusStream
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#birddog">Twitter API Wiki / Streaming API Documentation - birddog</a>
 @since Twitter4J 2.0.4
 @deprecated use filterStream() instead]]>
      </doc>
    </method>
    <method name="shadow"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use filter() instead">
      <param name="count" type="int"/>
      <param name="follow" type="int[]"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[See birddog above. Allows following up to 2,000 users.

 @param count  Indicates the number of previous statuses to stream before transitioning to the live stream.
 @param follow Specifies the users, by ID, to receive public tweets from.
 @throws TwitterException when Twitter service or network is unavailable
 @see twitter4j.StatusStream
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#firehose">Twitter API Wiki / Streaming API Documentation - shadow</a>
 @since Twitter4J 2.0.4
 @deprecated use filter() instead]]>
      </doc>
    </method>
    <method name="getShadowStream" return="twitter4j.StatusStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use filterStream() instead">
      <param name="count" type="int"/>
      <param name="follow" type="int[]"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[See birddog above. Allows following up to 2,000 users.

 @param count  Indicates the number of previous statuses to stream before transitioning to the live stream.
 @param follow Specifies the users, by ID, to receive public tweets from.
 @return StatusStream
 @throws TwitterException when Twitter service or network is unavailable
 @see twitter4j.StatusStream
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#firehose">Twitter API Wiki / Streaming API Documentation - shadow</a>
 @since Twitter4J 2.0.4
 @deprecated use filterStream() instead]]>
      </doc>
    </method>
    <method name="follow"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use filter() instead">
      <param name="follow" type="int[]"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[See birddog above. Allows following up to 200 users. Publicly available.

 @param follow Specifies the users, by ID, to receive public tweets from.
 @throws TwitterException when Twitter service or network is unavailable
 @see twitter4j.StatusStream
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#follow">Twitter API Wiki / Streaming API Documentation - follow</a>
 @since Twitter4J 2.0.4
 @deprecated use filter() instead]]>
      </doc>
    </method>
    <method name="getFollowStream" return="twitter4j.StatusStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use filterStream() instead">
      <param name="follow" type="int[]"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[See birddog above. Allows following up to 200 users. Publicly available.

 @param follow Specifies the users, by ID, to receive public tweets from.
 @return StatusStream
 @throws TwitterException when Twitter service or network is unavailable
 @see twitter4j.StatusStream
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#follow">Twitter API Wiki / Streaming API Documentation - follow</a>
 @since Twitter4J 2.0.4
 @deprecated use filterStream() instead]]>
      </doc>
    </method>
    <method name="track"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use filter() instead">
      <param name="keywords" type="java.lang.String[]"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Returns public statuses that contain at least one of the specified keywords. 
 Requires use of the "track" parameter, documented below. Allows following up 
 to 20 keywords, subject to Track Limitations, described above. 
 Predicate terms are case-insensitive logical ORs. Terms are exact-matched, 
 and exact-matched ignoring punctuation. Publicly available.

 Examples: The predicate Twitter will match all public statuses with the 
 following space delimited tokens in their text field: TWITTER, twitter, 
 "Twitter", twitter., #twitter and @twitter. The following tokens will not be matched: 
 TwitterTracker and http://www.twitter.com,

 @throws TwitterException when Twitter service or network is unavailable
 @see twitter4j.StatusStream
 @see <a href="http://apiwiki.twitter.com/Streaming-API-Documentation#spritzer">Twitter API Wiki / Streaming API Documentation - spritizer</a>
 @since Twitter4J 2.0.9
 @deprecated use filter() instead]]>
      </doc>
    </method>
    <method name="getTrackStream" return="twitter4j.StatusStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use filterStream() instead">
      <param name="keywords" type="java.lang.String[]"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[@see #getTrackStream(String[])
 @deprecated use filterStream() instead]]>
      </doc>
    </method>
    <method name="cleanup"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getStatusListener" return="twitter4j.StatusListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setStatusListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusListener" type="twitter4j.StatusListener"/>
    </method>
    <doc>
    <![CDATA[A java reporesentation of the <a href="http://apiwiki.twitter.com/Streaming-API-Documentation">Twitter Streaming API</a>

 @author Yusuke Yamamoto - yusuke at mac.com
 @since Twitter4J 2.0.4]]>
    </doc>
  </class>
  <!-- end class twitter4j.TwitterStream -->
  <!-- start class twitter4j.User -->
  <class name="User" extends="twitter4j.TwitterResponse"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <method name="getId" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the id of the user

 @return the id of the user]]>
      </doc>
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the name of the user

 @return the name of the user]]>
      </doc>
    </method>
    <method name="getScreenName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the screen name of the user

 @return the screen name of the user]]>
      </doc>
    </method>
    <method name="getLocation" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the location of the user

 @return the location of the user]]>
      </doc>
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the description of the user

 @return the description of the user]]>
      </doc>
    </method>
    <method name="getProfileImageURL" return="java.net.URL"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the profile image url of the user

 @return the profile image url of the user]]>
      </doc>
    </method>
    <method name="getURL" return="java.net.URL"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the url of the user

 @return the url of the user]]>
      </doc>
    </method>
    <method name="isProtected" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Test if the user status is protected

 @return true if the user status is protected]]>
      </doc>
    </method>
    <method name="getFollowersCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of followers

 @return the number of followers
 @since Twitter4J 1.0.4]]>
      </doc>
    </method>
    <method name="sendDirectMessage" return="twitter4j.DirectMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="text" type="java.lang.String"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
    </method>
    <method name="constructUsers" return="java.util.List&lt;twitter4j.User&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="res" type="twitter4j.http.Response"/>
      <param name="twitter" type="twitter4j.Twitter"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
    </method>
    <method name="getStatusCreatedAt" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return created_at or null if the user is protected
 @since Twitter4J 1.1.0]]>
      </doc>
    </method>
    <method name="getStatusId" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return status id or -1 if the user is protected]]>
      </doc>
    </method>
    <method name="getStatusText" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return status text or null if the user is protected]]>
      </doc>
    </method>
    <method name="getStatusSource" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return source or null if the user is protected
 @since 1.1.4]]>
      </doc>
    </method>
    <method name="isStatusTruncated" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return truncated or false if the user is protected
 @since 1.1.4]]>
      </doc>
    </method>
    <method name="getStatusInReplyToStatusId" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return in_reply_to_status_id or -1 if the user is protected
 @since 1.1.4]]>
      </doc>
    </method>
    <method name="getStatusInReplyToUserId" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return in_reply_to_user_id or -1 if the user is protected
 @since 1.1.4]]>
      </doc>
    </method>
    <method name="isStatusFavorited" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return favorited or false if the user is protected
 @since 1.1.4]]>
      </doc>
    </method>
    <method name="getStatusInReplyToScreenName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return in_reply_to_screen_name or null if the user is protected
 @since 1.1.4]]>
      </doc>
    </method>
    <method name="getProfileBackgroundColor" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getProfileTextColor" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getProfileLinkColor" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getProfileSidebarFillColor" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getProfileSidebarBorderColor" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFriendsCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getCreatedAt" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFavouritesCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getUtcOffset" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTimeZone" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getProfileBackgroundImageUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getProfileBackgroundTile" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isFollowing" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="lEsS_tHaNa href=quote_cHaRhttp://groups.google.com/group/twitter-development-talk/browse_frm/thread/42ba883b9f8e3c6equote_cHaR>Deprecation of following and notification elementslEsS_tHaN/a>">
      <doc>
      <![CDATA[@deprecated <a href="http://groups.google.com/group/twitter-development-talk/browse_frm/thread/42ba883b9f8e3c6e">Deprecation of following and notification elements</a>]]>
      </doc>
    </method>
    <method name="isNotifications" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use isNotificationsEnabled() instead">
      <doc>
      <![CDATA[@deprecated use isNotificationsEnabled() instead]]>
      </doc>
    </method>
    <method name="isNotificationEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="lEsS_tHaNa href=quote_cHaRhttp://groups.google.com/group/twitter-development-talk/browse_frm/thread/42ba883b9f8e3c6equote_cHaR>Deprecation of following and notification elementslEsS_tHaN/a>">
      <doc>
      <![CDATA[@since Twitter4J 2.0.1
 @deprecated <a href="http://groups.google.com/group/twitter-development-talk/browse_frm/thread/42ba883b9f8e3c6e">Deprecation of following and notification elements</a>]]>
      </doc>
    </method>
    <method name="getStatusesCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isGeoEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the user is enabling geo location
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="isVerified" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return returns true if the user is a verified celebrity
 @since Twitter4J 2.0.10]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A data class representing Basic user information element
 @author Yusuke Yamamoto - yusuke at mac.com
 @see <a href="http://apiwiki.twitter.com/REST+API+Documentation#Basicuserinformationelement">REST API Documentation - Basic user information element</a>]]>
    </doc>
  </class>
  <!-- end class twitter4j.User -->
  <!-- start class twitter4j.Version -->
  <class name="Version" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Version"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getVersion" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
    </method>
    <doc>
    <![CDATA[@author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.Version -->
</package>
<package name="twitter4j.examples">
  <!-- start class twitter4j.examples.AsyncUpdate -->
  <class name="AsyncUpdate" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AsyncUpdate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
    </method>
    <doc>
    <![CDATA[<p>This is a code example of Twitter4J async API.<br>
 Usage: java twitter4j.examples.AsyncUpdate <i>TwitterID</i> <i>TwitterPassword</i> <i>text</i><br>
 </p>
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.examples.AsyncUpdate -->
  <!-- start class twitter4j.examples.FeedMonitor -->
  <class name="FeedMonitor" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FeedMonitor" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
      <doc>
      <![CDATA[Main entry point for this application.<br>
 If config_file_path is not specified, feedmonitor.properties will be used.<br>
 Usage: java twitter4j.examples.FeedMonitor [config_file_path ..] [interval(min)]]]>
      </doc>
    </method>
    <doc>
    <![CDATA[<p>
 FeedMonitor is a simple feed monitoring application.<br>
 FeedMonitor monitors specified feeds and reports newly posted entries to the specified Twitter account every 10 minutes.<br>
 It is possible to specify multiple configuration files.<br>
 Numeric parameter will be recognized as monitoring interverval in minutes.<br>
 Usage: java twitter4j.examples.FeedMonitor [config_file_path ..] [interval(min)]<br>
 <br>
 If no configuration file path is specified, FeedMonitor will look for default configuration file name - &quot;feedmonitor.properties&quot;.<br>
 The configuration file format is Java standard properties file format with following properties:<br>
 feedurl : the feed URL you want to monitor<br>
 id : Twitter id<br>
 password : Twitter password<br>
 <br>
 <hr>
 e.g. a sample properties for monitoring CSS latest news every 10 minutes
 <pre style="border: solid 1px black;background-color:#AAF">
 feedurl=http://rss.cnn.com/rss/cnn_latest.rss
 id=YOUR_TWITTER_ID
 password=YOUR_TWITTER_PASSWORD</pre>
 </p>
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.examples.FeedMonitor -->
  <!-- start class twitter4j.examples.GetDirectMessages -->
  <class name="GetDirectMessages" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GetDirectMessages"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
      <doc>
      <![CDATA[Usage: java twitter4j.examples.GetDirectMessages ID Password
 @param args String[]]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Example application that gets recent direct messages from specified account.<br>
 Usage: java twitter4j.examples.GetDirectMessages ID Password
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.examples.GetDirectMessages -->
  <!-- start class twitter4j.examples.GetTimelines -->
  <class name="GetTimelines" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GetTimelines"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
      <doc>
      <![CDATA[Usage: java twitter4j.examples.GetTimelines ID Password
 @param args String[]]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Example application that gets public, user and friend timeline using specified account.<br>
 Usage: java twitter4j.examples.GetTimelines ID Password
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.examples.GetTimelines -->
  <!-- start class twitter4j.examples.OAuthUpdate -->
  <class name="OAuthUpdate" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="OAuthUpdate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
      <doc>
      <![CDATA[Usage: java -Dtwitter4j.oauth.consumerKey=[consumer key] -Dtwitter4j.oauth.consumerSecret=[consumer secret] twitter4j.examples.OAuthUpdate [message]
 @param args message]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Example application that uses OAuth method to acquire access to your account.<br>
 This application illustrates how to use OAuth method with Twitter4J.<br>
 Usage: java -Dtwitter4j.oauth.consumerKey=[consumer key] -Dtwitter4j.oauth.consumerSecret=[consumer secret] twitter4j.examples.OAuthUpdate [message]
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.examples.OAuthUpdate -->
  <!-- start class twitter4j.examples.SendDirectMessage -->
  <class name="SendDirectMessage" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SendDirectMessage"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
      <doc>
      <![CDATA[Usage: java twitter4j.examples.DirectMessage senderID senderPassword message recipientId
 @param args String[]]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Example application that sends a message to specified Twitter-er from specified account.<br>
 Usage: java twitter4j.examples.DirectMessage senderID senderPassword message recipientId
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.examples.SendDirectMessage -->
  <!-- start class twitter4j.examples.Update -->
  <class name="Update" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Update"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
      <exception name="TwitterException" type="twitter4j.TwitterException"/>
      <doc>
      <![CDATA[Main entry for this application.
 @param args String[] TwitterID TwitterPassword StatusString]]>
      </doc>
    </method>
    <doc>
    <![CDATA[<p>This is a code example of Twitter4J update API.<br>
 Usage: java twitter4j.examples.Update <i>TwitterID</i> <i>TwitterPassword</i> <i>text</i><br>
 </p>
 @author Yusuke Yamamoto - yusuke at mac.com]]>
    </doc>
  </class>
  <!-- end class twitter4j.examples.Update -->
</package>

</api>
